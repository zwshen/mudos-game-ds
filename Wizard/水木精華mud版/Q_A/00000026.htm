<HTML>
<HEAD>
<TITLE>BBS水木清華站︰精華區</TITLE>
</HEAD>
<BODY>
<CENTER><H1>BBS水木清華站︰精華區</H1></CENTER>
<A Name="top"></a>
發信人:&nbsp;kill300&nbsp;(劍&nbsp;雄),&nbsp;信區:&nbsp;Mud_Builder&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>
&nbsp;<BR>
我想寫個在一個房間裡觸發,在別的地方調用的東西&nbsp;<BR>
我的想法是通過系統級的參數來做,可能文件的方式&nbsp;<BR>
也可以,但是會不會很慢?&nbsp;<BR>
斑竹大人上次說的我聽不太懂,講簡單點,舉個例子好嗎&nbsp;<BR>
謝謝了&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
另外,me-&gt;query_skill(&quot;huntian-qigong&quot;,1)裡的1是&nbsp;<BR>
幹什麼的啊&nbsp;<BR>
&nbsp;<BR>
要是寫2會怎麼樣呢,&nbsp;<BR>
&nbsp;<BR>
call_out裡的數字是表示調用時間的吧,什麼單位啊?&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
發信人:&nbsp;akuma&nbsp;(很不溫柔&nbsp;&nbsp;真的我),&nbsp;信區:&nbsp;Mud_Builder&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>
&nbsp;<BR>
建議使用daemon來控制&nbsp;<BR>
【&nbsp;在&nbsp;kill300&nbsp;(劍&nbsp;雄)&nbsp;的大作中提到:&nbsp;】&nbsp;<BR>
︰<I>&nbsp;我想寫個在一個房間裡觸發,在別的地方調用的東西&nbsp;</I><BR>
︰<I>&nbsp;我的想法是通過系統級的參數來做,可能文件的方式&nbsp;</I><BR>
︰<I>&nbsp;也可以,但是會不會很慢?&nbsp;</I><BR>
︰<I>&nbsp;斑竹大人上次說的我聽不太懂,講簡單點,舉個例子好嗎&nbsp;</I><BR>
︰<I>&nbsp;謝謝了&nbsp;</I><BR>
︰<I>&nbsp;另外,me-&gt;query_skill(&quot;huntian-qigong&quot;,1)裡的1是&nbsp;</I><BR>
︰<I>&nbsp;幹什麼的啊&nbsp;</I><BR>
︰<I>&nbsp;要是寫2會怎麼樣呢,&nbsp;</I><BR>
︰<I>&nbsp;call_out裡的數字是表示調用時間的吧,什麼單位啊?&nbsp;</I><BR>
&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
發信人:&nbsp;kill300&nbsp;(劍&nbsp;雄),&nbsp;信區:&nbsp;Mud_Builder&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>
&nbsp;<BR>
【&nbsp;在&nbsp;akuma&nbsp;(很不溫柔&nbsp;&nbsp;真的我)&nbsp;的大作中提到:&nbsp;】&nbsp;<BR>
︰<I>&nbsp;建議使用daemon來控制&nbsp;</I><BR>
我還是不懂什麼是daemon,只知道這個單詞的意思,&nbsp;<BR>
不知道在mud裡如何&nbsp;用&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
發信人:&nbsp;akuma&nbsp;(很不溫柔&nbsp;&nbsp;真的我),&nbsp;信區:&nbsp;Mud_Builder&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>
&nbsp;<BR>
你想想es2中的戰鬥是怎麼實現的。&nbsp;<BR>
看看/adm/daemons/combatd.c&nbsp;<BR>
一個典型的daemon。&nbsp;<BR>
【&nbsp;在&nbsp;kill300&nbsp;(劍&nbsp;雄)&nbsp;的大作中提到:&nbsp;】&nbsp;<BR>
︰<I>&nbsp;我還是不懂什麼是daemon,只知道這個單詞的意思,&nbsp;</I><BR>
︰<I>&nbsp;不知道在mud裡如何&nbsp;用&nbsp;</I><BR>
&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
發信人:&nbsp;peacock&nbsp;(孔雀~~惶惑),&nbsp;信區:&nbsp;Mud_Builder&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>
&nbsp;<BR>
【&nbsp;在&nbsp;kill300&nbsp;(劍&nbsp;雄)&nbsp;的大作中提到:&nbsp;】&nbsp;<BR>
︰<I>&nbsp;我還是不懂什麼是daemon,只知道這個單詞的意思,&nbsp;</I><BR>
︰<I>&nbsp;不知道在mud裡如何&nbsp;用&nbsp;</I><BR>
有個daemon的目錄，不是在根目錄下就是在system下。&nbsp;<BR>
daemon通常是一個獨立運行的程序，為別的程序提供某些函數調用。&nbsp;<BR>
例如Unix上的http&nbsp;server，Win上的Dll。&nbsp;<BR>
在mud裡通常使用XXXX_D-&gt;fun(p1,p2,……)調用。&nbsp;<BR>
其中XXXX_D是一個宏，指出要調用的Daemon，例如&quot;/system/daemon/chard&quot;。&nbsp;<BR>
&nbsp;<BR>
一些每個個體都要有的功能，但又不是常常用到的，就可以單獨抽出來形成一個&nbsp;<BR>
Daemon在需要時調用。例如char的die()。這樣的好處是節省空間，同時對效率&nbsp;<BR>
影響不大。因為daemon只載入一份，而不是像物品那樣不斷地clone。&nbsp;<BR>
&nbsp;<BR>
另一種情況是需要將某種信息集中起來管理。例如處理MultiLogin，我們需要知&nbsp;<BR>
道每個用戶從哪裡登錄的，這樣就需要把所有在線用戶的IP統一存在一個數組裡，&nbsp;<BR>
而不是分散在每個人身上。那麼圍繞這個數據，我們就應該建立一個Daemon，然&nbsp;<BR>
後提供相應的接口，比如RegUser()––用戶登錄時調用，將用戶IP列入數組；&nbsp;<BR>
RemoveUser()––用戶斷線或退出時調用，將該用戶IP從數組中刪除。另外配套&nbsp;<BR>
的判斷該IP是否已經有人了的函數啦，等等等等，封裝成一個Multilogin.c，然&nbsp;<BR>
後在適當的地方加入對這些函數的調用，例如&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;/system/daemon/Multilogin&quot;-&gt;RegUser(……);&nbsp;<BR>
就算搞定一個Daemon了。&nbsp;<BR>
&nbsp;<BR>
總之，Daemon的優點在於只有一個，缺點也在於只有一個。妙用存乎一心，你自&nbsp;<BR>
己玩吧。&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
發信人:&nbsp;peacock&nbsp;(孔雀~~惶惑),&nbsp;信區:&nbsp;Mud_Builder&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>
&nbsp;<BR>
【&nbsp;在&nbsp;akuma&nbsp;(很不溫柔&nbsp;&nbsp;真的我)&nbsp;的大作中提到:&nbsp;】&nbsp;<BR>
︰<I>&nbsp;你想想es2中的戰鬥是怎麼實現的。&nbsp;</I><BR>
︰<I>&nbsp;看看/adm/daemons/combatd.c&nbsp;</I><BR>
︰<I>&nbsp;一個典型的daemon。&nbsp;</I><BR>
其實combatd不是一個好例子，因為這種每秒調用一次的函數&nbsp;<BR>
變成了遠程調用，實在是很耗資源。如果內存夠的話還是放回&nbsp;<BR>
char.c裡比較好。&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
發信人:&nbsp;akuma&nbsp;(很不溫柔&nbsp;&nbsp;真的我),&nbsp;信區:&nbsp;Mud_Builder&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>
&nbsp;<BR>
針對peacock同志的回答說一句&nbsp;<BR>
孔雀同志太習慣xo的目錄結構了，可能別人都不知道你在說什麼了&nbsp;<BR>
hoho&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
發信人:&nbsp;kill300&nbsp;(劍&nbsp;雄),&nbsp;信區:&nbsp;Mud_Builder&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
【&nbsp;在&nbsp;akuma&nbsp;(很不溫柔&nbsp;&nbsp;真的我)&nbsp;的大作中提到:&nbsp;】&nbsp;<BR>
︰<I>&nbsp;針對peacock同志的回答說一句&nbsp;</I><BR>
︰<I>&nbsp;孔雀同志太習慣xo的目錄結構了，可能別人都不知道你在說什麼了&nbsp;</I><BR>
︰<I>&nbsp;hoho&nbsp;</I><BR>
&nbsp;<BR>
同意,sigh&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
發信人:&nbsp;olives&nbsp;(風),&nbsp;信區:&nbsp;Mud_Builder&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>
&nbsp;<BR>
【&nbsp;在&nbsp;kill300&nbsp;(劍&nbsp;雄)&nbsp;的大作中提到:&nbsp;】&nbsp;<BR>
︰<I>&nbsp;我想寫個在一個房間裡觸發,在別的地方調用的東西&nbsp;</I><BR>
call_other&nbsp;<BR>
不需要別的什麼&nbsp;<BR>
︰<I>&nbsp;我的想法是通過系統級的參數來做,可能文件的方式&nbsp;</I><BR>
︰<I>&nbsp;也可以,但是會不會很慢?&nbsp;</I><BR>
︰<I>&nbsp;斑竹大人上次說的我聽不太懂,講簡單點,舉個例子好嗎&nbsp;</I><BR>
︰<I>&nbsp;謝謝了&nbsp;</I><BR>
︰<I>&nbsp;另外,me-&gt;query_skill(&quot;huntian-qigong&quot;,1)裡的1是&nbsp;</I><BR>
︰<I>&nbsp;幹什麼的啊&nbsp;</I><BR>
︰<I>&nbsp;要是寫2會怎麼樣呢,&nbsp;</I><BR>
︰<I>&nbsp;call_out裡的數字是表示調用時間的吧,什麼單位啊?&nbsp;</I><BR>
&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
發信人:&nbsp;olives&nbsp;(風),&nbsp;信區:&nbsp;Mud_Builder&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>
&nbsp;<BR>
【&nbsp;在&nbsp;kill300&nbsp;(劍&nbsp;雄)&nbsp;的大作中提到:&nbsp;】&nbsp;<BR>
︰<I>&nbsp;我還是不懂什麼是daemon,只知道這個單詞的意思,&nbsp;</I><BR>
︰<I>&nbsp;不知道在mud裡如何&nbsp;用&nbsp;</I><BR>
faint&nbsp;<BR>
你怎麼什麼都不知道&nbsp;<BR>
那你怎麼編mud啊&nbsp;<BR>
就像/adm/daemons/裡面的東西就是daemon&nbsp;<BR>
daemon常貯內存，處理一寫大量重複的東西&nbsp;<BR>
比如combatd.c&nbsp;logind.c&nbsp;emoted.c&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
發信人:&nbsp;olives&nbsp;(風),&nbsp;信區:&nbsp;Mud_Builder&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>
&nbsp;<BR>
【&nbsp;在&nbsp;peacock&nbsp;(孔雀~~惶惑)&nbsp;的大作中提到:&nbsp;】&nbsp;<BR>
︰<I>&nbsp;其實combatd不是一個好例子，因為這種每秒調用一次的函數&nbsp;</I><BR>
︰<I>&nbsp;變成了遠程調用，實在是很耗資源。如果內存夠的話還是放回&nbsp;</I><BR>
︰<I>&nbsp;char.c裡比較好。&nbsp;</I><BR>
我不認為如此哦，&nbsp;<BR>
我個人認為這些個大量重複調用，而且重複率很高的代碼&nbsp;<BR>
還是放在一個daemon裡面比較好，如果放在char.c的人&nbsp;<BR>
的body裡面，這樣即使用不著這些函數調用的人都要被迫&nbsp;<BR>
調用，放在daemon裡面的話，只有需要調用的時候再調用&nbsp;<BR>
如果放在body裡面的話，造成代碼和內存，以及運算的浪費&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
發信人:&nbsp;yeung&nbsp;(流星雨),&nbsp;信區:&nbsp;Mud_Builder&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>
&nbsp;<BR>
【&nbsp;在&nbsp;kill300&nbsp;(劍&nbsp;雄)&nbsp;的大作中提到:&nbsp;】&nbsp;<BR>
︰<I>&nbsp;我想寫個在一個房間裡觸發,在別的地方調用的東西&nbsp;</I><BR>
︰<I>&nbsp;我的想法是通過系統級的參數來做,可能文件的方式&nbsp;</I><BR>
︰<I>&nbsp;也可以,但是會不會很慢?&nbsp;</I><BR>
︰<I>&nbsp;斑竹大人上次說的我聽不太懂,講簡單點,舉個例子好嗎&nbsp;</I><BR>
︰<I>&nbsp;謝謝了&nbsp;</I><BR>
︰<I>&nbsp;另外,me-&gt;query_skill(&quot;huntian-qigong&quot;,1)裡的1是&nbsp;</I><BR>
︰<I>&nbsp;幹什麼的啊&nbsp;</I><BR>
︰<I>&nbsp;要是寫2會怎麼樣呢,&nbsp;</I><BR>
︰<I>&nbsp;call_out裡的數字是表示調用時間的吧,什麼單位啊?&nbsp;</I><BR>
&nbsp;<BR>
query_skill在/feature/skill.c裡面定義的,去看看好了.&nbsp;<BR>
&nbsp;<BR>
要想做好,一要熟悉efun,二是多看看lib&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
發信人:&nbsp;akuma&nbsp;(很不溫柔&nbsp;&nbsp;真的我),&nbsp;信區:&nbsp;Mud_Builder&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>
&nbsp;<BR>
【&nbsp;在&nbsp;olives&nbsp;(風)&nbsp;的大作中提到:&nbsp;】&nbsp;<BR>
︰<I>&nbsp;我不認為如此哦，&nbsp;</I><BR>
︰<I>&nbsp;我個人認為這些個大量重複調用，而且重複率很高的代碼&nbsp;</I><BR>
︰<I>&nbsp;還是放在一個daemon裡面比較好，如果放在char.c的人&nbsp;</I><BR>
︰<I>&nbsp;的body裡面，這樣即使用不著這些函數調用的人都要被迫&nbsp;</I><BR>
︰<I>&nbsp;調用，放在daemon裡面的話，只有需要調用的時候再調用&nbsp;</I><BR>
︰<I>&nbsp;如果放在body裡面的話，造成代碼和內存，以及運算的浪費&nbsp;</I><BR>
我到是認為，目前得情況來看&nbsp;代碼和內存得浪費不是非常重要得問題&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
發信人:&nbsp;MicroLiang&nbsp;(Micro&nbsp;Liang),&nbsp;信區:&nbsp;Mud_Builder&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>
&nbsp;<BR>
【&nbsp;在&nbsp;akuma&nbsp;(很不溫柔&nbsp;&nbsp;真的我)&nbsp;的大作中提到:&nbsp;】&nbsp;<BR>
︰<I>&nbsp;建議使用daemon來控制&nbsp;</I><BR>
&nbsp;<BR>
判斷&nbsp;load&nbsp;之後，用&nbsp;file-&gt;func(..)..&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
發信人:&nbsp;MicroLiang&nbsp;(Micro&nbsp;Liang),&nbsp;信區:&nbsp;Mud_Builder&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>
&nbsp;<BR>
【&nbsp;在&nbsp;peacock&nbsp;(孔雀~~惶惑)&nbsp;的大作中提到:&nbsp;】&nbsp;<BR>
︰<I>&nbsp;有個daemon的目錄，不是在根目錄下就是在system下。&nbsp;</I><BR>
︰<I>&nbsp;daemon通常是一個獨立運行的程序，為別的程序提供某些函數調用。&nbsp;</I><BR>
︰<I>&nbsp;例如Unix上的http&nbsp;server，Win上的Dll。&nbsp;</I><BR>
︰<I>&nbsp;在mud裡通常使用XXXX_D-&gt;fun(p1,p2,……)調用。&nbsp;</I><BR>
︰<I>&nbsp;其中XXXX_D是一個宏，指出要調用的Daemon，例如&quot;/system/daemon/chard&quot;。&nbsp;</I><BR>
︰<I>&nbsp;一些每個個體都要有的功能，但又不是常常用到的，就可以單獨抽出來形成一個&nbsp;</I><BR>
︰<I>&nbsp;Daemon在需要時調用。例如char的die()。這樣的好處是節省空間，同時對效率&nbsp;</I><BR>
︰<I>&nbsp;影響不大。因為daemon只載入一份，而不是像物品那樣不斷地clone。&nbsp;</I><BR>
&nbsp;<BR>
減少重複代碼方法有二：inh,&nbsp;daemons&nbsp;<BR>
daemons&nbsp;方便更新，&nbsp;<BR>
在&nbsp;daemons&nbsp;中存放變量，而非常量會快一些。&nbsp;<BR>
而在&nbsp;inh&nbsp;中存放變量，存盤浪費，load&nbsp;更浪費一人一份。&nbsp;<BR>
所以當有變量時，放於&nbsp;daemons&nbsp;又省時間又省空間。&nbsp;<BR>
其它兩都同。此兩點是兩者最大區別。&nbsp;<BR>
&nbsp;<BR>
︰<I>&nbsp;另一種情況是需要將某種信息集中起來管理。例如處理MultiLogin，我們需要知&nbsp;</I><BR>
︰<I>&nbsp;道每個用戶從哪裡登錄的，這樣就需要把所有在線用戶的IP統一存在一個數組裡，&nbsp;</I><BR>
︰<I>&nbsp;而不是分散在每個人身上。那麼圍繞這個數據，我們就應該建立一個Daemon，然&nbsp;</I><BR>
︰<I>&nbsp;後提供相應的接口，比如RegUser()––用戶登錄時調用，將用戶IP列入數組；&nbsp;</I><BR>
︰<I>&nbsp;RemoveUser()––用戶斷線或退出時調用，將該用戶IP從數組中刪除。另外配套&nbsp;</I><BR>
︰<I>&nbsp;的判斷該IP是否已經有人了的函數啦，等等等等，封裝成一個Multilogin.c，然&nbsp;</I><BR>
︰<I>&nbsp;後在適當的地方加入對這些函數的調用，例如&nbsp;</I><BR>
︰<I>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;/system/daemon/Multilogin&quot;-&gt;RegUser(……);&nbsp;</I><BR>
︰<I>&nbsp;就算搞定一個Daemon了。&nbsp;</I><BR>
︰<I>&nbsp;總之，Daemon的優點在於只有一個，缺點也在於只有一個。妙用存乎一心，你自&nbsp;</I><BR>
︰<I>&nbsp;己玩吧。&nbsp;</I><BR>
&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
發信人:&nbsp;MicroLiang&nbsp;(Micro&nbsp;Liang),&nbsp;信區:&nbsp;Mud_Builder&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>
&nbsp;<BR>
【&nbsp;在&nbsp;peacock&nbsp;(孔雀~~惶惑)&nbsp;的大作中提到:&nbsp;】&nbsp;<BR>
︰<I>&nbsp;其實combatd不是一個好例子，因為這種每秒調用一次的函數&nbsp;</I><BR>
︰<I>&nbsp;變成了遠程調用，實在是很耗資源。如果內存夠的話還是放回&nbsp;</I><BR>
︰<I>&nbsp;char.c裡比較好。&nbsp;</I><BR>
&nbsp;<BR>
combatd&nbsp;做得好，放回就知死。&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
發信人:&nbsp;MicroLiang&nbsp;(Micro&nbsp;Liang),&nbsp;信區:&nbsp;Mud_Builder&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>
&nbsp;<BR>
【&nbsp;在&nbsp;akuma&nbsp;(很不溫柔&nbsp;&nbsp;真的我)&nbsp;的大作中提到:&nbsp;】&nbsp;<BR>
︰<I>&nbsp;我到是認為，目前得情況來看&nbsp;代碼和內存得浪費不是非常重要得問題&nbsp;</I><BR>
&nbsp;<BR>
能省就省，，細水長流。寫程序就得像寫一首詩一樣，細細改到最好。&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
發信人:&nbsp;nerd&nbsp;(總以為自己已經長大),&nbsp;信區:&nbsp;Mud_Builder&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>
&nbsp;<BR>
【&nbsp;在&nbsp;olives&nbsp;(風)&nbsp;的大作中提到:&nbsp;】&nbsp;<BR>
︰<I>&nbsp;我不認為如此哦，&nbsp;</I><BR>
︰<I>&nbsp;我個人認為這些個大量重複調用，而且重複率很高的代碼&nbsp;</I><BR>
︰<I>&nbsp;還是放在一個daemon裡面比較好，如果放在char.c的人&nbsp;</I><BR>
︰<I>&nbsp;的body裡面，這樣即使用不著這些函數調用的人都要被迫&nbsp;</I><BR>
︰<I>&nbsp;調用，放在daemon裡面的話，只有需要調用的時候再調用&nbsp;</I><BR>
︰<I>&nbsp;如果放在body裡面的話，造成代碼和內存，以及運算的浪費&nbsp;</I><BR>
放在daemon內才有運算的浪費.&nbsp;<BR>
放在body裡,&nbsp;使用適當的繼承關係..可以很好的..:P&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
發信人:&nbsp;yeung&nbsp;(流星雨),&nbsp;信區:&nbsp;Mud_Builder&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>
&nbsp;<BR>
【&nbsp;在&nbsp;nerd&nbsp;(總以為自己已經長大)&nbsp;的大作中提到:&nbsp;】&nbsp;<BR>
︰<I>&nbsp;放在daemon內才有運算的浪費.&nbsp;</I><BR>
︰<I>&nbsp;放在body裡,&nbsp;使用適當的繼承關係..可以很好的..:P&nbsp;</I><BR>
&nbsp;<BR>
放body裡面，空間的浪費是一定的。放daemon裡面，多數情況下&nbsp;<BR>
會比放body慢一些，這就是時間和空間不能兩全吧。&nbsp;<BR>
&nbsp;<BR>
看你機器情況了。&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
發信人:&nbsp;ghosts&nbsp;(U-2◆水手13),&nbsp;信區:&nbsp;Mud_Builder&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>
&nbsp;<BR>
【&nbsp;在&nbsp;MicroLiang&nbsp;(Micro&nbsp;Liang)&nbsp;的大作中提到:&nbsp;】&nbsp;<BR>
︰<I>&nbsp;能省就省，，細水長流。寫程序就得像寫一首詩一樣，細細改到最好。&nbsp;</I><BR>
&nbsp;<BR>
那就得從mudos改起,mudos決定了lpmud就是個羅嗦低效的東西&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
發信人:&nbsp;yeung&nbsp;(流星雨),&nbsp;信區:&nbsp;Mud_Builder&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>
&nbsp;<BR>
【&nbsp;在&nbsp;ghosts&nbsp;(U-2◆水手13)&nbsp;的大作中提到:&nbsp;】&nbsp;<BR>
︰<I>&nbsp;那就得從mudos改起,mudos決定了lpmud就是個羅嗦低效的東西&nbsp;</I><BR>
&nbsp;<BR>
但是很方便.&nbsp;:)&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
發信人:&nbsp;akuma&nbsp;(很不溫柔&nbsp;&nbsp;真的我),&nbsp;信區:&nbsp;Mud_Builder&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>
&nbsp;<BR>
說的好啊，經常方便的副作用就是有諸多限制。。&nbsp;<BR>
&nbsp;<BR>
【&nbsp;在&nbsp;yeung&nbsp;(流星雨)&nbsp;的大作中提到:&nbsp;】&nbsp;<BR>
︰<I>&nbsp;但是很方便.&nbsp;:)&nbsp;</I><BR>
&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
發信人:&nbsp;MicroLiang&nbsp;(Micro&nbsp;Liang),&nbsp;信區:&nbsp;Mud_Builder&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>
&nbsp;<BR>
【&nbsp;在&nbsp;ghosts&nbsp;(U-2◆水手13)&nbsp;的大作中提到:&nbsp;】&nbsp;<BR>
︰<I>&nbsp;那就得從mudos改起,mudos決定了lpmud就是個羅嗦低效的東西&nbsp;</I><BR>
&nbsp;<BR>
說得好。不過我目前還沒本事和精力改那個&nbsp;os&nbsp;。呵呵。&nbsp;<BR>
到你改出來公佈給我們用就好！加油。&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
發信人:&nbsp;ghosts&nbsp;(U-2◆水手13),&nbsp;信區:&nbsp;Mud_Builder&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>
&nbsp;<BR>
【&nbsp;在&nbsp;MicroLiang&nbsp;(Micro&nbsp;Liang)&nbsp;的大作中提到:&nbsp;】&nbsp;<BR>
︰<I>&nbsp;說得好。不過我目前還沒本事和精力改那個&nbsp;os&nbsp;。呵呵。&nbsp;</I><BR>
︰<I>&nbsp;到你改出來公佈給我們用就好！加油。&nbsp;</I><BR>
&nbsp;<BR>
我也不成呀:(&nbsp;<BR>
等原作者出來改吧&nbsp;<BR>
我改恐怕是越來越低效:(&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
<A HREF="00000025.htm">上一篇</A>
<A HREF='javascript:history.go(-1)'>返回上一頁</A>
<A HREF="index.htm">回到目錄</A>
<A HREF="#top">回到頁首</A>
<A HREF="00000027.htm">下一篇</A>
</H1></CENTER>
<CENTER><H1>BBS水木清華站︰精華區</H1></CENTER>
</BODY></HTML>