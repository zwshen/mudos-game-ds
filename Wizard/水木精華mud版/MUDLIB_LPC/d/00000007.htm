<HTML>
<HEAD>
<TITLE>BBS水木清華站︰精華區</TITLE>
</HEAD>
<BODY>
<CENTER><H1>BBS水木清華站︰精華區</H1></CENTER>
<A Name="top"></a>
發信人:&nbsp;Ranma&nbsp;(亂馬~~~~~~~無聊中),&nbsp;信區:&nbsp;Mud_Builder&nbsp;<BR>
標&nbsp;&nbsp;題:&nbsp;Lpc&nbsp;basics&nbsp;(6)--Variable&nbsp;Handling&nbsp;<BR>
發信站:&nbsp;BBS&nbsp;水木清華站&nbsp;(Mon&nbsp;Oct&nbsp;20&nbsp;09:07:10&nbsp;1997)&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LPC&nbsp;Basics&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Written&nbsp;by&nbsp;Descartes&nbsp;of&nbsp;Borg&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;first&nbsp;edition:&nbsp;23&nbsp;april&nbsp;1993&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;second&nbsp;edition:&nbsp;july&nbsp;5&nbsp;1993&nbsp;<BR>
&nbsp;<BR>
CHAPTER&nbsp;6:&nbsp;Variable&nbsp;Handling&nbsp;<BR>
&nbsp;<BR>
6.1&nbsp;Review&nbsp;<BR>
By&nbsp;now&nbsp;you&nbsp;should&nbsp;be&nbsp;able&nbsp;to&nbsp;code&nbsp;some&nbsp;simple&nbsp;objects&nbsp;using&nbsp;your&nbsp;muds&nbsp;standard&nbsp;<BR>
object&nbsp;library.&nbsp;&nbsp;Inheritance&nbsp;allows&nbsp;you&nbsp;to&nbsp;use&nbsp;functions&nbsp;defined&nbsp;in&nbsp;those&nbsp;<BR>
objects&nbsp;without&nbsp;having&nbsp;to&nbsp;go&nbsp;and&nbsp;define&nbsp;yourself.&nbsp;&nbsp;In&nbsp;addition,&nbsp;<BR>
you&nbsp;should&nbsp;know&nbsp;how&nbsp;to&nbsp;declare&nbsp;your&nbsp;own&nbsp;functions.&nbsp;&nbsp;This&nbsp;<BR>
chapter&nbsp;will&nbsp;teach&nbsp;you&nbsp;about&nbsp;the&nbsp;basic&nbsp;elements&nbsp;of&nbsp;LPC&nbsp;which&nbsp;will&nbsp;allow&nbsp;you&nbsp;to&nbsp;<BR>
define&nbsp;your&nbsp;own&nbsp;functions&nbsp;using&nbsp;the&nbsp;manipulation&nbsp;of&nbsp;variables.&nbsp;<BR>
&nbsp;<BR>
6.2&nbsp;Values&nbsp;and&nbsp;objects&nbsp;<BR>
Basically,&nbsp;what&nbsp;makes&nbsp;objects&nbsp;on&nbsp;the&nbsp;mud&nbsp;different&nbsp;are&nbsp;two&nbsp;things:&nbsp;<BR>
1)&nbsp;Some&nbsp;have&nbsp;different&nbsp;functions&nbsp;<BR>
2)&nbsp;All&nbsp;have&nbsp;different&nbsp;values&nbsp;<BR>
&nbsp;<BR>
Now,&nbsp;all&nbsp;player&nbsp;objects&nbsp;have&nbsp;the&nbsp;same&nbsp;functions.&nbsp;&nbsp;They&nbsp;are&nbsp;therefore&nbsp;<BR>
differentiated&nbsp;by&nbsp;the&nbsp;values&nbsp;they&nbsp;hold.&nbsp;&nbsp;For&nbsp;instance,&nbsp;the&nbsp;player&nbsp;<BR>
named&nbsp;&quot;Forlock&quot;&nbsp;is&nbsp;different&nbsp;from&nbsp;&quot;Descartes&quot;&nbsp;*at&nbsp;least*&nbsp;in&nbsp;that&nbsp;they&nbsp;<BR>
have&nbsp;different&nbsp;values&nbsp;for&nbsp;the&nbsp;variable&nbsp;true_name,&nbsp;those&nbsp;being&nbsp;<BR>
&quot;descartes&quot;&nbsp;and&nbsp;&quot;forlock&quot;.&nbsp;<BR>
&nbsp;<BR>
Therefore,&nbsp;changes&nbsp;in&nbsp;the&nbsp;game&nbsp;involve&nbsp;changes&nbsp;in&nbsp;the&nbsp;values&nbsp;of&nbsp;the&nbsp;objects&nbsp;<BR>
in&nbsp;the&nbsp;game.&nbsp;&nbsp;Functions&nbsp;are&nbsp;used&nbsp;to&nbsp;name&nbsp;specific&nbsp;process&nbsp;for&nbsp;manipulating&nbsp;<BR>
values.&nbsp;&nbsp;For&nbsp;instance,&nbsp;the&nbsp;create()&nbsp;function&nbsp;is&nbsp;the&nbsp;function&nbsp;whose&nbsp;<BR>
process&nbsp;is&nbsp;specifically&nbsp;to&nbsp;initialize&nbsp;the&nbsp;values&nbsp;of&nbsp;an&nbsp;object.&nbsp;<BR>
Within&nbsp;a&nbsp;function,&nbsp;it&nbsp;is&nbsp;specifically&nbsp;things&nbsp;called&nbsp;instructions&nbsp;which&nbsp;are&nbsp;<BR>
responsible&nbsp;for&nbsp;the&nbsp;direct&nbsp;manipulation&nbsp;of&nbsp;variables.&nbsp;<BR>
&nbsp;<BR>
6.3&nbsp;Local&nbsp;and&nbsp;global&nbsp;variables&nbsp;<BR>
Like&nbsp;variables&nbsp;in&nbsp;most&nbsp;programming&nbsp;language,&nbsp;LPC&nbsp;variables&nbsp;may&nbsp;be&nbsp;declared&nbsp;<BR>
as&nbsp;variables&nbsp;&quot;local&quot;&nbsp;to&nbsp;a&nbsp;specific&nbsp;function,&nbsp;or&nbsp;&quot;globally&quot;&nbsp;available&nbsp;<BR>
to&nbsp;all&nbsp;functions.&nbsp;&nbsp;Local&nbsp;variables&nbsp;are&nbsp;declared&nbsp;inside&nbsp;the&nbsp;function&nbsp;which&nbsp;<BR>
will&nbsp;use&nbsp;them.&nbsp;&nbsp;No&nbsp;other&nbsp;function&nbsp;knows&nbsp;about&nbsp;their&nbsp;existence,&nbsp;since&nbsp;<BR>
the&nbsp;values&nbsp;are&nbsp;only&nbsp;stored&nbsp;in&nbsp;memory&nbsp;while&nbsp;that&nbsp;function&nbsp;is&nbsp;being&nbsp;executed.&nbsp;<BR>
A&nbsp;global&nbsp;variable&nbsp;is&nbsp;available&nbsp;to&nbsp;any&nbsp;function&nbsp;which&nbsp;comes&nbsp;after&nbsp;its&nbsp;<BR>
declaration&nbsp;in&nbsp;the&nbsp;object&nbsp;code.&nbsp;&nbsp;Since&nbsp;global&nbsp;variables&nbsp;take&nbsp;up&nbsp;RAM&nbsp;for&nbsp;<BR>
the&nbsp;entire&nbsp;existence&nbsp;of&nbsp;the&nbsp;object,&nbsp;you&nbsp;should&nbsp;use&nbsp;them&nbsp;only&nbsp;when&nbsp;<BR>
you&nbsp;need&nbsp;a&nbsp;value&nbsp;stored&nbsp;for&nbsp;the&nbsp;entire&nbsp;existence&nbsp;of&nbsp;the&nbsp;object.&nbsp;<BR>
Have&nbsp;a&nbsp;look&nbsp;at&nbsp;the&nbsp;following&nbsp;2&nbsp;bits&nbsp;of&nbsp;code:&nbsp;<BR>
&nbsp;<BR>
-----&nbsp;<BR>
int&nbsp;x;&nbsp;<BR>
&nbsp;<BR>
int&nbsp;query_x()&nbsp;{&nbsp;return&nbsp;x;&nbsp;}&nbsp;<BR>
&nbsp;<BR>
void&nbsp;set_x(int&nbsp;y)&nbsp;{&nbsp;x&nbsp;=&nbsp;y;&nbsp;}&nbsp;<BR>
-----&nbsp;<BR>
&nbsp;<BR>
-----&nbsp;<BR>
void&nbsp;set_x(int&nbsp;y)&nbsp;{&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;x;&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;=&nbsp;y;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;write(&quot;x&nbsp;is&nbsp;set&nbsp;to&nbsp;x&quot;+x+&quot;&nbsp;and&nbsp;will&nbsp;now&nbsp;be&nbsp;forgotten.\n&quot;);&nbsp;<BR>
}&nbsp;<BR>
-----&nbsp;<BR>
&nbsp;<BR>
In&nbsp;the&nbsp;first&nbsp;example,&nbsp;x&nbsp;is&nbsp;declared&nbsp;outside&nbsp;of&nbsp;any&nbsp;functions,&nbsp;and&nbsp;therefore&nbsp;<BR>
will&nbsp;be&nbsp;available&nbsp;to&nbsp;any&nbsp;function&nbsp;declared&nbsp;after&nbsp;it.&nbsp;&nbsp;In&nbsp;that&nbsp;example,&nbsp;<BR>
x&nbsp;is&nbsp;a&nbsp;global&nbsp;variable.&nbsp;<BR>
In&nbsp;the&nbsp;second&nbsp;example,&nbsp;x&nbsp;is&nbsp;declared&nbsp;inside&nbsp;the&nbsp;function&nbsp;set_x().&nbsp;&nbsp;It&nbsp;<BR>
only&nbsp;exists&nbsp;while&nbsp;the&nbsp;function&nbsp;set_x()&nbsp;is&nbsp;being&nbsp;executed.&nbsp;&nbsp;Afterwards,&nbsp;<BR>
it&nbsp;ceases&nbsp;to&nbsp;exist.&nbsp;&nbsp;In&nbsp;that&nbsp;example,&nbsp;x&nbsp;is&nbsp;a&nbsp;local&nbsp;variable.&nbsp;<BR>
&nbsp;<BR>
6.4&nbsp;Manipulating&nbsp;the&nbsp;values&nbsp;of&nbsp;variables&nbsp;<BR>
Instructions&nbsp;to&nbsp;the&nbsp;driver&nbsp;are&nbsp;used&nbsp;to&nbsp;manipulate&nbsp;the&nbsp;values&nbsp;of&nbsp;variables.&nbsp;<BR>
An&nbsp;example&nbsp;of&nbsp;an&nbsp;instruction&nbsp;would&nbsp;be:&nbsp;<BR>
&nbsp;<BR>
-----&nbsp;<BR>
x&nbsp;=&nbsp;5;&nbsp;<BR>
-----&nbsp;<BR>
&nbsp;<BR>
The&nbsp;above&nbsp;instruction&nbsp;is&nbsp;self-explanatory.&nbsp;&nbsp;It&nbsp;assigns&nbsp;to&nbsp;the&nbsp;variable&nbsp;<BR>
x&nbsp;the&nbsp;value&nbsp;5.&nbsp;&nbsp;However,&nbsp;there&nbsp;are&nbsp;some&nbsp;important&nbsp;concepts&nbsp;in&nbsp;involved&nbsp;<BR>
in&nbsp;that&nbsp;instruction&nbsp;which&nbsp;are&nbsp;involved&nbsp;in&nbsp;instructions&nbsp;in&nbsp;general.&nbsp;<BR>
The&nbsp;first&nbsp;involves&nbsp;the&nbsp;concept&nbsp;of&nbsp;an&nbsp;expression.&nbsp;&nbsp;An&nbsp;expression&nbsp;is&nbsp;<BR>
any&nbsp;series&nbsp;of&nbsp;symbols&nbsp;which&nbsp;have&nbsp;a&nbsp;value.&nbsp;&nbsp;In&nbsp;the&nbsp;above&nbsp;instruction,&nbsp;<BR>
the&nbsp;variable&nbsp;x&nbsp;is&nbsp;assigned&nbsp;the&nbsp;value&nbsp;of&nbsp;the&nbsp;expression&nbsp;5.&nbsp;&nbsp;Constant&nbsp;<BR>
values&nbsp;are&nbsp;the&nbsp;simplest&nbsp;forms&nbsp;in&nbsp;which&nbsp;expressions&nbsp;can&nbsp;be&nbsp;put.&nbsp;&nbsp;A&nbsp;constant&nbsp;<BR>
is&nbsp;a&nbsp;value&nbsp;that&nbsp;never&nbsp;changes&nbsp;like&nbsp;the&nbsp;int&nbsp;5&nbsp;or&nbsp;the&nbsp;string&nbsp;&quot;hello&quot;.&nbsp;<BR>
The&nbsp;last&nbsp;concept&nbsp;is&nbsp;the&nbsp;concept&nbsp;of&nbsp;an&nbsp;operator.&nbsp;&nbsp;In&nbsp;the&nbsp;above&nbsp;example,&nbsp;<BR>
the&nbsp;assignment&nbsp;operator&nbsp;=&nbsp;is&nbsp;used.&nbsp;<BR>
&nbsp;<BR>
There&nbsp;are&nbsp;however&nbsp;many&nbsp;more&nbsp;operators&nbsp;in&nbsp;LPC,&nbsp;and&nbsp;expressions&nbsp;can&nbsp;get&nbsp;<BR>
quite&nbsp;complex.&nbsp;&nbsp;If&nbsp;we&nbsp;go&nbsp;up&nbsp;one&nbsp;level&nbsp;of&nbsp;complexity,&nbsp;we&nbsp;get:&nbsp;<BR>
&nbsp;<BR>
-----&nbsp;<BR>
y&nbsp;=&nbsp;5;&nbsp;<BR>
x&nbsp;=&nbsp;y&nbsp;+2;&nbsp;<BR>
-----&nbsp;<BR>
&nbsp;<BR>
The&nbsp;first&nbsp;instruction&nbsp;uses&nbsp;the&nbsp;assignment&nbsp;operator&nbsp;to&nbsp;assign&nbsp;the&nbsp;value&nbsp;<BR>
of&nbsp;the&nbsp;constant&nbsp;expression&nbsp;5&nbsp;to&nbsp;the&nbsp;variable&nbsp;y.&nbsp;&nbsp;The&nbsp;second&nbsp;one&nbsp;<BR>
uses&nbsp;the&nbsp;assignment&nbsp;operator&nbsp;to&nbsp;assign&nbsp;to&nbsp;x&nbsp;the&nbsp;value&nbsp;of&nbsp;the&nbsp;expression&nbsp;<BR>
(y+2)&nbsp;which&nbsp;uses&nbsp;the&nbsp;addition&nbsp;operator&nbsp;to&nbsp;come&nbsp;up&nbsp;with&nbsp;a&nbsp;value&nbsp;which&nbsp;<BR>
is&nbsp;the&nbsp;sum&nbsp;of&nbsp;the&nbsp;value&nbsp;of&nbsp;y&nbsp;and&nbsp;the&nbsp;value&nbsp;of&nbsp;the&nbsp;constant&nbsp;expression&nbsp;2.&nbsp;<BR>
Sound&nbsp;like&nbsp;a&nbsp;lot&nbsp;of&nbsp;hot&nbsp;air?&nbsp;<BR>
&nbsp;<BR>
In&nbsp;another&nbsp;manner&nbsp;of&nbsp;speaking,&nbsp;operators&nbsp;can&nbsp;be&nbsp;used&nbsp;to&nbsp;form&nbsp;complex&nbsp;<BR>
expressions.&nbsp;&nbsp;In&nbsp;the&nbsp;above&nbsp;example,&nbsp;there&nbsp;are&nbsp;two&nbsp;expressions&nbsp;in&nbsp;the&nbsp;<BR>
one&nbsp;instruction&nbsp;x&nbsp;=&nbsp;y&nbsp;+&nbsp;2;:&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;1)&nbsp;the&nbsp;expression&nbsp;y+2&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;2)&nbsp;the&nbsp;expression&nbsp;x&nbsp;=&nbsp;y&nbsp;+&nbsp;2&nbsp;<BR>
As&nbsp;stated&nbsp;before,&nbsp;all&nbsp;expressions&nbsp;have&nbsp;a&nbsp;value.&nbsp;&nbsp;The&nbsp;expression&nbsp;<BR>
y+2&nbsp;has&nbsp;the&nbsp;value&nbsp;of&nbsp;the&nbsp;sum&nbsp;of&nbsp;y&nbsp;and&nbsp;2&nbsp;(here,&nbsp;7);&nbsp;<BR>
The&nbsp;expression&nbsp;x&nbsp;=&nbsp;y&nbsp;+&nbsp;2&nbsp;*also*&nbsp;has&nbsp;the&nbsp;value&nbsp;of&nbsp;7.&nbsp;<BR>
So&nbsp;operators&nbsp;have&nbsp;to&nbsp;important&nbsp;tasks:&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;1)&nbsp;They&nbsp;*may*&nbsp;act&nbsp;upon&nbsp;input&nbsp;like&nbsp;a&nbsp;function&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;2)&nbsp;They&nbsp;evaluate&nbsp;as&nbsp;having&nbsp;a&nbsp;value&nbsp;themselves.&nbsp;<BR>
Now,&nbsp;not&nbsp;all&nbsp;operators&nbsp;do&nbsp;what&nbsp;1&nbsp;does.&nbsp;&nbsp;The&nbsp;=&nbsp;operators&nbsp;does&nbsp;act&nbsp;upon&nbsp;<BR>
the&nbsp;value&nbsp;of&nbsp;7&nbsp;on&nbsp;its&nbsp;right&nbsp;by&nbsp;assigning&nbsp;that&nbsp;value&nbsp;to&nbsp;x.&nbsp;&nbsp;The&nbsp;operator&nbsp;<BR>
+&nbsp;however&nbsp;does&nbsp;nothing.&nbsp;&nbsp;They&nbsp;both,&nbsp;however,&nbsp;have&nbsp;their&nbsp;own&nbsp;values.&nbsp;<BR>
&nbsp;<BR>
6.5&nbsp;Complex&nbsp;expressions&nbsp;<BR>
As&nbsp;you&nbsp;may&nbsp;have&nbsp;noticed&nbsp;above,&nbsp;the&nbsp;expression&nbsp;x&nbsp;=&nbsp;5&nbsp;*itself*&nbsp;has&nbsp;a&nbsp;value&nbsp;<BR>
of&nbsp;5.&nbsp;&nbsp;In&nbsp;fact,&nbsp;since&nbsp;LPC&nbsp;operators&nbsp;themselves&nbsp;have&nbsp;value&nbsp;as&nbsp;expressions,&nbsp;<BR>
they&nbsp;cal&nbsp;allow&nbsp;you&nbsp;to&nbsp;write&nbsp;some&nbsp;really&nbsp;convoluted&nbsp;looking&nbsp;nonsense&nbsp;like:&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;i&nbsp;=&nbsp;(&nbsp;(x=sizeof(tmp=users()))&nbsp;?&nbsp;--x&nbsp;:&nbsp;sizeof(tmp=children(&quot;/std/monster&quot;))-1)&nbsp;<BR>
which&nbsp;says&nbsp;basically:&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;assing&nbsp;to&nbsp;tmp&nbsp;the&nbsp;array&nbsp;returned&nbsp;by&nbsp;the&nbsp;efun&nbsp;users(),&nbsp;then&nbsp;assign&nbsp;to&nbsp;x&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;value&nbsp;equal&nbsp;to&nbsp;the&nbsp;number&nbsp;of&nbsp;elements&nbsp;to&nbsp;that&nbsp;array.&nbsp;&nbsp;If&nbsp;the&nbsp;value&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;of&nbsp;the&nbsp;expression&nbsp;assigning&nbsp;the&nbsp;value&nbsp;to&nbsp;x&nbsp;is&nbsp;true&nbsp;(not&nbsp;0),&nbsp;then&nbsp;assign&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;by&nbsp;1&nbsp;and&nbsp;assign&nbsp;the&nbsp;value&nbsp;of&nbsp;x-1&nbsp;to&nbsp;i.&nbsp;&nbsp;If&nbsp;x&nbsp;is&nbsp;false&nbsp;though,&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;then&nbsp;set&nbsp;tmp&nbsp;to&nbsp;the&nbsp;array&nbsp;returned&nbsp;by&nbsp;the&nbsp;efun&nbsp;children(),&nbsp;and&nbsp;then&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;assign&nbsp;to&nbsp;i&nbsp;the&nbsp;value&nbsp;of&nbsp;the&nbsp;number&nbsp;of&nbsp;members&nbsp;in&nbsp;the&nbsp;array&nbsp;tmp&nbsp;-1.&nbsp;<BR>
Would&nbsp;you&nbsp;ever&nbsp;use&nbsp;the&nbsp;above&nbsp;statement?&nbsp;I&nbsp;doubt&nbsp;it.&nbsp;&nbsp;However&nbsp;you&nbsp;might&nbsp;<BR>
see&nbsp;or&nbsp;use&nbsp;expressions&nbsp;similar&nbsp;to&nbsp;it,&nbsp;since&nbsp;the&nbsp;ability&nbsp;to&nbsp;consolidate&nbsp;<BR>
so&nbsp;much&nbsp;information&nbsp;into&nbsp;one&nbsp;single&nbsp;line&nbsp;helps&nbsp;to&nbsp;speed&nbsp;up&nbsp;the&nbsp;execution&nbsp;of&nbsp;<BR>
your&nbsp;code.&nbsp;&nbsp;A&nbsp;more&nbsp;often&nbsp;used&nbsp;version&nbsp;of&nbsp;this&nbsp;property&nbsp;of&nbsp;LPC&nbsp;operators&nbsp;<BR>
would&nbsp;be&nbsp;something&nbsp;like:&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;=&nbsp;sizeof(tmp&nbsp;=&nbsp;users());&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;while(i--)&nbsp;write((string)tmp[i]-&gt;query_name()+&quot;\n&quot;);&nbsp;<BR>
instead&nbsp;of&nbsp;writing&nbsp;something&nbsp;like:&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;tmp&nbsp;=&nbsp;users();&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;=&nbsp;sizeof(tmp);&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;for(i=0;&nbsp;i&lt;x;&nbsp;i++)&nbsp;write((string)tmp[i]-&gt;query_name()+&quot;\n&quot;);&nbsp;<BR>
Things&nbsp;like&nbsp;for(),&nbsp;while(),&nbsp;arrays&nbsp;and&nbsp;such&nbsp;will&nbsp;be&nbsp;explained&nbsp;later.&nbsp;<BR>
But&nbsp;the&nbsp;first&nbsp;bit&nbsp;of&nbsp;code&nbsp;is&nbsp;more&nbsp;concise&nbsp;and&nbsp;it&nbsp;executed&nbsp;faster.&nbsp;<BR>
&nbsp;<BR>
NOTE:&nbsp;A&nbsp;detailed&nbsp;description&nbsp;of&nbsp;all&nbsp;basic&nbsp;LPC&nbsp;operators&nbsp;follows&nbsp;the&nbsp;chapter&nbsp;<BR>
summary.&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
6.6&nbsp;Chapter&nbsp;Summary&nbsp;<BR>
You&nbsp;now&nbsp;know&nbsp;how&nbsp;to&nbsp;declare&nbsp;variables&nbsp;and&nbsp;understand&nbsp;the&nbsp;difference&nbsp;between&nbsp;<BR>
declaring&nbsp;and&nbsp;using&nbsp;them&nbsp;globally&nbsp;or&nbsp;locally.&nbsp;&nbsp;Once&nbsp;you&nbsp;become&nbsp;familiar&nbsp;<BR>
with&nbsp;your&nbsp;driver's&nbsp;efuns,&nbsp;you&nbsp;can&nbsp;display&nbsp;those&nbsp;values&nbsp;in&nbsp;many&nbsp;different&nbsp;<BR>
ways.&nbsp;&nbsp;In&nbsp;addition,&nbsp;through&nbsp;the&nbsp;LPC&nbsp;operators,&nbsp;you&nbsp;know&nbsp;how&nbsp;to&nbsp;change&nbsp;<BR>
and&nbsp;evaluate&nbsp;the&nbsp;values&nbsp;contained&nbsp;in&nbsp;variables.&nbsp;&nbsp;This&nbsp;is&nbsp;useful&nbsp;of&nbsp;course&nbsp;<BR>
in&nbsp;that&nbsp;it&nbsp;allows&nbsp;you&nbsp;to&nbsp;do&nbsp;something&nbsp;like&nbsp;count&nbsp;how&nbsp;many&nbsp;apples&nbsp;have&nbsp;<BR>
been&nbsp;picked&nbsp;from&nbsp;a&nbsp;tree,&nbsp;so&nbsp;that&nbsp;once&nbsp;all&nbsp;apples&nbsp;have&nbsp;been&nbsp;picked,&nbsp;no&nbsp;<BR>
players&nbsp;can&nbsp;pick&nbsp;more.&nbsp;&nbsp;Unfortunately,&nbsp;you&nbsp;do&nbsp;not&nbsp;know&nbsp;how&nbsp;to&nbsp;have&nbsp;<BR>
code&nbsp;executed&nbsp;in&nbsp;anything&nbsp;other&nbsp;than&nbsp;a&nbsp;linera&nbsp;fashion.&nbsp;&nbsp;In&nbsp;other&nbsp;words,&nbsp;<BR>
hold&nbsp;off&nbsp;on&nbsp;that&nbsp;apple&nbsp;until&nbsp;the&nbsp;next&nbsp;chapter,&nbsp;cause&nbsp;you&nbsp;do&nbsp;not&nbsp;know&nbsp;<BR>
how&nbsp;to&nbsp;check&nbsp;if&nbsp;the&nbsp;apples&nbsp;picked&nbsp;is&nbsp;equal&nbsp;to&nbsp;the&nbsp;number&nbsp;of&nbsp;apples&nbsp;in&nbsp;the&nbsp;<BR>
tree.&nbsp;&nbsp;You&nbsp;also&nbsp;do&nbsp;not&nbsp;know&nbsp;about&nbsp;the&nbsp;special&nbsp;function&nbsp;init()&nbsp;where&nbsp;you&nbsp;<BR>
give&nbsp;new&nbsp;commands&nbsp;to&nbsp;players.&nbsp;&nbsp;But&nbsp;you&nbsp;are&nbsp;almost&nbsp;ready&nbsp;to&nbsp;code&nbsp;a&nbsp;nice,&nbsp;<BR>
fairly&nbsp;complex&nbsp;area.&nbsp;<BR>
&nbsp;<BR>
6.7&nbsp;LPC&nbsp;operators&nbsp;<BR>
This&nbsp;section&nbsp;contains&nbsp;a&nbsp;detailed&nbsp;listing&nbsp;of&nbsp;the&nbsp;simpler&nbsp;LPC&nbsp;operators,&nbsp;<BR>
including&nbsp;what&nbsp;they&nbsp;do&nbsp;to&nbsp;the&nbsp;values&nbsp;they&nbsp;use&nbsp;(if&nbsp;anything)&nbsp;and&nbsp;the&nbsp;value&nbsp;<BR>
that&nbsp;they&nbsp;have.&nbsp;<BR>
&nbsp;<BR>
The&nbsp;operators&nbsp;described&nbsp;here&nbsp;are:&nbsp;<BR>
=&nbsp;&nbsp;&nbsp;&nbsp;+&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;&nbsp;%&nbsp;&nbsp;&nbsp;&nbsp;+=&nbsp;&nbsp;&nbsp;&nbsp;-=&nbsp;&nbsp;&nbsp;&nbsp;*=&nbsp;&nbsp;&nbsp;&nbsp;/=&nbsp;&nbsp;&nbsp;&nbsp;%=&nbsp;<BR>
--&nbsp;&nbsp;&nbsp;&nbsp;++&nbsp;&nbsp;&nbsp;&nbsp;==&nbsp;&nbsp;&nbsp;&nbsp;!=&nbsp;&nbsp;&nbsp;&nbsp;&gt;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&nbsp;&nbsp;&nbsp;&nbsp;&gt;=&nbsp;&nbsp;&nbsp;&nbsp;&lt;=&nbsp;&nbsp;&nbsp;&nbsp;!&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp;&nbsp;&nbsp;&nbsp;&nbsp;||&nbsp;<BR>
-&gt;&nbsp;&nbsp;&nbsp;&nbsp;?&nbsp;:&nbsp;<BR>
&nbsp;<BR>
Those&nbsp;operators&nbsp;are&nbsp;all&nbsp;described&nbsp;in&nbsp;a&nbsp;rather&nbsp;dry&nbsp;manner&nbsp;below,&nbsp;but&nbsp;it&nbsp;is&nbsp;best&nbsp;<BR>
to&nbsp;at&nbsp;least&nbsp;look&nbsp;at&nbsp;each&nbsp;one,&nbsp;since&nbsp;some&nbsp;may&nbsp;not&nbsp;behave&nbsp;*exactly*&nbsp;as&nbsp;<BR>
you&nbsp;think.&nbsp;&nbsp;But&nbsp;it&nbsp;should&nbsp;make&nbsp;a&nbsp;rather&nbsp;good&nbsp;reference&nbsp;guide.&nbsp;<BR>
&nbsp;<BR>
=&nbsp;assignment&nbsp;operator:&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;example:&nbsp;x&nbsp;=&nbsp;5;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;value:&nbsp;the&nbsp;value&nbsp;of&nbsp;the&nbsp;variable&nbsp;on&nbsp;the&nbsp;*left*&nbsp;after&nbsp;its&nbsp;function&nbsp;is&nbsp;done&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;explanation:&nbsp;It&nbsp;takes&nbsp;the&nbsp;value&nbsp;of&nbsp;any&nbsp;expression&nbsp;on&nbsp;the&nbsp;*right*&nbsp;and&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assigns&nbsp;it&nbsp;to&nbsp;the&nbsp;variable&nbsp;on&nbsp;the&nbsp;*left*.&nbsp;&nbsp;Note&nbsp;that&nbsp;you&nbsp;must&nbsp;use&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;single&nbsp;variable&nbsp;on&nbsp;the&nbsp;left,&nbsp;as&nbsp;you&nbsp;cannot&nbsp;assign&nbsp;values&nbsp;to&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constants&nbsp;or&nbsp;complex&nbsp;expressions.&nbsp;<BR>
&nbsp;<BR>
+&nbsp;addition&nbsp;operator:&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;example:&nbsp;x&nbsp;+&nbsp;7&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;value:&nbsp;The&nbsp;sum&nbsp;of&nbsp;the&nbsp;value&nbsp;on&nbsp;the&nbsp;left&nbsp;and&nbsp;the&nbsp;value&nbsp;on&nbsp;the&nbsp;right&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;exaplanation:&nbsp;It&nbsp;takes&nbsp;the&nbsp;value&nbsp;of&nbsp;the&nbsp;expression&nbsp;on&nbsp;the&nbsp;right&nbsp;and&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;adds&nbsp;it&nbsp;to&nbsp;the&nbsp;value&nbsp;of&nbsp;the&nbsp;expression&nbsp;on&nbsp;the&nbsp;left.&nbsp;For&nbsp;values&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;of&nbsp;type&nbsp;int,&nbsp;this&nbsp;means&nbsp;the&nbsp;numerical&nbsp;sum.&nbsp;&nbsp;For&nbsp;strings,&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;it&nbsp;means&nbsp;that&nbsp;the&nbsp;value&nbsp;on&nbsp;the&nbsp;right&nbsp;is&nbsp;stuck&nbsp;onto&nbsp;the&nbsp;value&nbsp;on&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;left&nbsp;(&quot;ab&quot;&nbsp;is&nbsp;the&nbsp;value&nbsp;of&nbsp;&quot;a&quot;+&quot;b&quot;).&nbsp;&nbsp;This&nbsp;operator&nbsp;does&nbsp;not&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;modify&nbsp;any&nbsp;of&nbsp;the&nbsp;original&nbsp;values&nbsp;(i.e.&nbsp;the&nbsp;variable&nbsp;x&nbsp;from&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;above&nbsp;retains&nbsp;its&nbsp;old&nbsp;value).&nbsp;<BR>
&nbsp;<BR>
-&nbsp;subtraction&nbsp;operator:&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;example:&nbsp;x&nbsp;-&nbsp;7&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;value:&nbsp;the&nbsp;value&nbsp;of&nbsp;the&nbsp;expression&nbsp;on&nbsp;the&nbsp;left&nbsp;reduced&nbsp;by&nbsp;the&nbsp;right&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;explanation:&nbsp;&nbsp;Same&nbsp;characteristics&nbsp;as&nbsp;addition,&nbsp;except&nbsp;it&nbsp;subtracts.&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;With&nbsp;strings:&nbsp;&quot;a&quot;&nbsp;is&nbsp;the&nbsp;value&nbsp;of&nbsp;&quot;ab&quot;&nbsp;-&nbsp;&quot;b&quot;&nbsp;<BR>
&nbsp;<BR>
*&nbsp;multiplication&nbsp;operator:&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;example:&nbsp;x*7&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;value&nbsp;and&nbsp;explanation:&nbsp;same&nbsp;as&nbsp;with&nbsp;adding&nbsp;and&nbsp;subtracting&nbsp;except&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this&nbsp;one&nbsp;performs&nbsp;the&nbsp;math&nbsp;of&nbsp;multiplication&nbsp;<BR>
&nbsp;<BR>
/&nbsp;division&nbsp;operator:&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;example:&nbsp;x/7&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;value&nbsp;and&nbsp;explanation:&nbsp;see&nbsp;above&nbsp;<BR>
&nbsp;<BR>
+=&nbsp;additive&nbsp;assignment&nbsp;operator:&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;example:&nbsp;x&nbsp;+=&nbsp;5&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;value:&nbsp;the&nbsp;same&nbsp;as&nbsp;x&nbsp;+&nbsp;5&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;exaplanation:&nbsp;It&nbsp;takes&nbsp;the&nbsp;value&nbsp;of&nbsp;the&nbsp;variable&nbsp;on&nbsp;the&nbsp;left&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;and&nbsp;the&nbsp;value&nbsp;of&nbsp;the&nbsp;expression&nbsp;on&nbsp;the&nbsp;right,&nbsp;adds&nbsp;them&nbsp;together&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;and&nbsp;assigns&nbsp;the&nbsp;sum&nbsp;to&nbsp;the&nbsp;variable&nbsp;on&nbsp;the&nbsp;left.&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;example:&nbsp;if&nbsp;x&nbsp;=&nbsp;2...&nbsp;x&nbsp;+=&nbsp;5&nbsp;assigns&nbsp;the&nbsp;value&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;to&nbsp;the&nbsp;variable&nbsp;x.&nbsp;&nbsp;The&nbsp;whole&nbsp;expression&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;has&nbsp;the&nbsp;value&nbsp;of&nbsp;7.&nbsp;<BR>
&nbsp;<BR>
-=&nbsp;subtraction&nbsp;assignment&nbsp;operator&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;example:&nbsp;x-=7&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;value:&nbsp;the&nbsp;value&nbsp;of&nbsp;the&nbsp;left&nbsp;value&nbsp;reduced&nbsp;by&nbsp;the&nbsp;right&nbsp;value&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;examplanation:&nbsp;The&nbsp;same&nbsp;as&nbsp;+=&nbsp;except&nbsp;for&nbsp;subtraction.&nbsp;<BR>
&nbsp;<BR>
*=&nbsp;multiplicative&nbsp;assignment&nbsp;operator&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;example:&nbsp;x&nbsp;*=&nbsp;7&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;value:&nbsp;the&nbsp;value&nbsp;of&nbsp;the&nbsp;left&nbsp;value&nbsp;multiplied&nbsp;by&nbsp;the&nbsp;right&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;explanation:&nbsp;Similar&nbsp;to&nbsp;-=&nbsp;and&nbsp;+=&nbsp;except&nbsp;for&nbsp;addition.&nbsp;<BR>
&nbsp;<BR>
/=&nbsp;division&nbsp;assignment&nbsp;operator&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;example:&nbsp;x&nbsp;/=&nbsp;7&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;value:&nbsp;the&nbsp;value&nbsp;of&nbsp;the&nbsp;variable&nbsp;on&nbsp;the&nbsp;left&nbsp;divided&nbsp;by&nbsp;the&nbsp;right&nbsp;value&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;explanation:&nbsp;similar&nbsp;to&nbsp;above,&nbsp;except&nbsp;with&nbsp;division&nbsp;<BR>
&nbsp;<BR>
++&nbsp;post/pre-increment&nbsp;operators&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;examples:&nbsp;i++&nbsp;or&nbsp;++i&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;values:&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i++&nbsp;has&nbsp;the&nbsp;value&nbsp;of&nbsp;i&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;++i&nbsp;has&nbsp;the&nbsp;value&nbsp;of&nbsp;i+1&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;explanation:&nbsp;++&nbsp;changes&nbsp;the&nbsp;value&nbsp;of&nbsp;i&nbsp;by&nbsp;increasing&nbsp;it&nbsp;by&nbsp;1.&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;However,&nbsp;the&nbsp;value&nbsp;of&nbsp;the&nbsp;expression&nbsp;depends&nbsp;on&nbsp;where&nbsp;you&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;place&nbsp;the&nbsp;++.&nbsp;&nbsp;++i&nbsp;is&nbsp;the&nbsp;pre-increment&nbsp;operator.&nbsp;&nbsp;This&nbsp;means&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;that&nbsp;it&nbsp;performs&nbsp;the&nbsp;increment&nbsp;*before*&nbsp;giving&nbsp;a&nbsp;value.&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i++&nbsp;is&nbsp;the&nbsp;post-ncrement&nbsp;operator.&nbsp;&nbsp;It&nbsp;evalutes&nbsp;before&nbsp;incrementing&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i.&nbsp;&nbsp;What&nbsp;is&nbsp;the&nbsp;point?&nbsp;&nbsp;Well,&nbsp;it&nbsp;does&nbsp;not&nbsp;much&nbsp;matter&nbsp;to&nbsp;you&nbsp;at&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this&nbsp;point,&nbsp;but&nbsp;you&nbsp;should&nbsp;recognize&nbsp;what&nbsp;it&nbsp;means.&nbsp;<BR>
&nbsp;<BR>
--&nbsp;post/pre-decrement&nbsp;operators&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;examples:&nbsp;i--&nbsp;or&nbsp;--i&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;values:&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i--&nbsp;the&nbsp;value&nbsp;of&nbsp;i&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--i&nbsp;the&nbsp;value&nbsp;of&nbsp;i&nbsp;reduced&nbsp;by&nbsp;1&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;explanation:&nbsp;like&nbsp;++&nbsp;except&nbsp;for&nbsp;subtraction&nbsp;<BR>
&nbsp;<BR>
==&nbsp;equality&nbsp;operator&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;example:&nbsp;x&nbsp;==&nbsp;5&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;value:&nbsp;true&nbsp;or&nbsp;false&nbsp;(not&nbsp;0&nbsp;or&nbsp;0)&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;explanation:&nbsp;it&nbsp;does&nbsp;nothing&nbsp;to&nbsp;either&nbsp;value,&nbsp;but&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;it&nbsp;returns&nbsp;true&nbsp;if&nbsp;the&nbsp;2&nbsp;values&nbsp;are&nbsp;the&nbsp;same.&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;It&nbsp;returns&nbsp;false&nbsp;if&nbsp;they&nbsp;are&nbsp;not&nbsp;equal.&nbsp;<BR>
&nbsp;<BR>
!=&nbsp;inequality&nbsp;operator&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;example:&nbsp;x&nbsp;!=&nbsp;5&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;value:&nbsp;true&nbsp;or&nbsp;false&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;explanation&nbsp;returns&nbsp;true&nbsp;if&nbsp;the&nbsp;left&nbsp;expression&nbsp;is&nbsp;not&nbsp;equal&nbsp;to&nbsp;the&nbsp;right&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;expression.&nbsp;&nbsp;It&nbsp;returns&nbsp;fals&nbsp;if&nbsp;they&nbsp;are&nbsp;equal&nbsp;<BR>
&nbsp;<BR>
＞<I>&nbsp;greater&nbsp;than&nbsp;operator&nbsp;</I><BR>
&nbsp;&nbsp;&nbsp;&nbsp;example:&nbsp;x&nbsp;&gt;&nbsp;5&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;value:&nbsp;true&nbsp;or&nbsp;false&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;explanation:&nbsp;true&nbsp;only&nbsp;if&nbsp;x&nbsp;has&nbsp;a&nbsp;value&nbsp;greater&nbsp;than&nbsp;5&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;false&nbsp;if&nbsp;the&nbsp;value&nbsp;is&nbsp;equal&nbsp;or&nbsp;less&nbsp;<BR>
&nbsp;<BR>
&lt;&nbsp;less&nbsp;than&nbsp;operator&nbsp;<BR>
＞<I>=&nbsp;greater&nbsp;than&nbsp;or&nbsp;equal&nbsp;to&nbsp;operator&nbsp;</I><BR>
&lt;=&nbsp;less&nbsp;than&nbsp;or&nbsp;equal&nbsp;to&nbsp;operator&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;examples:&nbsp;x&nbsp;&lt;&nbsp;y&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&gt;=&nbsp;y&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&lt;=&nbsp;y&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;values:&nbsp;true&nbsp;or&nbsp;false&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;explanation:&nbsp;similar&nbsp;as&nbsp;to&nbsp;&gt;&nbsp;except&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&nbsp;true&nbsp;if&nbsp;left&nbsp;is&nbsp;less&nbsp;than&nbsp;right&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&gt;=&nbsp;true&nbsp;if&nbsp;left&nbsp;is&nbsp;greater&nbsp;than&nbsp;*or&nbsp;equal&nbsp;to*&nbsp;right&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;=&nbsp;true&nbsp;if&nbsp;the&nbsp;left&nbsp;is&nbsp;less&nbsp;than&nbsp;*or&nbsp;equal&nbsp;to*&nbsp;the&nbsp;right&nbsp;<BR>
&nbsp;<BR>
&amp;&amp;&nbsp;logical&nbsp;and&nbsp;operator&nbsp;<BR>
||&nbsp;logical&nbsp;or&nbsp;operator&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;examples:&nbsp;x&nbsp;&amp;&amp;&nbsp;y&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;||&nbsp;y&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;values:&nbsp;true&nbsp;or&nbsp;false&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;explanation:&nbsp;If&nbsp;the&nbsp;right&nbsp;value&nbsp;and&nbsp;left&nbsp;value&nbsp;are&nbsp;non-zero,&nbsp;&amp;&amp;&nbsp;is&nbsp;true.&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;If&nbsp;either&nbsp;are&nbsp;false,&nbsp;then&nbsp;&amp;&amp;&nbsp;is&nbsp;false.&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;For&nbsp;||,&nbsp;only&nbsp;one&nbsp;of&nbsp;the&nbsp;values&nbsp;must&nbsp;be&nbsp;true&nbsp;for&nbsp;it&nbsp;to&nbsp;evaluate&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;as&nbsp;true.&nbsp;&nbsp;It&nbsp;is&nbsp;only&nbsp;false&nbsp;if&nbsp;both&nbsp;values&nbsp;indeed&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;are&nbsp;false&nbsp;<BR>
&nbsp;<BR>
!&nbsp;negation&nbsp;operator&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;example:&nbsp;!x&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;value:&nbsp;true&nbsp;or&nbsp;false&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;explanation:&nbsp;If&nbsp;x&nbsp;is&nbsp;true,&nbsp;then&nbsp;!x&nbsp;is&nbsp;false&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;If&nbsp;x&nbsp;is&nbsp;false,&nbsp;!x&nbsp;is&nbsp;true.&nbsp;<BR>
&nbsp;<BR>
A&nbsp;pair&nbsp;of&nbsp;more&nbsp;complicated&nbsp;ones&nbsp;that&nbsp;are&nbsp;here&nbsp;just&nbsp;for&nbsp;the&nbsp;sake&nbsp;of&nbsp;being&nbsp;<BR>
here.&nbsp;&nbsp;Do&nbsp;not&nbsp;worry&nbsp;if&nbsp;they&nbsp;utterly&nbsp;confuse&nbsp;you.&nbsp;<BR>
&nbsp;<BR>
-&gt;&nbsp;the&nbsp;call&nbsp;other&nbsp;operator&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;example:&nbsp;this_player()-&gt;query_name()&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;value:&nbsp;The&nbsp;value&nbsp;returned&nbsp;by&nbsp;the&nbsp;function&nbsp;being&nbsp;called&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;explanation:&nbsp;&nbsp;It&nbsp;calls&nbsp;the&nbsp;function&nbsp;which&nbsp;is&nbsp;on&nbsp;the&nbsp;right&nbsp;in&nbsp;the&nbsp;object&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;on&nbsp;the&nbsp;left&nbsp;side&nbsp;of&nbsp;the&nbsp;operator.&nbsp;&nbsp;The&nbsp;left&nbsp;expression&nbsp;*must*&nbsp;be&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;an&nbsp;object,&nbsp;and&nbsp;the&nbsp;right&nbsp;expression&nbsp;*must*&nbsp;be&nbsp;the&nbsp;name&nbsp;of&nbsp;a&nbsp;function.&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;If&nbsp;not&nbsp;such&nbsp;function&nbsp;exists&nbsp;in&nbsp;the&nbsp;object,&nbsp;it&nbsp;will&nbsp;return&nbsp;0&nbsp;(or&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;more&nbsp;correctly,&nbsp;undefined).&nbsp;<BR>
&nbsp;<BR>
?&nbsp;:&nbsp;conditional&nbsp;operator&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;example:&nbsp;x&nbsp;?&nbsp;y&nbsp;:&nbsp;z&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;values:&nbsp;in&nbsp;the&nbsp;above&nbsp;example,&nbsp;if&nbsp;x&nbsp;is&nbsp;try,&nbsp;the&nbsp;value&nbsp;is&nbsp;y&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;x&nbsp;is&nbsp;false,&nbsp;the&nbsp;value&nbsp;of&nbsp;the&nbsp;expression&nbsp;is&nbsp;z&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;explanation:&nbsp;If&nbsp;the&nbsp;leftmost&nbsp;value&nbsp;is&nbsp;true,&nbsp;it&nbsp;will&nbsp;give&nbsp;the&nbsp;expression&nbsp;as&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;whole&nbsp;the&nbsp;value&nbsp;of&nbsp;the&nbsp;middle&nbsp;expression.&nbsp;&nbsp;Else,&nbsp;it&nbsp;will&nbsp;give&nbsp;the&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;expression&nbsp;as&nbsp;a&nbsp;whole&nbsp;the&nbsp;value&nbsp;of&nbsp;the&nbsp;rightmost&nbsp;expression.&nbsp;<BR>
&nbsp;<BR>
A&nbsp;note&nbsp;on&nbsp;equality:&nbsp;&nbsp;A&nbsp;very&nbsp;nasty&nbsp;error&nbsp;people&nbsp;make&nbsp;that&nbsp;is&nbsp;VERY&nbsp;difficult&nbsp;<BR>
to&nbsp;debug&nbsp;is&nbsp;the&nbsp;error&nbsp;of&nbsp;placing&nbsp;=&nbsp;where&nbsp;you&nbsp;mean&nbsp;==.&nbsp;&nbsp;Since&nbsp;<BR>
operators&nbsp;return&nbsp;values,&nbsp;they&nbsp;both&nbsp;make&nbsp;sense&nbsp;when&nbsp;being&nbsp;evaluated.&nbsp;<BR>
In&nbsp;other&nbsp;words,&nbsp;no&nbsp;error&nbsp;occurs.&nbsp;&nbsp;But&nbsp;they&nbsp;have&nbsp;very&nbsp;different&nbsp;values.&nbsp;&nbsp;For&nbsp;example:&nbsp;<BR>
&nbsp;&nbsp;if(x&nbsp;==&nbsp;5)&nbsp;&nbsp;&nbsp;&nbsp;if(x&nbsp;=&nbsp;5)&nbsp;<BR>
The&nbsp;value&nbsp;of&nbsp;x&nbsp;==&nbsp;5&nbsp;is&nbsp;true&nbsp;if&nbsp;the&nbsp;value&nbsp;of&nbsp;x&nbsp;is&nbsp;5,&nbsp;false&nbsp;othewise.&nbsp;<BR>
The&nbsp;value&nbsp;of&nbsp;x&nbsp;=&nbsp;5&nbsp;is&nbsp;5&nbsp;(and&nbsp;therefore&nbsp;always&nbsp;true).&nbsp;<BR>
The&nbsp;if&nbsp;statement&nbsp;is&nbsp;looking&nbsp;for&nbsp;the&nbsp;expression&nbsp;in&nbsp;()&nbsp;to&nbsp;be&nbsp;either&nbsp;true&nbsp;or&nbsp;false,&nbsp;<BR>
so&nbsp;if&nbsp;you&nbsp;had&nbsp;=&nbsp;and&nbsp;meant&nbsp;==,&nbsp;you&nbsp;would&nbsp;end&nbsp;up&nbsp;with&nbsp;an&nbsp;expression&nbsp;that&nbsp;is&nbsp;<BR>
always&nbsp;true.&nbsp;&nbsp;And&nbsp;you&nbsp;would&nbsp;pull&nbsp;your&nbsp;hair&nbsp;out&nbsp;trying&nbsp;to&nbsp;figure&nbsp;out&nbsp;<BR>
why&nbsp;things&nbsp;were&nbsp;not&nbsp;happening&nbsp;like&nbsp;they&nbsp;should&nbsp;:)&nbsp;<BR>
&nbsp;<BR>
--&nbsp;<BR>
小樓一夜聽秋雨&nbsp;<BR>
--&nbsp;<BR>
佇倚危樓風細細&nbsp;望極春愁&nbsp;黯黯生天際&nbsp;&nbsp;草色煙光殘照裡&nbsp;無言誰會憑欄意[0&nbsp;<BR>
擬把疏狂圖一醉&nbsp;對酒當歌&nbsp;強樂還無味&nbsp;&nbsp;衣帶漸寬終不悔&nbsp;為伊消得人憔悴&nbsp;<BR>
&nbsp;<BR>
※&nbsp;來源:•BBS&nbsp;水木清華站&nbsp;bbs.net.tsinghua.edu.cn•[FROM:&nbsp;166.111.5.25]&nbsp;<BR>
<A HREF="00000006.htm">上一篇</A>
<A HREF='javascript:history.go(-1)'>返回上一頁</A>
<A HREF="index.htm">回到目錄</A>
<A HREF="#top">回到頁首</A>
<A HREF="00000008.htm">下一篇</A>
</H1></CENTER>
<CENTER><H1>BBS水木清華站︰精華區</H1></CENTER>
</BODY></HTML>