<HTML>
<HEAD>
<TITLE>BBS水木清華站︰精華區</TITLE>
</HEAD>
<BODY>
<CENTER><H1>BBS水木清華站︰精華區</H1></CENTER>
<A Name="top"></a>
發信人:&nbsp;Ranma&nbsp;(亂馬~~~~~~~無聊中),&nbsp;信區:&nbsp;Mud_Builder&nbsp;<BR>
標&nbsp;&nbsp;題:&nbsp;Lpc&nbsp;basics&nbsp;(7)--Flow&nbsp;Control&nbsp;<BR>
發信站:&nbsp;BBS&nbsp;水木清華站&nbsp;(Mon&nbsp;Oct&nbsp;20&nbsp;09:07:47&nbsp;1997)&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LPC&nbsp;Basics&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Written&nbsp;by&nbsp;Descartes&nbsp;of&nbsp;Borg&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;first&nbsp;edition:&nbsp;23&nbsp;april&nbsp;1993&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;second&nbsp;edition:&nbsp;10&nbsp;july&nbsp;1993&nbsp;<BR>
&nbsp;<BR>
CHAPTER&nbsp;7:&nbsp;Flow&nbsp;Control&nbsp;<BR>
&nbsp;<BR>
7.1&nbsp;Review&nbsp;of&nbsp;variables&nbsp;<BR>
Variables&nbsp;may&nbsp;be&nbsp;manipulated&nbsp;by&nbsp;assigning&nbsp;or&nbsp;changing&nbsp;values&nbsp;with&nbsp;the&nbsp;<BR>
expressions&nbsp;=,&nbsp;+=,&nbsp;-=,&nbsp;++,&nbsp;--.&nbsp;&nbsp;Those&nbsp;expressions&nbsp;may&nbsp;be&nbsp;combined&nbsp;with&nbsp;<BR>
the&nbsp;expressions&nbsp;-,&nbsp;+,&nbsp;*,&nbsp;/,&nbsp;%.&nbsp;&nbsp;However,&nbsp;so&nbsp;far,&nbsp;you&nbsp;have&nbsp;only&nbsp;been&nbsp;<BR>
shown&nbsp;how&nbsp;to&nbsp;use&nbsp;a&nbsp;function&nbsp;to&nbsp;do&nbsp;these&nbsp;in&nbsp;a&nbsp;linear&nbsp;way.&nbsp;&nbsp;For&nbsp;example:&nbsp;<BR>
&nbsp;&nbsp;<BR>
int&nbsp;hello(int&nbsp;x)&nbsp;{&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;x--;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;write(&quot;Hello,&nbsp;x&nbsp;is&nbsp;&quot;+x+&quot;.\n&quot;);&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;x;&nbsp;<BR>
}&nbsp;<BR>
&nbsp;&nbsp;<BR>
is&nbsp;a&nbsp;function&nbsp;you&nbsp;should&nbsp;know&nbsp;how&nbsp;to&nbsp;write&nbsp;and&nbsp;understand.&nbsp;&nbsp;But&nbsp;what&nbsp;<BR>
if&nbsp;you&nbsp;wanted&nbsp;to&nbsp;write&nbsp;the&nbsp;value&nbsp;of&nbsp;x&nbsp;only&nbsp;if&nbsp;x&nbsp;=&nbsp;1?&nbsp;&nbsp;Or&nbsp;what&nbsp;if&nbsp;<BR>
you&nbsp;wanted&nbsp;it&nbsp;to&nbsp;keep&nbsp;writing&nbsp;x&nbsp;over&nbsp;and&nbsp;over&nbsp;until&nbsp;x&nbsp;=&nbsp;1&nbsp;before&nbsp;<BR>
returning?&nbsp;&nbsp;LPC&nbsp;uses&nbsp;flow&nbsp;control&nbsp;in&nbsp;exactly&nbsp;the&nbsp;same&nbsp;way&nbsp;as&nbsp;C&nbsp;and&nbsp;C++.&nbsp;<BR>
&nbsp;<BR>
7.2&nbsp;The&nbsp;LPC&nbsp;flow&nbsp;control&nbsp;statements&nbsp;<BR>
LPC&nbsp;uses&nbsp;the&nbsp;following&nbsp;expressions:&nbsp;<BR>
&nbsp;&nbsp;<BR>
if(expression)&nbsp;instruction;&nbsp;<BR>
&nbsp;&nbsp;<BR>
if(expression)&nbsp;instruction;&nbsp;<BR>
else&nbsp;instruction;&nbsp;<BR>
&nbsp;&nbsp;<BR>
if(expression)&nbsp;instruction;&nbsp;<BR>
else&nbsp;if(expression)&nbsp;instruction;&nbsp;<BR>
else&nbsp;instruction;&nbsp;<BR>
&nbsp;&nbsp;<BR>
while(expression)&nbsp;instruction;&nbsp;<BR>
&nbsp;&nbsp;<BR>
do&nbsp;{&nbsp;instruction;&nbsp;}&nbsp;while(expression);&nbsp;<BR>
&nbsp;&nbsp;<BR>
switch(expression)&nbsp;{&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;(expression):&nbsp;instruction;&nbsp;break;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;default:&nbsp;instruction;&nbsp;<BR>
}&nbsp;<BR>
&nbsp;&nbsp;<BR>
Before&nbsp;we&nbsp;discuss&nbsp;these,&nbsp;first&nbsp;something&nbsp;on&nbsp;what&nbsp;is&nbsp;meant&nbsp;by&nbsp;expression&nbsp;and&nbsp;<BR>
instruction.&nbsp;&nbsp;An&nbsp;expression&nbsp;is&nbsp;anything&nbsp;with&nbsp;a&nbsp;value&nbsp;like&nbsp;a&nbsp;variable,&nbsp;<BR>
a&nbsp;comparison&nbsp;(like&nbsp;x&gt;5,&nbsp;where&nbsp;if&nbsp;x&nbsp;is&nbsp;6&nbsp;or&nbsp;more,&nbsp;the&nbsp;value&nbsp;is&nbsp;1,&nbsp;else&nbsp;the&nbsp;<BR>
value&nbsp;is&nbsp;0),&nbsp;or&nbsp;an&nbsp;assignment(like&nbsp;x&nbsp;+=&nbsp;2).&nbsp;&nbsp;An&nbsp;instruction&nbsp;can&nbsp;be&nbsp;any&nbsp;<BR>
single&nbsp;line&nbsp;of&nbsp;lpc&nbsp;code&nbsp;like&nbsp;a&nbsp;function&nbsp;call,&nbsp;a&nbsp;value&nbsp;assignment&nbsp;or&nbsp;<BR>
modification,&nbsp;etc.&nbsp;<BR>
&nbsp;&nbsp;<BR>
You&nbsp;should&nbsp;know&nbsp;also&nbsp;the&nbsp;operators&nbsp;&amp;&amp;,&nbsp;||,&nbsp;==,&nbsp;!=,&nbsp;and&nbsp;!.&nbsp;&nbsp;These&nbsp;are&nbsp;the&nbsp;<BR>
logical&nbsp;operators.&nbsp;&nbsp;They&nbsp;return&nbsp;a&nbsp;nonzero&nbsp;value&nbsp;when&nbsp;true,&nbsp;and&nbsp;0&nbsp;when&nbsp;false.&nbsp;<BR>
Make&nbsp;note&nbsp;of&nbsp;the&nbsp;values&nbsp;of&nbsp;the&nbsp;following&nbsp;expressions:&nbsp;<BR>
&nbsp;&nbsp;<BR>
(1&nbsp;&amp;&amp;&nbsp;1)&nbsp;value:&nbsp;1&nbsp;&nbsp;&nbsp;(1&nbsp;and&nbsp;1)&nbsp;<BR>
(1&nbsp;&amp;&amp;&nbsp;0)&nbsp;value:&nbsp;0&nbsp;&nbsp;&nbsp;(1&nbsp;and&nbsp;0)&nbsp;<BR>
(1&nbsp;||&nbsp;0)&nbsp;value:&nbsp;1&nbsp;&nbsp;&nbsp;(1&nbsp;or&nbsp;0)&nbsp;<BR>
(1&nbsp;==&nbsp;1)&nbsp;value:&nbsp;1&nbsp;&nbsp;&nbsp;(1&nbsp;is&nbsp;equal&nbsp;to&nbsp;1)&nbsp;<BR>
(1&nbsp;!=&nbsp;1)&nbsp;value:&nbsp;0&nbsp;&nbsp;&nbsp;(1&nbsp;is&nbsp;not&nbsp;equal&nbsp;to&nbsp;1)&nbsp;<BR>
(!1)&nbsp;value:&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(not&nbsp;1)&nbsp;<BR>
(!0)&nbsp;value:&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(not&nbsp;0)&nbsp;<BR>
&nbsp;&nbsp;<BR>
In&nbsp;expressions&nbsp;using&nbsp;&amp;&amp;,&nbsp;if&nbsp;the&nbsp;value&nbsp;of&nbsp;the&nbsp;first&nbsp;item&nbsp;being&nbsp;compared&nbsp;<BR>
is&nbsp;0,&nbsp;the&nbsp;second&nbsp;is&nbsp;never&nbsp;tested&nbsp;even.&nbsp;&nbsp;When&nbsp;using&nbsp;||,&nbsp;if&nbsp;the&nbsp;first&nbsp;is&nbsp;<BR>
true&nbsp;(1),&nbsp;then&nbsp;the&nbsp;second&nbsp;is&nbsp;not&nbsp;tested.&nbsp;<BR>
&nbsp;&nbsp;<BR>
7.3&nbsp;if()&nbsp;<BR>
The&nbsp;first&nbsp;expression&nbsp;to&nbsp;look&nbsp;at&nbsp;that&nbsp;alters&nbsp;flow&nbsp;control&nbsp;is&nbsp;if().&nbsp;&nbsp;Take&nbsp;<BR>
a&nbsp;look&nbsp;at&nbsp;the&nbsp;following&nbsp;example:&nbsp;<BR>
&nbsp;&nbsp;<BR>
1&nbsp;void&nbsp;reset()&nbsp;{&nbsp;<BR>
2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;x;&nbsp;<BR>
3&nbsp;<BR>
4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::reset();&nbsp;<BR>
5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;=&nbsp;random(10);&nbsp;<BR>
6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(x&nbsp;&gt;&nbsp;50)&nbsp;set_search_func(&quot;floorboards&quot;,&nbsp;&quot;search_floor&quot;);&nbsp;<BR>
7&nbsp;}&nbsp;<BR>
&nbsp;&nbsp;<BR>
The&nbsp;line&nbsp;numbers&nbsp;are&nbsp;for&nbsp;reference&nbsp;only.&nbsp;<BR>
In&nbsp;line&nbsp;2,&nbsp;of&nbsp;course&nbsp;we&nbsp;declare&nbsp;a&nbsp;variable&nbsp;of&nbsp;type&nbsp;int&nbsp;called&nbsp;x.&nbsp;&nbsp;Line&nbsp;3&nbsp;<BR>
is&nbsp;aethetic&nbsp;whitespace&nbsp;to&nbsp;clearly&nbsp;show&nbsp;where&nbsp;the&nbsp;declarations&nbsp;end&nbsp;and&nbsp;the&nbsp;<BR>
function&nbsp;code&nbsp;begins.&nbsp;&nbsp;The&nbsp;variable&nbsp;x&nbsp;is&nbsp;only&nbsp;available&nbsp;to&nbsp;the&nbsp;function&nbsp;<BR>
reset().&nbsp;<BR>
Line&nbsp;4&nbsp;makes&nbsp;a&nbsp;call&nbsp;to&nbsp;the&nbsp;room.c&nbsp;version&nbsp;of&nbsp;reset().&nbsp;<BR>
Line&nbsp;5&nbsp;uses&nbsp;the&nbsp;driver&nbsp;efun&nbsp;random()&nbsp;to&nbsp;return&nbsp;a&nbsp;random&nbsp;number&nbsp;between&nbsp;<BR>
0&nbsp;and&nbsp;the&nbsp;parameter&nbsp;minus&nbsp;1.&nbsp;&nbsp;So&nbsp;here&nbsp;we&nbsp;are&nbsp;looking&nbsp;for&nbsp;a&nbsp;number&nbsp;between&nbsp;<BR>
0&nbsp;and&nbsp;99.&nbsp;<BR>
In&nbsp;line&nbsp;6,&nbsp;we&nbsp;test&nbsp;the&nbsp;value&nbsp;of&nbsp;the&nbsp;expression&nbsp;(x&gt;50)&nbsp;to&nbsp;see&nbsp;if&nbsp;it&nbsp;is&nbsp;true&nbsp;<BR>
or&nbsp;false.&nbsp;&nbsp;If&nbsp;it&nbsp;is&nbsp;true,&nbsp;then&nbsp;it&nbsp;makes&nbsp;a&nbsp;call&nbsp;to&nbsp;the&nbsp;room.c&nbsp;function&nbsp;<BR>
set_search_func().&nbsp;&nbsp;If&nbsp;it&nbsp;is&nbsp;false,&nbsp;the&nbsp;call&nbsp;to&nbsp;set_search_func()&nbsp;is&nbsp;never&nbsp;<BR>
executed.&nbsp;<BR>
In&nbsp;line&nbsp;7,&nbsp;the&nbsp;function&nbsp;returns&nbsp;driver&nbsp;control&nbsp;to&nbsp;the&nbsp;calling&nbsp;function&nbsp;<BR>
(the&nbsp;driver&nbsp;itself&nbsp;in&nbsp;this&nbsp;case)&nbsp;without&nbsp;returning&nbsp;any&nbsp;value.&nbsp;<BR>
&nbsp;&nbsp;<BR>
If&nbsp;you&nbsp;had&nbsp;wanted&nbsp;to&nbsp;execute&nbsp;multiple&nbsp;instructions&nbsp;instead&nbsp;of&nbsp;just&nbsp;the&nbsp;one,&nbsp;<BR>
you&nbsp;would&nbsp;have&nbsp;done&nbsp;it&nbsp;in&nbsp;the&nbsp;following&nbsp;manner:&nbsp;<BR>
&nbsp;&nbsp;<BR>
if(x&gt;50)&nbsp;{&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;set_search_func(&quot;floorboards&quot;,&nbsp;&quot;search_floor&quot;);&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if(!present(&quot;beggar&quot;,&nbsp;this_object()))&nbsp;make_beggar();&nbsp;<BR>
}&nbsp;<BR>
&nbsp;&nbsp;<BR>
Notice&nbsp;the&nbsp;{}&nbsp;encapsulate&nbsp;the&nbsp;instructions&nbsp;to&nbsp;be&nbsp;executed&nbsp;if&nbsp;the&nbsp;test&nbsp;<BR>
expression&nbsp;is&nbsp;true.&nbsp;&nbsp;In&nbsp;the&nbsp;example,&nbsp;again&nbsp;we&nbsp;call&nbsp;the&nbsp;room.c&nbsp;function&nbsp;<BR>
which&nbsp;sets&nbsp;a&nbsp;function&nbsp;(search_floor())&nbsp;that&nbsp;you&nbsp;will&nbsp;later&nbsp;define&nbsp;yourself&nbsp;<BR>
to&nbsp;be&nbsp;called&nbsp;when&nbsp;the&nbsp;player&nbsp;types&nbsp;&quot;search&nbsp;floorboards&quot;&nbsp;(NOTE:&nbsp;This&nbsp;is&nbsp;<BR>
highly&nbsp;mudlib&nbsp;dependent.&nbsp;&nbsp;Nightmare&nbsp;mudlibs&nbsp;have&nbsp;this&nbsp;function&nbsp;call.&nbsp;<BR>
Others&nbsp;may&nbsp;have&nbsp;something&nbsp;similar,&nbsp;while&nbsp;others&nbsp;may&nbsp;not&nbsp;have&nbsp;this&nbsp;feature&nbsp;<BR>
under&nbsp;any&nbsp;name).&nbsp;&nbsp;Next,&nbsp;there&nbsp;is&nbsp;another&nbsp;if()&nbsp;expression&nbsp;that&nbsp;tests&nbsp;the&nbsp;<BR>
truth&nbsp;of&nbsp;the&nbsp;expression&nbsp;(!present(&quot;beggar&quot;,this_object())).&nbsp;&nbsp;The&nbsp;!&nbsp;in&nbsp;the&nbsp;<BR>
test&nbsp;expression&nbsp;changes&nbsp;the&nbsp;truth&nbsp;of&nbsp;the&nbsp;expression&nbsp;which&nbsp;follows&nbsp;it.&nbsp;&nbsp;In&nbsp;<BR>
this&nbsp;case,&nbsp;it&nbsp;changes&nbsp;the&nbsp;truth&nbsp;of&nbsp;the&nbsp;efun&nbsp;present(),&nbsp;which&nbsp;will&nbsp;return&nbsp;<BR>
the&nbsp;object&nbsp;that&nbsp;is&nbsp;a&nbsp;beggar&nbsp;if&nbsp;it&nbsp;is&nbsp;in&nbsp;the&nbsp;room&nbsp;(this_object()),&nbsp;or&nbsp;it&nbsp;<BR>
will&nbsp;return&nbsp;0&nbsp;if&nbsp;there&nbsp;is&nbsp;no&nbsp;beggar&nbsp;in&nbsp;the&nbsp;room.&nbsp;&nbsp;So&nbsp;if&nbsp;there&nbsp;is&nbsp;a&nbsp;beggar&nbsp;<BR>
still&nbsp;living&nbsp;in&nbsp;the&nbsp;room,&nbsp;(present(&quot;beggar&quot;,&nbsp;this_object()))&nbsp;will&nbsp;have&nbsp;<BR>
a&nbsp;value&nbsp;equal&nbsp;to&nbsp;the&nbsp;beggar&nbsp;object&nbsp;(data&nbsp;type&nbsp;object),&nbsp;otherwise&nbsp;it&nbsp;will&nbsp;<BR>
be&nbsp;0.&nbsp;&nbsp;The&nbsp;!&nbsp;will&nbsp;change&nbsp;a&nbsp;0&nbsp;to&nbsp;a&nbsp;1,&nbsp;or&nbsp;any&nbsp;nonzero&nbsp;value&nbsp;(like&nbsp;the&nbsp;<BR>
beggar&nbsp;object)&nbsp;to&nbsp;a&nbsp;0.&nbsp;&nbsp;Therefore,&nbsp;the&nbsp;expression&nbsp;<BR>
(!present(&quot;beggar&quot;,&nbsp;this_object()))&nbsp;is&nbsp;true&nbsp;if&nbsp;there&nbsp;is&nbsp;no&nbsp;beggar&nbsp;in&nbsp;the&nbsp;<BR>
room,&nbsp;and&nbsp;false&nbsp;if&nbsp;there&nbsp;is.&nbsp;&nbsp;So,&nbsp;if&nbsp;there&nbsp;is&nbsp;no&nbsp;beggar&nbsp;in&nbsp;the&nbsp;room,&nbsp;<BR>
then&nbsp;it&nbsp;calls&nbsp;the&nbsp;function&nbsp;you&nbsp;define&nbsp;in&nbsp;your&nbsp;room&nbsp;code&nbsp;that&nbsp;makes&nbsp;a&nbsp;<BR>
new&nbsp;beggar&nbsp;and&nbsp;puts&nbsp;it&nbsp;in&nbsp;the&nbsp;room.&nbsp;(If&nbsp;there&nbsp;is&nbsp;a&nbsp;beggar&nbsp;in&nbsp;the&nbsp;room,&nbsp;<BR>
we&nbsp;do&nbsp;not&nbsp;want&nbsp;to&nbsp;add&nbsp;yet&nbsp;another&nbsp;one&nbsp;:))&nbsp;<BR>
&nbsp;&nbsp;<BR>
Of&nbsp;course,&nbsp;if()'s&nbsp;often&nbsp;comes&nbsp;with&nbsp;ands&nbsp;or&nbsp;buts&nbsp;:).&nbsp;&nbsp;In&nbsp;LPC,&nbsp;the&nbsp;formal&nbsp;<BR>
reading&nbsp;of&nbsp;the&nbsp;if()&nbsp;statement&nbsp;is:&nbsp;<BR>
&nbsp;&nbsp;<BR>
if(expression)&nbsp;{&nbsp;set&nbsp;of&nbsp;intructions&nbsp;}&nbsp;<BR>
else&nbsp;if(expression)&nbsp;{&nbsp;set&nbsp;of&nbsp;instructions&nbsp;}&nbsp;<BR>
else&nbsp;{&nbsp;set&nbsp;of&nbsp;instructions&nbsp;}&nbsp;<BR>
&nbsp;&nbsp;<BR>
This&nbsp;means:&nbsp;<BR>
&nbsp;&nbsp;<BR>
If&nbsp;expression&nbsp;is&nbsp;true,&nbsp;then&nbsp;do&nbsp;these&nbsp;instructions.&nbsp;<BR>
Otherise,&nbsp;if&nbsp;this&nbsp;second&nbsp;expression&nbsp;is&nbsp;true,&nbsp;do&nbsp;this&nbsp;second&nbsp;set.&nbsp;<BR>
And&nbsp;if&nbsp;none&nbsp;of&nbsp;those&nbsp;were&nbsp;true,&nbsp;then&nbsp;do&nbsp;this&nbsp;last&nbsp;set.&nbsp;<BR>
&nbsp;&nbsp;<BR>
You&nbsp;can&nbsp;have&nbsp;if()&nbsp;alone:&nbsp;<BR>
&nbsp;&nbsp;<BR>
if(x&gt;5)&nbsp;write(&quot;Foo,\n&quot;);&nbsp;<BR>
&nbsp;&nbsp;<BR>
with&nbsp;an&nbsp;else&nbsp;if():&nbsp;<BR>
&nbsp;&nbsp;<BR>
if(x&nbsp;&gt;&nbsp;5)&nbsp;write(&quot;X&nbsp;is&nbsp;greater&nbsp;than&nbsp;5.\n&quot;);&nbsp;<BR>
else&nbsp;if(x&nbsp;&gt;2)&nbsp;write(&quot;X&nbsp;is&nbsp;less&nbsp;than&nbsp;6,&nbsp;but&nbsp;greater&nbsp;than&nbsp;2.\n&quot;);&nbsp;<BR>
&nbsp;&nbsp;<BR>
with&nbsp;an&nbsp;else:&nbsp;<BR>
&nbsp;&nbsp;<BR>
if(x&gt;5)&nbsp;write(&quot;X&nbsp;is&nbsp;greater&nbsp;than&nbsp;5.\n&quot;);&nbsp;<BR>
else&nbsp;write(&quot;X&nbsp;is&nbsp;less&nbsp;than&nbsp;6.\n&quot;);&nbsp;<BR>
&nbsp;&nbsp;<BR>
or&nbsp;the&nbsp;whole&nbsp;lot&nbsp;of&nbsp;them&nbsp;as&nbsp;listed&nbsp;above.&nbsp;&nbsp;You&nbsp;can&nbsp;have&nbsp;any&nbsp;number&nbsp;of&nbsp;<BR>
else&nbsp;if()'s&nbsp;in&nbsp;the&nbsp;expression,&nbsp;but&nbsp;you&nbsp;must&nbsp;have&nbsp;one&nbsp;and&nbsp;only&nbsp;one&nbsp;<BR>
if()&nbsp;and&nbsp;at&nbsp;most&nbsp;one&nbsp;else.&nbsp;&nbsp;Of&nbsp;course,&nbsp;as&nbsp;with&nbsp;the&nbsp;beggar&nbsp;example,&nbsp;<BR>
you&nbsp;may&nbsp;nest&nbsp;if()&nbsp;statements&nbsp;inside&nbsp;if()&nbsp;instructions.&nbsp;(For&nbsp;example,&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if(x&gt;5)&nbsp;{&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(x==7)&nbsp;write(&quot;Lucky&nbsp;number!\n&quot;);&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;write(&quot;Roll&nbsp;again.\n&quot;);&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;write(&quot;You&nbsp;lose.\n&quot;);&nbsp;<BR>
&nbsp;&nbsp;<BR>
7.4&nbsp;The&nbsp;statements:&nbsp;while()&nbsp;and&nbsp;do&nbsp;{}&nbsp;while()&nbsp;<BR>
Prototype:&nbsp;<BR>
while(expression)&nbsp;{&nbsp;set&nbsp;of&nbsp;instructions&nbsp;}&nbsp;<BR>
do&nbsp;{&nbsp;set&nbsp;of&nbsp;instructions&nbsp;}&nbsp;while(expression);&nbsp;<BR>
&nbsp;&nbsp;<BR>
These&nbsp;allow&nbsp;you&nbsp;to&nbsp;create&nbsp;a&nbsp;set&nbsp;of&nbsp;instructions&nbsp;which&nbsp;continue&nbsp;to&nbsp;<BR>
execute&nbsp;so&nbsp;long&nbsp;as&nbsp;some&nbsp;expression&nbsp;is&nbsp;true.&nbsp;&nbsp;Suppose&nbsp;you&nbsp;wanted&nbsp;to&nbsp;<BR>
set&nbsp;a&nbsp;variable&nbsp;equal&nbsp;to&nbsp;a&nbsp;player's&nbsp;level&nbsp;and&nbsp;keep&nbsp;subtracting&nbsp;random&nbsp;<BR>
amounts&nbsp;of&nbsp;either&nbsp;money&nbsp;or&nbsp;hp&nbsp;from&nbsp;a&nbsp;player&nbsp;until&nbsp;that&nbsp;variable&nbsp;equals&nbsp;<BR>
0&nbsp;(so&nbsp;that&nbsp;player's&nbsp;of&nbsp;higher&nbsp;levels&nbsp;would&nbsp;lose&nbsp;more).&nbsp;&nbsp;You&nbsp;might&nbsp;do&nbsp;it&nbsp;<BR>
this&nbsp;way:&nbsp;<BR>
&nbsp;&nbsp;<BR>
1&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;x;&nbsp;<BR>
2&nbsp;<BR>
3&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;=&nbsp;(int)this_player()-&gt;query_level();&nbsp;&nbsp;/*&nbsp;this&nbsp;has&nbsp;yet&nbsp;to&nbsp;be&nbsp;explained&nbsp;*/&nbsp;<BR>
4&nbsp;&nbsp;&nbsp;&nbsp;while(x&nbsp;&gt;&nbsp;0)&nbsp;{&nbsp;<BR>
5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(random(2))&nbsp;this_player()-&gt;add_money(&quot;silver&quot;,&nbsp;-random(50));&nbsp;<BR>
6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;this_player()-&gt;add_hp(-(random(10));&nbsp;<BR>
7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x--;&nbsp;<BR>
8&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<BR>
&nbsp;&nbsp;<BR>
The&nbsp;expression&nbsp;this_player()-&gt;query_level()&nbsp;calIn&nbsp;line&nbsp;4,&nbsp;we&nbsp;start&nbsp;a&nbsp;loop&nbsp;that&nbsp;executes&nbsp;so&nbsp;long&nbsp;as&nbsp;x&nbsp;is&nbsp;greater&nbsp;than&nbsp;0.&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Another&nbsp;way&nbsp;we&nbsp;could&nbsp;have&nbsp;done&nbsp;this&nbsp;line&nbsp;would&nbsp;be:&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while(x)&nbsp;{&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;The&nbsp;problem&nbsp;with&nbsp;that&nbsp;would&nbsp;be&nbsp;if&nbsp;we&nbsp;later&nbsp;made&nbsp;a&nbsp;change&nbsp;to&nbsp;the&nbsp;funtion&nbsp;<BR>
y&nbsp;anywhere&nbsp;between&nbsp;0&nbsp;and&nbsp;49&nbsp;coins.&nbsp;<BR>
In&nbsp;line&nbsp;6,&nbsp;if&nbsp;instead&nbsp;it&nbsp;returns&nbsp;0,&nbsp;we&nbsp;call&nbsp;the&nbsp;add_hp()&nbsp;function&nbsp;in&nbsp;the&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;player&nbsp;which&nbsp;reduces&nbsp;the&nbsp;player's&nbsp;hit&nbsp;points&nbsp;anywhere&nbsp;between&nbsp;0&nbsp;and&nbsp;9&nbsp;hp.&nbsp;<BR>
In&nbsp;line&nbsp;7,&nbsp;we&nbsp;reduce&nbsp;x&nbsp;by&nbsp;1.&nbsp;<BR>
At&nbsp;line&nbsp;8,&nbsp;the&nbsp;execution&nbsp;comes&nbsp;to&nbsp;the&nbsp;end&nbsp;of&nbsp;the&nbsp;while()&nbsp;instructions&nbsp;and&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;goes&nbsp;back&nbsp;up&nbsp;to&nbsp;line&nbsp;4&nbsp;to&nbsp;see&nbsp;if&nbsp;x&nbsp;is&nbsp;still&nbsp;greater&nbsp;than&nbsp;0.&nbsp;&nbsp;This&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;loop&nbsp;will&nbsp;keep&nbsp;executing&nbsp;until&nbsp;x&nbsp;is&nbsp;finally&nbsp;less&nbsp;than&nbsp;1.&nbsp;<BR>
&nbsp;&nbsp;<BR>
You&nbsp;might,&nbsp;however,&nbsp;want&nbsp;to&nbsp;test&nbsp;an&nbsp;expression&nbsp;*after*&nbsp;you&nbsp;execute&nbsp;some&nbsp;<BR>
instructions.&nbsp;&nbsp;For&nbsp;instance,&nbsp;in&nbsp;the&nbsp;above,&nbsp;if&nbsp;you&nbsp;wanted&nbsp;to&nbsp;execute&nbsp;<BR>
the&nbsp;instructions&nbsp;at&nbsp;least&nbsp;once&nbsp;for&nbsp;everyone,&nbsp;even&nbsp;if&nbsp;their&nbsp;level&nbsp;is&nbsp;<BR>
below&nbsp;the&nbsp;test&nbsp;level:&nbsp;<BR>
&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;x;&nbsp;<BR>
&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;=&nbsp;(int)this_player()-&gt;query_level();&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;do&nbsp;{&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(random(2))&nbsp;this_player()-&gt;add_money(&quot;silver&quot;,&nbsp;-random(50));&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;this_player()-&gt;add_hp(-random(10));&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x--;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;while(x&nbsp;&gt;&nbsp;0);&nbsp;<BR>
&nbsp;&nbsp;<BR>
This&nbsp;is&nbsp;a&nbsp;rather&nbsp;bizarre&nbsp;example,&nbsp;being&nbsp;as&nbsp;few&nbsp;muds&nbsp;have&nbsp;level&nbsp;0&nbsp;players.&nbsp;<BR>
And&nbsp;even&nbsp;still,&nbsp;you&nbsp;could&nbsp;have&nbsp;done&nbsp;it&nbsp;using&nbsp;the&nbsp;original&nbsp;loop&nbsp;with&nbsp;<BR>
a&nbsp;different&nbsp;test.&nbsp;&nbsp;Nevertheless,&nbsp;it&nbsp;is&nbsp;intended&nbsp;to&nbsp;show&nbsp;how&nbsp;a&nbsp;do{}&nbsp;while()&nbsp;<BR>
works.&nbsp;&nbsp;As&nbsp;you&nbsp;see,&nbsp;instead&nbsp;of&nbsp;initiating&nbsp;the&nbsp;test&nbsp;at&nbsp;the&nbsp;beginning&nbsp;of&nbsp;the&nbsp;<BR>
loop&nbsp;(which&nbsp;would&nbsp;immediately&nbsp;exclude&nbsp;some&nbsp;values&nbsp;of&nbsp;x),&nbsp;it&nbsp;tests&nbsp;after&nbsp;<BR>
the&nbsp;loop&nbsp;has&nbsp;been&nbsp;executed.&nbsp;&nbsp;This&nbsp;assures&nbsp;that&nbsp;the&nbsp;instructions&nbsp;of&nbsp;the&nbsp;loop&nbsp;<BR>
get&nbsp;executed&nbsp;at&nbsp;least&nbsp;one&nbsp;time,&nbsp;no&nbsp;matter&nbsp;what&nbsp;x&nbsp;is.&nbsp;<BR>
&nbsp;&nbsp;<BR>
7.5&nbsp;for()&nbsp;loops&nbsp;<BR>
Prototype:&nbsp;<BR>
for(initialize&nbsp;values&nbsp;;&nbsp;test&nbsp;expression&nbsp;;&nbsp;instruction)&nbsp;{&nbsp;instructions&nbsp;}&nbsp;<BR>
&nbsp;&nbsp;<BR>
initialize&nbsp;values:&nbsp;<BR>
This&nbsp;allows&nbsp;you&nbsp;to&nbsp;set&nbsp;starting&nbsp;values&nbsp;of&nbsp;variables&nbsp;which&nbsp;will&nbsp;be&nbsp;used&nbsp;<BR>
in&nbsp;the&nbsp;loop.&nbsp;&nbsp;This&nbsp;part&nbsp;is&nbsp;optional.&nbsp;<BR>
&nbsp;&nbsp;<BR>
test&nbsp;expression:&nbsp;<BR>
Same&nbsp;as&nbsp;the&nbsp;expression&nbsp;in&nbsp;if()&nbsp;and&nbsp;while().&nbsp;&nbsp;The&nbsp;loop&nbsp;is&nbsp;executed&nbsp;<BR>
as&nbsp;long&nbsp;as&nbsp;this&nbsp;expression&nbsp;(or&nbsp;expressions)&nbsp;is&nbsp;true.&nbsp;You&nbsp;must&nbsp;have&nbsp;a&nbsp;<BR>
test&nbsp;expression.&nbsp;<BR>
&nbsp;&nbsp;<BR>
instruction:&nbsp;<BR>
An&nbsp;expression&nbsp;(or&nbsp;expressions)&nbsp;which&nbsp;is&nbsp;to&nbsp;be&nbsp;executed&nbsp;at&nbsp;the&nbsp;end&nbsp;of&nbsp;each&nbsp;<BR>
loop.&nbsp;&nbsp;This&nbsp;is&nbsp;optional.&nbsp;<BR>
&nbsp;&nbsp;<BR>
Note:&nbsp;<BR>
for(;expression;)&nbsp;{}&nbsp;<BR>
IS&nbsp;EXACTLY&nbsp;THE&nbsp;SAME&nbsp;AS&nbsp;<BR>
while(expression)&nbsp;{}&nbsp;<BR>
&nbsp;&nbsp;<BR>
Example:&nbsp;<BR>
&nbsp;&nbsp;<BR>
1&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;x;&nbsp;<BR>
2&nbsp;<BR>
3&nbsp;&nbsp;&nbsp;&nbsp;for(x=&nbsp;(int)this_player()-&gt;query_level();&nbsp;x&gt;0;&nbsp;x--)&nbsp;{&nbsp;<BR>
4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(random(2))&nbsp;this_player()-&gt;add_money(&quot;silver&quot;,&nbsp;-random(50));&nbsp;<BR>
5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;this_player()-&gt;add_hp(-random(10));&nbsp;<BR>
6&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<BR>
&nbsp;&nbsp;<BR>
This&nbsp;for()&nbsp;loop&nbsp;behaves&nbsp;EXACTLY&nbsp;like&nbsp;the&nbsp;while()&nbsp;example.&nbsp;<BR>
Additionally,&nbsp;if&nbsp;you&nbsp;wanted&nbsp;to&nbsp;initialize&nbsp;2&nbsp;variables:&nbsp;<BR>
&nbsp;&nbsp;<BR>
for(x=0,&nbsp;y=random(20);&nbsp;x&lt;y;&nbsp;x++)&nbsp;{&nbsp;write(x+&quot;\n&quot;);&nbsp;}&nbsp;<BR>
&nbsp;&nbsp;<BR>
Here,&nbsp;we&nbsp;initialize&nbsp;2&nbsp;variables,&nbsp;x&nbsp;and&nbsp;y,&nbsp;and&nbsp;we&nbsp;separate&nbsp;them&nbsp;by&nbsp;a&nbsp;<BR>
comma.&nbsp;&nbsp;You&nbsp;can&nbsp;do&nbsp;the&nbsp;same&nbsp;with&nbsp;any&nbsp;of&nbsp;the&nbsp;3&nbsp;parts&nbsp;of&nbsp;the&nbsp;for()&nbsp;<BR>
expression.&nbsp;<BR>
&nbsp;&nbsp;<BR>
7.6&nbsp;The&nbsp;statement:&nbsp;switch()&nbsp;<BR>
Prototype:&nbsp;<BR>
switch(expression)&nbsp;{&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;constant:&nbsp;instructions&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;constant:&nbsp;instructions&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;...&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;constant:&nbsp;instructions&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;default:&nbsp;instructions&nbsp;<BR>
}&nbsp;<BR>
&nbsp;&nbsp;<BR>
This&nbsp;is&nbsp;functionally&nbsp;much&nbsp;like&nbsp;if()&nbsp;expressions,&nbsp;and&nbsp;much&nbsp;nicer&nbsp;to&nbsp;the&nbsp;<BR>
CPU,&nbsp;however&nbsp;most&nbsp;rarely&nbsp;used&nbsp;because&nbsp;it&nbsp;looks&nbsp;so&nbsp;damn&nbsp;complicated.&nbsp;<BR>
But&nbsp;it&nbsp;is&nbsp;not.&nbsp;<BR>
&nbsp;&nbsp;<BR>
First&nbsp;off,&nbsp;the&nbsp;expression&nbsp;is&nbsp;not&nbsp;a&nbsp;test.&nbsp;&nbsp;The&nbsp;cases&nbsp;are&nbsp;tests.&nbsp;&nbsp;A&nbsp;English&nbsp;<BR>
sounding&nbsp;way&nbsp;to&nbsp;read:&nbsp;<BR>
&nbsp;&nbsp;<BR>
1&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;x;&nbsp;<BR>
2&nbsp;<BR>
3&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;=&nbsp;random(5);&nbsp;<BR>
4&nbsp;&nbsp;&nbsp;&nbsp;switch(x)&nbsp;{&nbsp;<BR>
5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;1:&nbsp;write(&quot;X&nbsp;is&nbsp;1.\n&quot;);&nbsp;<BR>
6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;2:&nbsp;x++;&nbsp;<BR>
7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;default:&nbsp;x--;&nbsp;<BR>
8&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<BR>
9&nbsp;&nbsp;&nbsp;&nbsp;write(x+&quot;\n&quot;);&nbsp;<BR>
&nbsp;&nbsp;<BR>
is:&nbsp;<BR>
&nbsp;&nbsp;<BR>
set&nbsp;variable&nbsp;x&nbsp;to&nbsp;a&nbsp;random&nbsp;number&nbsp;between&nbsp;0&nbsp;and&nbsp;4.&nbsp;<BR>
In&nbsp;case&nbsp;1&nbsp;of&nbsp;variable&nbsp;x&nbsp;write&nbsp;its&nbsp;value&nbsp;add&nbsp;1&nbsp;to&nbsp;it&nbsp;and&nbsp;subtract&nbsp;1.&nbsp;<BR>
In&nbsp;case&nbsp;2&nbsp;of&nbsp;variable&nbsp;x,&nbsp;add&nbsp;1&nbsp;to&nbsp;its&nbsp;value&nbsp;and&nbsp;then&nbsp;subtract&nbsp;1.&nbsp;<BR>
In&nbsp;other&nbsp;cases&nbsp;subtract&nbsp;1.&nbsp;<BR>
Write&nbsp;the&nbsp;value&nbsp;of&nbsp;x.&nbsp;<BR>
&nbsp;&nbsp;<BR>
switch(x)&nbsp;basically&nbsp;tells&nbsp;the&nbsp;driver&nbsp;that&nbsp;the&nbsp;variable&nbsp;x&nbsp;is&nbsp;the&nbsp;value&nbsp;<BR>
we&nbsp;are&nbsp;trying&nbsp;to&nbsp;match&nbsp;to&nbsp;a&nbsp;case.&nbsp;<BR>
Once&nbsp;the&nbsp;driver&nbsp;finds&nbsp;a&nbsp;case&nbsp;which&nbsp;matches,&nbsp;that&nbsp;case&nbsp;*and&nbsp;all&nbsp;following&nbsp;<BR>
cases*&nbsp;will&nbsp;be&nbsp;acted&nbsp;upon.&nbsp;&nbsp;You&nbsp;may&nbsp;break&nbsp;out&nbsp;of&nbsp;the&nbsp;switch&nbsp;statement&nbsp;<BR>
as&nbsp;well&nbsp;as&nbsp;any&nbsp;other&nbsp;flow&nbsp;control&nbsp;statement&nbsp;with&nbsp;a&nbsp;break&nbsp;instruction&nbsp;in&nbsp;<BR>
order&nbsp;only&nbsp;to&nbsp;execute&nbsp;a&nbsp;single&nbsp;case.&nbsp;&nbsp;But&nbsp;that&nbsp;will&nbsp;be&nbsp;explained&nbsp;later.&nbsp;<BR>
The&nbsp;default&nbsp;statement&nbsp;is&nbsp;one&nbsp;that&nbsp;will&nbsp;be&nbsp;executed&nbsp;for&nbsp;any&nbsp;value&nbsp;of&nbsp;<BR>
x&nbsp;so&nbsp;long&nbsp;as&nbsp;the&nbsp;switch()&nbsp;flow&nbsp;has&nbsp;not&nbsp;been&nbsp;broken.&nbsp;&nbsp;You&nbsp;may&nbsp;use&nbsp;any&nbsp;<BR>
data&nbsp;type&nbsp;in&nbsp;a&nbsp;switch&nbsp;statement:&nbsp;<BR>
&nbsp;&nbsp;<BR>
string&nbsp;name;&nbsp;<BR>
&nbsp;&nbsp;<BR>
name&nbsp;=&nbsp;(string)this_player()-&gt;query_name();&nbsp;<BR>
switch(name)&nbsp;{&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;&quot;descartes&quot;:&nbsp;write(&quot;You&nbsp;borg.\n&quot;);&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;&quot;flamme&quot;:&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;&quot;forlock&quot;:&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;&quot;shadowwolf&quot;:&nbsp;write(&quot;You&nbsp;are&nbsp;a&nbsp;Nightmare&nbsp;head&nbsp;arch.\n&quot;);&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;default:&nbsp;write(&quot;You&nbsp;exist.\n&quot;);&nbsp;<BR>
}&nbsp;<BR>
&nbsp;&nbsp;<BR>
For&nbsp;me,&nbsp;I&nbsp;would&nbsp;see:&nbsp;<BR>
You&nbsp;borg.&nbsp;<BR>
You&nbsp;are&nbsp;a&nbsp;Nightmare&nbsp;head&nbsp;arch.&nbsp;<BR>
You&nbsp;exist.&nbsp;<BR>
&nbsp;&nbsp;<BR>
Flamme,&nbsp;Forlock,&nbsp;or&nbsp;Shadowwolf&nbsp;would&nbsp;see:&nbsp;<BR>
You&nbsp;are&nbsp;a&nbsp;Nightmare&nbsp;head&nbsp;arch.&nbsp;<BR>
You&nbsp;exist.&nbsp;<BR>
&nbsp;&nbsp;<BR>
Everyone&nbsp;else&nbsp;would&nbsp;see:&nbsp;<BR>
You&nbsp;exist.&nbsp;<BR>
&nbsp;&nbsp;<BR>
7.7&nbsp;Altering&nbsp;the&nbsp;flow&nbsp;of&nbsp;functions&nbsp;and&nbsp;flow&nbsp;control&nbsp;statements&nbsp;<BR>
The&nbsp;following&nbsp;instructions:&nbsp;<BR>
return&nbsp;&nbsp;&nbsp;&nbsp;continue&nbsp;&nbsp;&nbsp;&nbsp;break&nbsp;<BR>
&nbsp;&nbsp;<BR>
alter&nbsp;the&nbsp;natural&nbsp;flow&nbsp;of&nbsp;things&nbsp;as&nbsp;described&nbsp;above.&nbsp;<BR>
First&nbsp;of&nbsp;all,&nbsp;<BR>
return&nbsp;<BR>
no&nbsp;matter&nbsp;where&nbsp;it&nbsp;occurs&nbsp;in&nbsp;a&nbsp;function,&nbsp;will&nbsp;cease&nbsp;the&nbsp;execution&nbsp;of&nbsp;that&nbsp;<BR>
function&nbsp;and&nbsp;return&nbsp;control&nbsp;to&nbsp;the&nbsp;function&nbsp;which&nbsp;called&nbsp;the&nbsp;one&nbsp;the&nbsp;<BR>
return&nbsp;statement&nbsp;is&nbsp;in.&nbsp;&nbsp;If&nbsp;the&nbsp;function&nbsp;is&nbsp;NOT&nbsp;of&nbsp;type&nbsp;void,&nbsp;then&nbsp;a&nbsp;<BR>
value&nbsp;must&nbsp;follow&nbsp;the&nbsp;return&nbsp;statement,&nbsp;and&nbsp;that&nbsp;value&nbsp;must&nbsp;be&nbsp;of&nbsp;a&nbsp;<BR>
type&nbsp;matching&nbsp;the&nbsp;function.&nbsp;&nbsp;An&nbsp;absolute&nbsp;value&nbsp;function&nbsp;would&nbsp;look&nbsp;<BR>
like&nbsp;this:&nbsp;<BR>
&nbsp;&nbsp;<BR>
int&nbsp;absolute_value(int&nbsp;x)&nbsp;{&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if(x&gt;-1)&nbsp;return&nbsp;x;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;return&nbsp;-x;&nbsp;<BR>
}&nbsp;<BR>
&nbsp;&nbsp;<BR>
In&nbsp;the&nbsp;second&nbsp;line,&nbsp;the&nbsp;function&nbsp;ceases&nbsp;execution&nbsp;and&nbsp;returns&nbsp;to&nbsp;the&nbsp;calling&nbsp;<BR>
function&nbsp;because&nbsp;the&nbsp;desired&nbsp;value&nbsp;has&nbsp;been&nbsp;found&nbsp;if&nbsp;x&nbsp;is&nbsp;a&nbsp;positive&nbsp;<BR>
number.&nbsp;<BR>
&nbsp;&nbsp;<BR>
continue&nbsp;is&nbsp;most&nbsp;often&nbsp;used&nbsp;in&nbsp;for()&nbsp;and&nbsp;while&nbsp;statements.&nbsp;&nbsp;It&nbsp;serves&nbsp;<BR>
to&nbsp;stop&nbsp;the&nbsp;execution&nbsp;of&nbsp;the&nbsp;current&nbsp;loop&nbsp;and&nbsp;send&nbsp;the&nbsp;execution&nbsp;back&nbsp;<BR>
to&nbsp;the&nbsp;beginning&nbsp;of&nbsp;the&nbsp;loop.&nbsp;&nbsp;For&nbsp;instance,&nbsp;say&nbsp;you&nbsp;wanted&nbsp;to&nbsp;avoid&nbsp;<BR>
division&nbsp;by&nbsp;0:&nbsp;<BR>
&nbsp;&nbsp;<BR>
x=&nbsp;4;&nbsp;<BR>
while(&nbsp;x&nbsp;&gt;&nbsp;-5)&nbsp;{&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;x--&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if(!x)&nbsp;continue;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;write((100/x)+&quot;\n&quot;);&nbsp;<BR>
}&nbsp;<BR>
write(&quot;Done.\n&quot;)&nbsp;<BR>
&nbsp;&nbsp;<BR>
You&nbsp;would&nbsp;see&nbsp;the&nbsp;following&nbsp;output:&nbsp;<BR>
33&nbsp;<BR>
50&nbsp;<BR>
100&nbsp;<BR>
-100&nbsp;<BR>
-50&nbsp;<BR>
-33&nbsp;<BR>
-25&nbsp;<BR>
Done.&nbsp;<BR>
To&nbsp;avoid&nbsp;an&nbsp;error,&nbsp;it&nbsp;checks&nbsp;in&nbsp;each&nbsp;loop&nbsp;to&nbsp;make&nbsp;sure&nbsp;x&nbsp;is&nbsp;not&nbsp;0.&nbsp;<BR>
If&nbsp;x&nbsp;is&nbsp;zero,&nbsp;then&nbsp;it&nbsp;starts&nbsp;back&nbsp;with&nbsp;the&nbsp;test&nbsp;expression&nbsp;without&nbsp;<BR>
finishing&nbsp;its&nbsp;current&nbsp;loop.&nbsp;<BR>
&nbsp;&nbsp;<BR>
In&nbsp;a&nbsp;for()&nbsp;expression&nbsp;<BR>
&nbsp;for(x=3;&nbsp;x&gt;-5;&nbsp;x--)&nbsp;{&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if(!x)&nbsp;continue;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;write((100/x)+&quot;\n&quot;);&nbsp;<BR>
&nbsp;}&nbsp;<BR>
&nbsp;write(&quot;Done.\n&quot;);&nbsp;<BR>
It&nbsp;works&nbsp;much&nbsp;the&nbsp;same&nbsp;way.&nbsp;&nbsp;Note&nbsp;this&nbsp;gives&nbsp;exactly&nbsp;the&nbsp;same&nbsp;output&nbsp;<BR>
as&nbsp;before.&nbsp;At&nbsp;x=1,&nbsp;it&nbsp;tests&nbsp;to&nbsp;see&nbsp;if&nbsp;x&nbsp;is&nbsp;zero,&nbsp;it&nbsp;is&nbsp;not,&nbsp;so&nbsp;it&nbsp;<BR>
writes&nbsp;100/x,&nbsp;then&nbsp;goes&nbsp;back&nbsp;to&nbsp;the&nbsp;top,&nbsp;subtracts&nbsp;one&nbsp;from&nbsp;x,&nbsp;checks&nbsp;to&nbsp;<BR>
see&nbsp;if&nbsp;it&nbsp;is&nbsp;zero&nbsp;again,&nbsp;and&nbsp;it&nbsp;is&nbsp;zero,&nbsp;so&nbsp;it&nbsp;goes&nbsp;back&nbsp;to&nbsp;the&nbsp;top&nbsp;<BR>
and&nbsp;subtracts&nbsp;1&nbsp;again.&nbsp;<BR>
&nbsp;&nbsp;<BR>
break&nbsp;<BR>
This&nbsp;one&nbsp;ceases&nbsp;the&nbsp;function&nbsp;of&nbsp;a&nbsp;flow&nbsp;control&nbsp;statement.&nbsp;&nbsp;No&nbsp;matter&nbsp;<BR>
where&nbsp;you&nbsp;are&nbsp;in&nbsp;the&nbsp;statement,&nbsp;the&nbsp;control&nbsp;of&nbsp;the&nbsp;program&nbsp;will&nbsp;go&nbsp;<BR>
to&nbsp;the&nbsp;end&nbsp;of&nbsp;the&nbsp;loop.&nbsp;&nbsp;So,&nbsp;if&nbsp;in&nbsp;the&nbsp;above&nbsp;examples,&nbsp;we&nbsp;had&nbsp;<BR>
used&nbsp;break&nbsp;instead&nbsp;of&nbsp;continue,&nbsp;the&nbsp;output&nbsp;would&nbsp;have&nbsp;looked&nbsp;like&nbsp;this:&nbsp;<BR>
&nbsp;&nbsp;<BR>
33&nbsp;<BR>
50&nbsp;<BR>
100&nbsp;<BR>
Done.&nbsp;<BR>
&nbsp;&nbsp;<BR>
continue&nbsp;is&nbsp;most&nbsp;often&nbsp;used&nbsp;with&nbsp;the&nbsp;for()&nbsp;and&nbsp;while()&nbsp;statements.&nbsp;<BR>
break&nbsp;however&nbsp;is&nbsp;mostly&nbsp;used&nbsp;with&nbsp;switch()&nbsp;<BR>
&nbsp;&nbsp;<BR>
switch(name)&nbsp;{&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;&quot;descartes&quot;:&nbsp;write(&quot;You&nbsp;are&nbsp;borg.\n&quot;);&nbsp;break;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;&quot;flamme&quot;:&nbsp;write(&quot;You&nbsp;are&nbsp;flamme.\n&quot;);&nbsp;break;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;&quot;forlock&quot;:&nbsp;write(&quot;You&nbsp;are&nbsp;forlock.\n&quot;);&nbsp;break;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;&quot;shadowwolf&quot;:&nbsp;write(&quot;You&nbsp;are&nbsp;shadowwolf.\n&quot;);&nbsp;break;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;default:&nbsp;write(&quot;You&nbsp;will&nbsp;be&nbsp;assimilated.\n&quot;);&nbsp;<BR>
}&nbsp;<BR>
&nbsp;&nbsp;<BR>
This&nbsp;functions&nbsp;just&nbsp;like:&nbsp;<BR>
&nbsp;&nbsp;<BR>
if(name&nbsp;==&nbsp;&quot;descartes&quot;)&nbsp;write(&quot;You&nbsp;are&nbsp;borg.\n&quot;);&nbsp;<BR>
else&nbsp;if(name&nbsp;==&nbsp;&quot;flamme&quot;)&nbsp;write(&quot;You&nbsp;are&nbsp;flamme.\n&quot;);&nbsp;<BR>
else&nbsp;if(name&nbsp;==&nbsp;&quot;forlock&quot;)&nbsp;write(&quot;You&nbsp;are&nbsp;forlock.\n&quot;);&nbsp;<BR>
else&nbsp;if(name&nbsp;==&nbsp;&quot;shadowwolf&quot;)&nbsp;write(&quot;You&nbsp;are&nbsp;shadowwolf.\n&quot;);&nbsp;<BR>
else&nbsp;write(&quot;You&nbsp;will&nbsp;be&nbsp;assimilated.\n&quot;);&nbsp;<BR>
&nbsp;&nbsp;<BR>
except&nbsp;the&nbsp;switch&nbsp;statement&nbsp;is&nbsp;much&nbsp;better&nbsp;on&nbsp;the&nbsp;CPU.&nbsp;<BR>
If&nbsp;any&nbsp;of&nbsp;these&nbsp;are&nbsp;placed&nbsp;in&nbsp;nested&nbsp;statements,&nbsp;then&nbsp;they&nbsp;alter&nbsp;the&nbsp;<BR>
flow&nbsp;of&nbsp;the&nbsp;most&nbsp;immediate&nbsp;statement.&nbsp;<BR>
&nbsp;&nbsp;<BR>
7.8&nbsp;Chapter&nbsp;summary&nbsp;<BR>
This&nbsp;chapter&nbsp;covered&nbsp;one&nbsp;hell&nbsp;of&nbsp;a&nbsp;lot,&nbsp;but&nbsp;it&nbsp;was&nbsp;stuff&nbsp;that&nbsp;needed&nbsp;to&nbsp;<BR>
be&nbsp;seen&nbsp;all&nbsp;at&nbsp;once.&nbsp;&nbsp;You&nbsp;should&nbsp;now&nbsp;completely&nbsp;understand&nbsp;if()&nbsp;for()&nbsp;<BR>
while()&nbsp;do{}&nbsp;while()&nbsp;and&nbsp;switch(),&nbsp;as&nbsp;well&nbsp;as&nbsp;how&nbsp;to&nbsp;alter&nbsp;their&nbsp;flow&nbsp;<BR>
using&nbsp;return,&nbsp;continue,&nbsp;and&nbsp;break.&nbsp;&nbsp;Effeciency&nbsp;says&nbsp;if&nbsp;it&nbsp;can&nbsp;be&nbsp;done&nbsp;in&nbsp;<BR>
a&nbsp;natural&nbsp;way&nbsp;using&nbsp;switch()&nbsp;instead&nbsp;of&nbsp;a&nbsp;lot&nbsp;of&nbsp;if()&nbsp;else&nbsp;if()'s,&nbsp;then&nbsp;<BR>
by&nbsp;all&nbsp;means&nbsp;do&nbsp;it.&nbsp;&nbsp;You&nbsp;were&nbsp;also&nbsp;introduced&nbsp;to&nbsp;the&nbsp;idea&nbsp;of&nbsp;calling&nbsp;<BR>
functions&nbsp;in&nbsp;other&nbsp;objects.&nbsp;&nbsp;That&nbsp;however,&nbsp;is&nbsp;a&nbsp;topic&nbsp;to&nbsp;be&nbsp;detailed&nbsp;later.&nbsp;<BR>
You&nbsp;now&nbsp;should&nbsp;be&nbsp;completely&nbsp;at&nbsp;ease&nbsp;writing&nbsp;simple&nbsp;rooms&nbsp;(if&nbsp;you&nbsp;have&nbsp;<BR>
read&nbsp;your&nbsp;mudlib's&nbsp;room&nbsp;building&nbsp;document),&nbsp;simple&nbsp;monsters,&nbsp;and&nbsp;<BR>
other&nbsp;sorts&nbsp;of&nbsp;simple&nbsp;objects.&nbsp;<BR>
&nbsp;<BR>
--&nbsp;<BR>
小樓一夜聽秋雨&nbsp;<BR>
--&nbsp;<BR>
佇倚危樓風細細&nbsp;望極春愁&nbsp;黯黯生天際&nbsp;&nbsp;草色煙光殘照裡&nbsp;無言誰會憑欄意[0&nbsp;<BR>
擬把疏狂圖一醉&nbsp;對酒當歌&nbsp;強樂還無味&nbsp;&nbsp;衣帶漸寬終不悔&nbsp;為伊消得人憔悴&nbsp;<BR>
&nbsp;<BR>
※&nbsp;來源:•BBS&nbsp;水木清華站&nbsp;bbs.net.tsinghua.edu.cn•[FROM:&nbsp;166.111.5.25]&nbsp;<BR>
<A HREF="00000007.htm">上一篇</A>
<A HREF='javascript:history.go(-1)'>返回上一頁</A>
<A HREF="index.htm">回到目錄</A>
<A HREF="#top">回到頁首</A>
<A HREF="00000009.htm">下一篇</A>
</H1></CENTER>
<CENTER><H1>BBS水木清華站︰精華區</H1></CENTER>
</BODY></HTML>