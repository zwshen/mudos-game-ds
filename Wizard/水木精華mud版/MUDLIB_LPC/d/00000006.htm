<HTML>
<HEAD>
<TITLE>BBS水木清華站︰精華區</TITLE>
</HEAD>
<BODY>
<CENTER><H1>BBS水木清華站︰精華區</H1></CENTER>
<A Name="top"></a>
發信人:&nbsp;Ranma&nbsp;(亂馬~~~~~~~無聊中),&nbsp;信區:&nbsp;Mud_Builder&nbsp;<BR>
標&nbsp;&nbsp;題:&nbsp;Lpc&nbsp;basics&nbsp;(5)--The&nbsp;Basics&nbsp;of&nbsp;Inheritance&nbsp;<BR>
發信站:&nbsp;BBS&nbsp;水木清華站&nbsp;(Mon&nbsp;Oct&nbsp;20&nbsp;09:06:44&nbsp;1997)&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LPC&nbsp;Basics&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Written&nbsp;by&nbsp;Descartes&nbsp;of&nbsp;Borg&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;first&nbsp;edition:&nbsp;23&nbsp;april&nbsp;1993&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;second&nbsp;edition:&nbsp;01&nbsp;july&nbsp;1993&nbsp;<BR>
&nbsp;<BR>
CHAPTER&nbsp;5:&nbsp;The&nbsp;Basics&nbsp;of&nbsp;Inheritance&nbsp;<BR>
&nbsp;<BR>
5.1&nbsp;Review&nbsp;<BR>
You&nbsp;should&nbsp;now&nbsp;understand&nbsp;the&nbsp;basic&nbsp;workings&nbsp;of&nbsp;functions.&nbsp;&nbsp;You&nbsp;should&nbsp;be&nbsp;<BR>
able&nbsp;to&nbsp;declare&nbsp;and&nbsp;call&nbsp;one.&nbsp;&nbsp;In&nbsp;addition,&nbsp;you&nbsp;should&nbsp;be&nbsp;able&nbsp;to&nbsp;recognize&nbsp;<BR>
function&nbsp;definitions,&nbsp;although,&nbsp;if&nbsp;this&nbsp;is&nbsp;your&nbsp;first&nbsp;experience&nbsp;with&nbsp;LPC,&nbsp;<BR>
it&nbsp;is&nbsp;unlikely&nbsp;that&nbsp;you&nbsp;will&nbsp;as&nbsp;yet&nbsp;be&nbsp;able&nbsp;to&nbsp;define&nbsp;your&nbsp;own&nbsp;functions.&nbsp;<BR>
There&nbsp;functions&nbsp;form&nbsp;the&nbsp;basic&nbsp;building&nbsp;blocks&nbsp;of&nbsp;LPC&nbsp;objects.&nbsp;&nbsp;Code&nbsp;<BR>
in&nbsp;them&nbsp;is&nbsp;executed&nbsp;when&nbsp;another&nbsp;function&nbsp;makes&nbsp;a&nbsp;call&nbsp;to&nbsp;them.&nbsp;&nbsp;In&nbsp;making&nbsp;<BR>
a&nbsp;call,&nbsp;input&nbsp;is&nbsp;passed&nbsp;from&nbsp;the&nbsp;calling&nbsp;function&nbsp;into&nbsp;the&nbsp;execution&nbsp;of&nbsp;<BR>
the&nbsp;called&nbsp;one.&nbsp;&nbsp;The&nbsp;called&nbsp;function&nbsp;then&nbsp;executes&nbsp;and&nbsp;returns&nbsp;a&nbsp;value&nbsp;<BR>
of&nbsp;a&nbsp;certain&nbsp;data&nbsp;type&nbsp;to&nbsp;the&nbsp;calling&nbsp;function.&nbsp;&nbsp;Functions&nbsp;which&nbsp;return&nbsp;<BR>
no&nbsp;value&nbsp;are&nbsp;of&nbsp;type&nbsp;void.&nbsp;<BR>
&nbsp;<BR>
After&nbsp;examining&nbsp;your&nbsp;workroom&nbsp;code,&nbsp;it&nbsp;might&nbsp;look&nbsp;something&nbsp;like&nbsp;this&nbsp;<BR>
(depending&nbsp;on&nbsp;the&nbsp;mudlib):&nbsp;<BR>
&nbsp;<BR>
-----&nbsp;<BR>
inherit&nbsp;&quot;/std/room&quot;;&nbsp;<BR>
&nbsp;<BR>
void&nbsp;create()&nbsp;{&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;::create();&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;set_property(&quot;light&quot;,&nbsp;2);&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;set_property(&quot;indoors&quot;,&nbsp;1);&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;set(&quot;short&quot;,&nbsp;&quot;Descartes'&nbsp;Workroom&quot;);&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;set(&quot;long&quot;,&nbsp;&quot;This&nbsp;is&nbsp;where&nbsp;Descartes&nbsp;works.\nIt&nbsp;is&nbsp;a&nbsp;cube.\n&quot;);&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;set_exits(&nbsp;({&nbsp;&quot;/d/standard/square&quot;&nbsp;}),&nbsp;({&nbsp;&quot;square&quot;&nbsp;})&nbsp;);&nbsp;<BR>
}&nbsp;<BR>
-----&nbsp;<BR>
&nbsp;<BR>
If&nbsp;you&nbsp;understand&nbsp;the&nbsp;entire&nbsp;textbook&nbsp;to&nbsp;this&nbsp;point,&nbsp;you&nbsp;should&nbsp;recognize&nbsp;<BR>
of&nbsp;the&nbsp;code&nbsp;the&nbsp;following:&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;1)&nbsp;create()&nbsp;is&nbsp;the&nbsp;definition&nbsp;of&nbsp;a&nbsp;function&nbsp;(hey!&nbsp;he&nbsp;did&nbsp;not&nbsp;declare&nbsp;it)&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;2)&nbsp;It&nbsp;makes&nbsp;calls&nbsp;to&nbsp;set_property(),&nbsp;set(),&nbsp;and&nbsp;set_exits(),&nbsp;none&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;of&nbsp;which&nbsp;are&nbsp;declared&nbsp;or&nbsp;defined&nbsp;in&nbsp;the&nbsp;code.&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;3)&nbsp;There&nbsp;is&nbsp;a&nbsp;line&nbsp;at&nbsp;the&nbsp;top&nbsp;that&nbsp;is&nbsp;no&nbsp;variable&nbsp;or&nbsp;function&nbsp;declaration&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nor&nbsp;is&nbsp;it&nbsp;a&nbsp;function&nbsp;definition!&nbsp;<BR>
&nbsp;<BR>
This&nbsp;chapter&nbsp;will&nbsp;seek&nbsp;to&nbsp;answer&nbsp;the&nbsp;questions&nbsp;that&nbsp;should&nbsp;be&nbsp;in&nbsp;your&nbsp;head&nbsp;<BR>
at&nbsp;this&nbsp;point:&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;1)&nbsp;Why&nbsp;is&nbsp;there&nbsp;no&nbsp;declaration&nbsp;of&nbsp;create()?&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;2)&nbsp;Where&nbsp;are&nbsp;the&nbsp;functions&nbsp;set_property(),&nbsp;set(),&nbsp;and&nbsp;set_exits()&nbsp;declared&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;and&nbsp;defined?&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;3)&nbsp;What&nbsp;the&nbsp;hell&nbsp;is&nbsp;that&nbsp;line&nbsp;at&nbsp;the&nbsp;top&nbsp;of&nbsp;the&nbsp;file?&nbsp;<BR>
&nbsp;<BR>
5.2&nbsp;Object&nbsp;oriented&nbsp;programming&nbsp;<BR>
Inheritance&nbsp;is&nbsp;one&nbsp;of&nbsp;the&nbsp;properties&nbsp;which&nbsp;define&nbsp;true&nbsp;object&nbsp;oriented&nbsp;<BR>
programming&nbsp;(OOP).&nbsp;&nbsp;It&nbsp;allows&nbsp;you&nbsp;to&nbsp;create&nbsp;generic&nbsp;code&nbsp;which&nbsp;can&nbsp;be&nbsp;used&nbsp;<BR>
in&nbsp;many&nbsp;different&nbsp;ways&nbsp;by&nbsp;many&nbsp;different&nbsp;programs.&nbsp;&nbsp;What&nbsp;a&nbsp;mudlib&nbsp;does&nbsp;is&nbsp;<BR>
create&nbsp;these&nbsp;generalized&nbsp;files&nbsp;(objects)&nbsp;which&nbsp;you&nbsp;use&nbsp;to&nbsp;make&nbsp;very&nbsp;specific&nbsp;<BR>
objects.&nbsp;<BR>
&nbsp;<BR>
If&nbsp;you&nbsp;had&nbsp;to&nbsp;write&nbsp;the&nbsp;code&nbsp;necessary&nbsp;for&nbsp;you&nbsp;to&nbsp;define&nbsp;the&nbsp;workroom&nbsp;above,&nbsp;<BR>
you&nbsp;would&nbsp;have&nbsp;to&nbsp;write&nbsp;about&nbsp;1000&nbsp;lines&nbsp;of&nbsp;code&nbsp;to&nbsp;get&nbsp;all&nbsp;the&nbsp;functionality&nbsp;<BR>
of&nbsp;the&nbsp;room&nbsp;above.&nbsp;&nbsp;Clearly&nbsp;that&nbsp;is&nbsp;a&nbsp;waste&nbsp;of&nbsp;disk&nbsp;space.&nbsp;&nbsp;In&nbsp;addition,&nbsp;<BR>
such&nbsp;code&nbsp;does&nbsp;not&nbsp;interact&nbsp;well&nbsp;with&nbsp;players&nbsp;and&nbsp;other&nbsp;rooms&nbsp;since&nbsp;every&nbsp;<BR>
creator&nbsp;is&nbsp;making&nbsp;up&nbsp;his&nbsp;or&nbsp;her&nbsp;own&nbsp;functions&nbsp;to&nbsp;perform&nbsp;the&nbsp;functionality&nbsp;<BR>
of&nbsp;a&nbsp;room.&nbsp;&nbsp;Thus,&nbsp;what&nbsp;you&nbsp;might&nbsp;use&nbsp;to&nbsp;write&nbsp;out&nbsp;the&nbsp;room's&nbsp;long&nbsp;description,&nbsp;<BR>
query_long(),&nbsp;another&nbsp;wizard&nbsp;might&nbsp;be&nbsp;calling&nbsp;long().&nbsp;&nbsp;This&nbsp;is&nbsp;the&nbsp;primary&nbsp;<BR>
reason&nbsp;mudlibs&nbsp;are&nbsp;not&nbsp;compatible,&nbsp;since&nbsp;they&nbsp;use&nbsp;different&nbsp;protocols&nbsp;for&nbsp;<BR>
object&nbsp;interaction.&nbsp;<BR>
&nbsp;<BR>
OOP&nbsp;overcomes&nbsp;these&nbsp;problems.&nbsp;&nbsp;In&nbsp;the&nbsp;above&nbsp;workroom,&nbsp;you&nbsp;inherit&nbsp;the&nbsp;<BR>
functions&nbsp;already&nbsp;defined&nbsp;in&nbsp;a&nbsp;file&nbsp;called&nbsp;&quot;/std/room.c&quot;.&nbsp;&nbsp;It&nbsp;has&nbsp;all&nbsp;<BR>
the&nbsp;functions&nbsp;which&nbsp;are&nbsp;commonly&nbsp;needed&nbsp;by&nbsp;all&nbsp;rooms&nbsp;defined&nbsp;in&nbsp;it.&nbsp;&nbsp;When&nbsp;<BR>
you&nbsp;get&nbsp;to&nbsp;make&nbsp;a&nbsp;specific&nbsp;room,&nbsp;you&nbsp;are&nbsp;taking&nbsp;the&nbsp;general&nbsp;functionality&nbsp;<BR>
of&nbsp;that&nbsp;room&nbsp;file&nbsp;and&nbsp;making&nbsp;a&nbsp;unique&nbsp;room&nbsp;by&nbsp;adding&nbsp;your&nbsp;own&nbsp;function,&nbsp;<BR>
create().&nbsp;<BR>
&nbsp;<BR>
5.3&nbsp;How&nbsp;inheritance&nbsp;works&nbsp;<BR>
As&nbsp;you&nbsp;might&nbsp;have&nbsp;guessed&nbsp;by&nbsp;now,&nbsp;the&nbsp;line:&nbsp;<BR>
&nbsp;<BR>
-----&nbsp;<BR>
inherit&nbsp;&quot;/std/room&quot;;&nbsp;<BR>
-----&nbsp;<BR>
&nbsp;<BR>
has&nbsp;you&nbsp;inherit&nbsp;the&nbsp;functionality&nbsp;of&nbsp;the&nbsp;room&nbsp;&quot;/std/room.c&quot;.&nbsp;&nbsp;By&nbsp;inheriting&nbsp;<BR>
the&nbsp;functionality,&nbsp;it&nbsp;means&nbsp;that&nbsp;you&nbsp;can&nbsp;use&nbsp;the&nbsp;functions&nbsp;which&nbsp;have&nbsp;<BR>
been&nbsp;declared&nbsp;and&nbsp;defined&nbsp;in&nbsp;the&nbsp;file&nbsp;&quot;/std/room.c&quot;&nbsp;&nbsp;In&nbsp;the&nbsp;Nightmare&nbsp;Mudlib,&nbsp;<BR>
&quot;/std/room.c&quot;&nbsp;has,&nbsp;among&nbsp;other&nbsp;functions,&nbsp;set_property(),&nbsp;set(),&nbsp;and&nbsp;<BR>
set_exits()&nbsp;declared&nbsp;and&nbsp;defined.&nbsp;&nbsp;In&nbsp;your&nbsp;function&nbsp;create(),&nbsp;you&nbsp;are&nbsp;<BR>
making&nbsp;calls&nbsp;to&nbsp;those&nbsp;functions&nbsp;in&nbsp;order&nbsp;to&nbsp;set&nbsp;values&nbsp;you&nbsp;want&nbsp;your&nbsp;<BR>
room&nbsp;to&nbsp;start&nbsp;with.&nbsp;&nbsp;These&nbsp;values&nbsp;make&nbsp;your&nbsp;room&nbsp;different&nbsp;from&nbsp;others,&nbsp;yet&nbsp;<BR>
able&nbsp;to&nbsp;interact&nbsp;well&nbsp;with&nbsp;other&nbsp;objects&nbsp;in&nbsp;memory.&nbsp;<BR>
&nbsp;<BR>
In&nbsp;actual&nbsp;practice,&nbsp;each&nbsp;mudlib&nbsp;is&nbsp;different,&nbsp;and&nbsp;thus&nbsp;requires&nbsp;you&nbsp;to&nbsp;use&nbsp;<BR>
a&nbsp;different&nbsp;set&nbsp;of&nbsp;standard&nbsp;functions,&nbsp;often&nbsp;to&nbsp;do&nbsp;the&nbsp;same&nbsp;thing.&nbsp;&nbsp;It&nbsp;is&nbsp;<BR>
therefore&nbsp;beyond&nbsp;the&nbsp;scope&nbsp;of&nbsp;this&nbsp;textbook&nbsp;even&nbsp;to&nbsp;describe&nbsp;what&nbsp;<BR>
functions&nbsp;exist&nbsp;and&nbsp;what&nbsp;they&nbsp;do.&nbsp;&nbsp;If&nbsp;your&nbsp;mudlib&nbsp;is&nbsp;well&nbsp;documented,&nbsp;<BR>
however,&nbsp;then&nbsp;(probably&nbsp;in&nbsp;/doc/build)&nbsp;you&nbsp;will&nbsp;have&nbsp;tutorials&nbsp;on&nbsp;how&nbsp;<BR>
to&nbsp;use&nbsp;the&nbsp;inheritable&nbsp;files&nbsp;to&nbsp;create&nbsp;such&nbsp;objects.&nbsp;&nbsp;These&nbsp;tutorials&nbsp;<BR>
should&nbsp;tell&nbsp;you&nbsp;what&nbsp;functions&nbsp;exist,&nbsp;what&nbsp;input&nbsp;they&nbsp;take,&nbsp;the&nbsp;data&nbsp;<BR>
type&nbsp;of&nbsp;their&nbsp;output,&nbsp;and&nbsp;what&nbsp;they&nbsp;do.&nbsp;<BR>
&nbsp;<BR>
5.4&nbsp;Chapter&nbsp;summary&nbsp;<BR>
This&nbsp;is&nbsp;far&nbsp;from&nbsp;a&nbsp;complete&nbsp;explanation&nbsp;of&nbsp;the&nbsp;complex&nbsp;subject&nbsp;of&nbsp;inheritance.&nbsp;<BR>
The&nbsp;idea&nbsp;here&nbsp;is&nbsp;for&nbsp;you&nbsp;to&nbsp;be&nbsp;able&nbsp;to&nbsp;understand&nbsp;how&nbsp;to&nbsp;use&nbsp;inheritance&nbsp;in&nbsp;<BR>
creating&nbsp;your&nbsp;objects.&nbsp;&nbsp;A&nbsp;full&nbsp;discussion&nbsp;will&nbsp;follow&nbsp;in&nbsp;a&nbsp;later&nbsp;textbook.&nbsp;<BR>
Right&nbsp;now&nbsp;you&nbsp;should&nbsp;know&nbsp;the&nbsp;following:&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;1)&nbsp;Each&nbsp;mudlib&nbsp;has&nbsp;a&nbsp;library&nbsp;of&nbsp;generic&nbsp;objects&nbsp;with&nbsp;their&nbsp;own&nbsp;general&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;functions&nbsp;used&nbsp;by&nbsp;creators&nbsp;through&nbsp;inheritance&nbsp;to&nbsp;make&nbsp;coding&nbsp;objects&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;easier&nbsp;and&nbsp;to&nbsp;make&nbsp;interaction&nbsp;between&nbsp;objects&nbsp;smoother.&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;2)&nbsp;The&nbsp;functions&nbsp;in&nbsp;the&nbsp;inheritable&nbsp;files&nbsp;of&nbsp;a&nbsp;mudlib&nbsp;vary&nbsp;from&nbsp;mudlib&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;to&nbsp;mudlib.&nbsp;&nbsp;There&nbsp;should&nbsp;exist&nbsp;documentation&nbsp;on&nbsp;your&nbsp;mud&nbsp;on&nbsp;how&nbsp;to&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;use&nbsp;each&nbsp;inheritable&nbsp;file.&nbsp;&nbsp;If&nbsp;you&nbsp;are&nbsp;unaware&nbsp;what&nbsp;functions&nbsp;are&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;available,&nbsp;then&nbsp;there&nbsp;is&nbsp;simply&nbsp;no&nbsp;way&nbsp;for&nbsp;you&nbsp;to&nbsp;use&nbsp;them.&nbsp;&nbsp;Always&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pay&nbsp;special&nbsp;attention&nbsp;to&nbsp;the&nbsp;data&nbsp;types&nbsp;of&nbsp;the&nbsp;input&nbsp;and&nbsp;the&nbsp;data&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;types&nbsp;of&nbsp;ay&nbsp;output.&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;3)&nbsp;You&nbsp;inherit&nbsp;the&nbsp;functionality&nbsp;of&nbsp;another&nbsp;object&nbsp;through&nbsp;the&nbsp;line:&nbsp;<BR>
&nbsp;<BR>
-----&nbsp;<BR>
inherit&nbsp;&quot;filename&quot;;&nbsp;<BR>
-----&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;where&nbsp;filename&nbsp;is&nbsp;the&nbsp;name&nbsp;of&nbsp;the&nbsp;file&nbsp;of&nbsp;the&nbsp;object&nbsp;to&nbsp;be&nbsp;inherited.&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This&nbsp;line&nbsp;goes&nbsp;at&nbsp;the&nbsp;beginning&nbsp;of&nbsp;your&nbsp;code.&nbsp;<BR>
&nbsp;<BR>
Note:&nbsp;<BR>
You&nbsp;may&nbsp;see&nbsp;the&nbsp;syntax&nbsp;::create()&nbsp;or&nbsp;::init()&nbsp;or&nbsp;::reset()&nbsp;in&nbsp;places.&nbsp;<BR>
You&nbsp;do&nbsp;not&nbsp;need&nbsp;fully&nbsp;to&nbsp;understand&nbsp;at&nbsp;this&nbsp;point&nbsp;the&nbsp;full&nbsp;nuances&nbsp;of&nbsp;this,&nbsp;<BR>
but&nbsp;you&nbsp;should&nbsp;have&nbsp;a&nbsp;clue&nbsp;as&nbsp;to&nbsp;what&nbsp;it&nbsp;is.&nbsp;The&nbsp;&quot;::&quot;&nbsp;operator&nbsp;is&nbsp;a&nbsp;way&nbsp;<BR>
to&nbsp;call&nbsp;a&nbsp;function&nbsp;specifically&nbsp;in&nbsp;an&nbsp;inherited&nbsp;object&nbsp;(called&nbsp;the&nbsp;scope&nbsp;<BR>
resolution&nbsp;operator).&nbsp;&nbsp;For&nbsp;instance,&nbsp;most&nbsp;muds'&nbsp;room.c&nbsp;has&nbsp;a&nbsp;function&nbsp;<BR>
called&nbsp;create().&nbsp;&nbsp;When&nbsp;you&nbsp;inherit&nbsp;room.c&nbsp;and&nbsp;configure&nbsp;it,&nbsp;you&nbsp;are&nbsp;doing&nbsp;<BR>
what&nbsp;is&nbsp;called&nbsp;overriding&nbsp;the&nbsp;create()&nbsp;function&nbsp;in&nbsp;room.c.&nbsp;&nbsp;This&nbsp;means&nbsp;<BR>
that&nbsp;whenever&nbsp;ANYTHING&nbsp;calls&nbsp;create(),&nbsp;it&nbsp;will&nbsp;call&nbsp;*your*&nbsp;version&nbsp;and&nbsp;not&nbsp;<BR>
the&nbsp;one&nbsp;in&nbsp;room.c.&nbsp;&nbsp;However,&nbsp;there&nbsp;may&nbsp;be&nbsp;important&nbsp;stuff&nbsp;in&nbsp;the&nbsp;room.c&nbsp;<BR>
version&nbsp;of&nbsp;create().&nbsp;&nbsp;The&nbsp;::&nbsp;operator&nbsp;allows&nbsp;you&nbsp;to&nbsp;call&nbsp;the&nbsp;create()&nbsp;in&nbsp;<BR>
room.c&nbsp;instead&nbsp;of&nbsp;your&nbsp;create().&nbsp;<BR>
An&nbsp;example:&nbsp;<BR>
&nbsp;<BR>
-----&nbsp;<BR>
#1&nbsp;<BR>
&nbsp;<BR>
inherit&nbsp;&quot;/std/room&quot;;&nbsp;<BR>
&nbsp;<BR>
void&nbsp;create()&nbsp;{&nbsp;create();&nbsp;}&nbsp;<BR>
-----&nbsp;<BR>
&nbsp;<BR>
-----&nbsp;<BR>
#2&nbsp;<BR>
&nbsp;<BR>
inherit&nbsp;&quot;/std/room&quot;;&nbsp;<BR>
&nbsp;<BR>
void&nbsp;create()&nbsp;{&nbsp;::create();&nbsp;}&nbsp;<BR>
-----&nbsp;<BR>
&nbsp;<BR>
Example&nbsp;1&nbsp;is&nbsp;a&nbsp;horror.&nbsp;&nbsp;When&nbsp;loaded,&nbsp;the&nbsp;driver&nbsp;calls&nbsp;create(),&nbsp;and&nbsp;then&nbsp;<BR>
create()&nbsp;calls&nbsp;create(),&nbsp;which&nbsp;calls&nbsp;create(),&nbsp;which&nbsp;calls&nbsp;create()...&nbsp;<BR>
In&nbsp;other&nbsp;words,&nbsp;all&nbsp;create()&nbsp;does&nbsp;is&nbsp;keep&nbsp;calling&nbsp;itself&nbsp;until&nbsp;the&nbsp;driver&nbsp;<BR>
detects&nbsp;a&nbsp;too&nbsp;deep&nbsp;recursion&nbsp;and&nbsp;exits.&nbsp;<BR>
&nbsp;<BR>
Example&nbsp;2&nbsp;is&nbsp;basically&nbsp;just&nbsp;a&nbsp;waste&nbsp;of&nbsp;RAM,&nbsp;as&nbsp;it&nbsp;is&nbsp;no&nbsp;different&nbsp;from&nbsp;room.c&nbsp;<BR>
functionally.&nbsp;&nbsp;With&nbsp;it,&nbsp;the&nbsp;driver&nbsp;calls&nbsp;its&nbsp;create(),&nbsp;which&nbsp;in&nbsp;turn&nbsp;calls&nbsp;<BR>
︰<I>:create(),&nbsp;the&nbsp;create()&nbsp;in&nbsp;room.c.&nbsp;&nbsp;Otherwise&nbsp;it&nbsp;is&nbsp;functionally&nbsp;</I><BR>
exactly&nbsp;the&nbsp;same&nbsp;as&nbsp;room.c.&nbsp;<BR>
&nbsp;<BR>
--&nbsp;<BR>
小樓一夜聽秋雨&nbsp;<BR>
--&nbsp;<BR>
佇倚危樓風細細&nbsp;望極春愁&nbsp;黯黯生天際&nbsp;&nbsp;草色煙光殘照裡&nbsp;無言誰會憑欄意[0&nbsp;<BR>
擬把疏狂圖一醉&nbsp;對酒當歌&nbsp;強樂還無味&nbsp;&nbsp;衣帶漸寬終不悔&nbsp;為伊消得人憔悴&nbsp;<BR>
&nbsp;<BR>
※&nbsp;來源:•BBS&nbsp;水木清華站&nbsp;bbs.net.tsinghua.edu.cn•[FROM:&nbsp;166.111.5.25]&nbsp;<BR>
<A HREF="00000005.htm">上一篇</A>
<A HREF='javascript:history.go(-1)'>返回上一頁</A>
<A HREF="index.htm">回到目錄</A>
<A HREF="#top">回到頁首</A>
<A HREF="00000007.htm">下一篇</A>
</H1></CENTER>
<CENTER><H1>BBS水木清華站︰精華區</H1></CENTER>
</BODY></HTML>