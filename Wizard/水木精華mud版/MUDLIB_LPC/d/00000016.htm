<HTML>
<HEAD>
<TITLE>BBS水木清華站︰精華區</TITLE>
</HEAD>
<BODY>
<CENTER><H1>BBS水木清華站︰精華區</H1></CENTER>
<A Name="top"></a>
發信人:&nbsp;Ranma&nbsp;(亂馬~~~~~~~無聊中),&nbsp;信區:&nbsp;Mud_Builder&nbsp;<BR>
標&nbsp;&nbsp;題:&nbsp;Lpc&nbsp;intermediate&nbsp;(5)--Advanced&nbsp;String&nbsp;Handling&nbsp;<BR>
發信站:&nbsp;BBS&nbsp;水木清華站&nbsp;(Mon&nbsp;Oct&nbsp;20&nbsp;09:21:52&nbsp;1997)&nbsp;<BR>
&nbsp;<BR>
Intermediate&nbsp;LPC&nbsp;<BR>
Descartes&nbsp;of&nbsp;Borg&nbsp;<BR>
November&nbsp;1993&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chapter&nbsp;5:&nbsp;Advanced&nbsp;String&nbsp;Handling&nbsp;<BR>
&nbsp;<BR>
5.1&nbsp;What&nbsp;a&nbsp;String&nbsp;Is&nbsp;<BR>
The&nbsp;LPC&nbsp;Basics&nbsp;textbook&nbsp;taught&nbsp;strings&nbsp;as&nbsp;simple&nbsp;data&nbsp;types.&nbsp;&nbsp;LPC&nbsp;<BR>
generally&nbsp;deals&nbsp;with&nbsp;strings&nbsp;in&nbsp;such&nbsp;a&nbsp;matter.&nbsp;&nbsp;The&nbsp;underlying&nbsp;driver&nbsp;<BR>
program,&nbsp;however,&nbsp;is&nbsp;written&nbsp;in&nbsp;C,&nbsp;which&nbsp;has&nbsp;no&nbsp;string&nbsp;data&nbsp;type.&nbsp;&nbsp;The&nbsp;<BR>
driver&nbsp;in&nbsp;fact&nbsp;sees&nbsp;strings&nbsp;as&nbsp;a&nbsp;complex&nbsp;data&nbsp;type&nbsp;made&nbsp;up&nbsp;of&nbsp;an&nbsp;array&nbsp;of&nbsp;<BR>
characters,&nbsp;a&nbsp;simple&nbsp;C&nbsp;data&nbsp;type.&nbsp;&nbsp;LPC,&nbsp;on&nbsp;the&nbsp;other&nbsp;hand&nbsp;does&nbsp;not&nbsp;<BR>
recognize&nbsp;a&nbsp;character&nbsp;data&nbsp;type&nbsp;(there&nbsp;may&nbsp;actually&nbsp;be&nbsp;a&nbsp;driver&nbsp;or&nbsp;two&nbsp;out&nbsp;<BR>
there&nbsp;which&nbsp;do&nbsp;recognize&nbsp;the&nbsp;character&nbsp;as&nbsp;a&nbsp;data&nbsp;type,&nbsp;but&nbsp;in&nbsp;general&nbsp;not).&nbsp;&nbsp;<BR>
The&nbsp;net&nbsp;effect&nbsp;is&nbsp;that&nbsp;there&nbsp;are&nbsp;some&nbsp;array-like&nbsp;things&nbsp;you&nbsp;can&nbsp;do&nbsp;with&nbsp;<BR>
strings&nbsp;that&nbsp;you&nbsp;cannot&nbsp;do&nbsp;with&nbsp;other&nbsp;LPC&nbsp;data&nbsp;types.&nbsp;<BR>
&nbsp;<BR>
The&nbsp;first&nbsp;efun&nbsp;regarding&nbsp;strings&nbsp;you&nbsp;should&nbsp;learn&nbsp;is&nbsp;the&nbsp;strlen()&nbsp;efun.&nbsp;&nbsp;<BR>
This&nbsp;efun&nbsp;returns&nbsp;the&nbsp;length&nbsp;in&nbsp;characters&nbsp;of&nbsp;an&nbsp;LPC&nbsp;string,&nbsp;and&nbsp;is&nbsp;thus&nbsp;<BR>
the&nbsp;string&nbsp;equivalent&nbsp;to&nbsp;sizeof()&nbsp;for&nbsp;arrays.&nbsp;&nbsp;Just&nbsp;from&nbsp;the&nbsp;behaviour&nbsp;of&nbsp;<BR>
this&nbsp;efun,&nbsp;you&nbsp;can&nbsp;see&nbsp;that&nbsp;the&nbsp;driver&nbsp;treats&nbsp;a&nbsp;string&nbsp;as&nbsp;if&nbsp;it&nbsp;were&nbsp;made&nbsp;up&nbsp;<BR>
of&nbsp;smaller&nbsp;elements.&nbsp;&nbsp;In&nbsp;this&nbsp;chapter,&nbsp;you&nbsp;will&nbsp;learn&nbsp;how&nbsp;to&nbsp;deal&nbsp;with&nbsp;<BR>
strings&nbsp;on&nbsp;a&nbsp;more&nbsp;basic&nbsp;level,&nbsp;as&nbsp;characters&nbsp;and&nbsp;sub&nbsp;strings.&nbsp;<BR>
&nbsp;<BR>
5.2&nbsp;Strings&nbsp;as&nbsp;Character&nbsp;Arrays&nbsp;<BR>
You&nbsp;can&nbsp;do&nbsp;nearly&nbsp;anything&nbsp;with&nbsp;strings&nbsp;that&nbsp;you&nbsp;can&nbsp;do&nbsp;with&nbsp;arrays,&nbsp;<BR>
except&nbsp;assign&nbsp;values&nbsp;on&nbsp;a&nbsp;character&nbsp;basis.&nbsp;&nbsp;At&nbsp;the&nbsp;most&nbsp;basic,&nbsp;you&nbsp;can&nbsp;<BR>
actually&nbsp;refer&nbsp;to&nbsp;character&nbsp;constants&nbsp;by&nbsp;enclosing&nbsp;them&nbsp;in&nbsp;''&nbsp;(single&nbsp;<BR>
quotes).&nbsp;&nbsp;'a'&nbsp;and&nbsp;&quot;a&quot;&nbsp;are&nbsp;therefore&nbsp;very&nbsp;different&nbsp;things&nbsp;in&nbsp;LPC.&nbsp;&nbsp;'a'&nbsp;<BR>
represents&nbsp;a&nbsp;character&nbsp;which&nbsp;cannot&nbsp;be&nbsp;used&nbsp;in&nbsp;assignment&nbsp;statements&nbsp;or&nbsp;<BR>
any&nbsp;other&nbsp;operations&nbsp;except&nbsp;comparison&nbsp;evaluations.&nbsp;&nbsp;&quot;a&quot;&nbsp;on&nbsp;the&nbsp;other&nbsp;<BR>
hand&nbsp;is&nbsp;a&nbsp;string&nbsp;made&nbsp;up&nbsp;of&nbsp;a&nbsp;single&nbsp;character.&nbsp;&nbsp;You&nbsp;can&nbsp;add&nbsp;and&nbsp;subtract&nbsp;<BR>
other&nbsp;strings&nbsp;to&nbsp;it&nbsp;and&nbsp;assign&nbsp;it&nbsp;as&nbsp;a&nbsp;value&nbsp;to&nbsp;a&nbsp;variable.&nbsp;<BR>
&nbsp;<BR>
With&nbsp;string&nbsp;variables,&nbsp;you&nbsp;can&nbsp;access&nbsp;the&nbsp;individual&nbsp;characters&nbsp;to&nbsp;run&nbsp;<BR>
comparisons&nbsp;against&nbsp;character&nbsp;constants&nbsp;using&nbsp;exactly&nbsp;the&nbsp;same&nbsp;syntax&nbsp;<BR>
that&nbsp;is&nbsp;used&nbsp;with&nbsp;arrays.&nbsp;&nbsp;In&nbsp;other&nbsp;words,&nbsp;the&nbsp;statement:&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if(str[2]&nbsp;==&nbsp;'a')&nbsp;<BR>
is&nbsp;a&nbsp;valid&nbsp;LPC&nbsp;statement&nbsp;comparing&nbsp;the&nbsp;second&nbsp;character&nbsp;in&nbsp;the&nbsp;str&nbsp;string&nbsp;<BR>
to&nbsp;the&nbsp;character&nbsp;'a'.&nbsp;&nbsp;You&nbsp;have&nbsp;to&nbsp;be&nbsp;very&nbsp;careful&nbsp;that&nbsp;you&nbsp;are&nbsp;not&nbsp;<BR>
comparing&nbsp;elements&nbsp;of&nbsp;arrays&nbsp;to&nbsp;characters,&nbsp;nor&nbsp;are&nbsp;you&nbsp;comparing&nbsp;<BR>
characters&nbsp;of&nbsp;strings&nbsp;to&nbsp;strings.&nbsp;<BR>
&nbsp;<BR>
LPC&nbsp;also&nbsp;allows&nbsp;you&nbsp;to&nbsp;access&nbsp;several&nbsp;characters&nbsp;together&nbsp;using&nbsp;LPC's&nbsp;<BR>
range&nbsp;operator&nbsp;..:&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if(str[0..1]&nbsp;==&nbsp;&quot;ab&quot;)&nbsp;<BR>
In&nbsp;other&nbsp;words,&nbsp;you&nbsp;can&nbsp;look&nbsp;for&nbsp;the&nbsp;string&nbsp;which&nbsp;is&nbsp;formed&nbsp;by&nbsp;the&nbsp;<BR>
characters&nbsp;0&nbsp;through&nbsp;1&nbsp;in&nbsp;the&nbsp;string&nbsp;str.&nbsp;&nbsp;As&nbsp;with&nbsp;arrays,&nbsp;you&nbsp;must&nbsp;be&nbsp;<BR>
careful&nbsp;when&nbsp;using&nbsp;indexing&nbsp;or&nbsp;range&nbsp;operators&nbsp;so&nbsp;that&nbsp;you&nbsp;do&nbsp;not&nbsp;try&nbsp;to&nbsp;<BR>
reference&nbsp;an&nbsp;index&nbsp;number&nbsp;larger&nbsp;than&nbsp;the&nbsp;last&nbsp;index.&nbsp;&nbsp;Doing&nbsp;so&nbsp;will&nbsp;<BR>
result&nbsp;in&nbsp;an&nbsp;error.&nbsp;<BR>
&nbsp;<BR>
Now&nbsp;you&nbsp;can&nbsp;see&nbsp;a&nbsp;couple&nbsp;of&nbsp;similarities&nbsp;between&nbsp;strings&nbsp;and&nbsp;arrays:&nbsp;<BR>
1)&nbsp;You&nbsp;may&nbsp;index&nbsp;on&nbsp;both&nbsp;to&nbsp;access&nbsp;the&nbsp;values&nbsp;of&nbsp;individual&nbsp;elements.&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a)&nbsp;The&nbsp;individual&nbsp;elements&nbsp;of&nbsp;strings&nbsp;are&nbsp;characters&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b)&nbsp;The&nbsp;individual&nbsp;elements&nbsp;of&nbsp;arrays&nbsp;match&nbsp;the&nbsp;data&nbsp;type&nbsp;of&nbsp;the&nbsp;<BR>
array.&nbsp;<BR>
2)&nbsp;You&nbsp;may&nbsp;operate&nbsp;on&nbsp;a&nbsp;range&nbsp;of&nbsp;values&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a)&nbsp;Ex:&nbsp;&quot;abcdef&quot;[1..3]&nbsp;is&nbsp;the&nbsp;string&nbsp;&quot;bcd&quot;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b)&nbsp;Ex:&nbsp;({&nbsp;1,&nbsp;2,&nbsp;3,&nbsp;4,&nbsp;5&nbsp;})[1..3]&nbsp;is&nbsp;the&nbsp;int&nbsp;array&nbsp;({&nbsp;2,&nbsp;3,&nbsp;4&nbsp;})&nbsp;<BR>
&nbsp;<BR>
And&nbsp;of&nbsp;course,&nbsp;you&nbsp;should&nbsp;always&nbsp;keep&nbsp;in&nbsp;mind&nbsp;the&nbsp;fundamental&nbsp;<BR>
difference:&nbsp;a&nbsp;string&nbsp;is&nbsp;not&nbsp;made&nbsp;up&nbsp;of&nbsp;a&nbsp;more&nbsp;fundamental&nbsp;LPC&nbsp;data&nbsp;type.&nbsp;&nbsp;<BR>
In&nbsp;other&nbsp;words,&nbsp;you&nbsp;may&nbsp;not&nbsp;act&nbsp;on&nbsp;the&nbsp;individual&nbsp;characters&nbsp;by&nbsp;<BR>
assigning&nbsp;them&nbsp;values.&nbsp;<BR>
&nbsp;<BR>
5.3&nbsp;The&nbsp;Efun&nbsp;sscanf()&nbsp;<BR>
You&nbsp;cannot&nbsp;do&nbsp;any&nbsp;decent&nbsp;string&nbsp;handling&nbsp;in&nbsp;LPC&nbsp;without&nbsp;using&nbsp;<BR>
sscanf().&nbsp;&nbsp;Without&nbsp;it,&nbsp;you&nbsp;are&nbsp;left&nbsp;trying&nbsp;to&nbsp;play&nbsp;with&nbsp;the&nbsp;full&nbsp;strings&nbsp;<BR>
passed&nbsp;by&nbsp;command&nbsp;statements&nbsp;to&nbsp;the&nbsp;command&nbsp;functions.&nbsp;&nbsp;In&nbsp;other&nbsp;<BR>
words,&nbsp;you&nbsp;could&nbsp;not&nbsp;handle&nbsp;a&nbsp;command&nbsp;like:&nbsp;&quot;give&nbsp;sword&nbsp;to&nbsp;leo&quot;,&nbsp;since&nbsp;<BR>
you&nbsp;would&nbsp;have&nbsp;no&nbsp;way&nbsp;of&nbsp;separating&nbsp;&quot;sword&nbsp;to&nbsp;leo&quot;&nbsp;into&nbsp;its&nbsp;constituent&nbsp;<BR>
parts.&nbsp;&nbsp;Commands&nbsp;such&nbsp;as&nbsp;these&nbsp;therefore&nbsp;use&nbsp;this&nbsp;efun&nbsp;in&nbsp;order&nbsp;to&nbsp;use&nbsp;<BR>
commands&nbsp;with&nbsp;multiple&nbsp;arguments&nbsp;or&nbsp;to&nbsp;make&nbsp;commands&nbsp;more&nbsp;<BR>
&quot;English-like&quot;.&nbsp;<BR>
&nbsp;<BR>
Most&nbsp;people&nbsp;find&nbsp;the&nbsp;manual&nbsp;entries&nbsp;for&nbsp;sscanf()&nbsp;to&nbsp;be&nbsp;rather&nbsp;difficult&nbsp;<BR>
reading.&nbsp;&nbsp;The&nbsp;function&nbsp;does&nbsp;not&nbsp;lend&nbsp;itself&nbsp;well&nbsp;to&nbsp;the&nbsp;format&nbsp;used&nbsp;by&nbsp;<BR>
manual&nbsp;entries.&nbsp;&nbsp;As&nbsp;I&nbsp;said&nbsp;above,&nbsp;the&nbsp;function&nbsp;is&nbsp;used&nbsp;to&nbsp;take&nbsp;a&nbsp;string&nbsp;and&nbsp;<BR>
break&nbsp;it&nbsp;into&nbsp;usable&nbsp;parts.&nbsp;&nbsp;Technically&nbsp;it&nbsp;is&nbsp;supposed&nbsp;to&nbsp;take&nbsp;a&nbsp;string&nbsp;and&nbsp;<BR>
scan&nbsp;it&nbsp;into&nbsp;one&nbsp;or&nbsp;more&nbsp;variables&nbsp;of&nbsp;varying&nbsp;types.&nbsp;&nbsp;Take&nbsp;the&nbsp;example&nbsp;<BR>
above:&nbsp;<BR>
&nbsp;<BR>
int&nbsp;give(string&nbsp;str)&nbsp;{&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;string&nbsp;what,&nbsp;whom;&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if(!str)&nbsp;return&nbsp;notify_fail(&quot;Give&nbsp;what&nbsp;to&nbsp;whom?\n&quot;);&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if(sscanf(str,&nbsp;&quot;%s&nbsp;to&nbsp;%s&quot;,&nbsp;what,&nbsp;whom)&nbsp;!=&nbsp;2)&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;notify_fail(&quot;Give&nbsp;what&nbsp;to&nbsp;whom?\n&quot;);&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;...&nbsp;rest&nbsp;of&nbsp;give&nbsp;code&nbsp;...&nbsp;<BR>
}&nbsp;<BR>
&nbsp;<BR>
The&nbsp;efun&nbsp;sscanf()&nbsp;takes&nbsp;three&nbsp;or&nbsp;more&nbsp;arguments.&nbsp;&nbsp;The&nbsp;first&nbsp;argument&nbsp;is&nbsp;<BR>
the&nbsp;string&nbsp;you&nbsp;want&nbsp;scanned.&nbsp;&nbsp;The&nbsp;second&nbsp;argument&nbsp;is&nbsp;called&nbsp;a&nbsp;control&nbsp;<BR>
string.&nbsp;&nbsp;The&nbsp;control&nbsp;string&nbsp;is&nbsp;a&nbsp;model&nbsp;which&nbsp;demonstrates&nbsp;in&nbsp;what&nbsp;form&nbsp;<BR>
the&nbsp;original&nbsp;string&nbsp;is&nbsp;written,&nbsp;and&nbsp;how&nbsp;it&nbsp;should&nbsp;be&nbsp;divided&nbsp;up.&nbsp;&nbsp;The&nbsp;rest&nbsp;<BR>
of&nbsp;the&nbsp;arguments&nbsp;are&nbsp;variables&nbsp;to&nbsp;which&nbsp;you&nbsp;will&nbsp;assign&nbsp;values&nbsp;based&nbsp;<BR>
upon&nbsp;the&nbsp;control&nbsp;string.&nbsp;<BR>
&nbsp;<BR>
The&nbsp;control&nbsp;string&nbsp;is&nbsp;made&nbsp;up&nbsp;of&nbsp;three&nbsp;different&nbsp;types&nbsp;of&nbsp;elements:&nbsp;1)&nbsp;<BR>
constants,&nbsp;2)&nbsp;variable&nbsp;arguments&nbsp;to&nbsp;be&nbsp;scanned,&nbsp;and&nbsp;3)&nbsp;variable&nbsp;<BR>
arguments&nbsp;to&nbsp;be&nbsp;discarded.&nbsp;&nbsp;You&nbsp;must&nbsp;have&nbsp;as&nbsp;many&nbsp;of&nbsp;the&nbsp;variable&nbsp;<BR>
arguments&nbsp;in&nbsp;sscanf()&nbsp;as&nbsp;you&nbsp;have&nbsp;elements&nbsp;of&nbsp;type&nbsp;2&nbsp;in&nbsp;your&nbsp;control&nbsp;<BR>
string.&nbsp;&nbsp;In&nbsp;the&nbsp;above&nbsp;example,&nbsp;the&nbsp;control&nbsp;string&nbsp;was&nbsp;&quot;%s&nbsp;to&nbsp;%s&quot;,&nbsp;which&nbsp;<BR>
is&nbsp;a&nbsp;three&nbsp;element&nbsp;control&nbsp;string&nbsp;made&nbsp;up&nbsp;of&nbsp;one&nbsp;constant&nbsp;part&nbsp;(&quot;&nbsp;to&nbsp;&quot;),&nbsp;<BR>
and&nbsp;two&nbsp;variable&nbsp;arguments&nbsp;to&nbsp;be&nbsp;scanned&nbsp;(&quot;%s&quot;).&nbsp;&nbsp;There&nbsp;were&nbsp;no&nbsp;<BR>
variables&nbsp;to&nbsp;be&nbsp;discarded.&nbsp;<BR>
&nbsp;<BR>
The&nbsp;control&nbsp;string&nbsp;basically&nbsp;indicates&nbsp;that&nbsp;the&nbsp;function&nbsp;should&nbsp;find&nbsp;the&nbsp;<BR>
string&nbsp;&quot;&nbsp;to&nbsp;&quot;&nbsp;in&nbsp;the&nbsp;string&nbsp;str.&nbsp;&nbsp;Whatever&nbsp;comes&nbsp;before&nbsp;that&nbsp;constant&nbsp;will&nbsp;<BR>
be&nbsp;placed&nbsp;into&nbsp;the&nbsp;first&nbsp;variable&nbsp;argument&nbsp;as&nbsp;a&nbsp;string.&nbsp;&nbsp;The&nbsp;same&nbsp;thing&nbsp;<BR>
will&nbsp;happen&nbsp;to&nbsp;whatever&nbsp;comes&nbsp;after&nbsp;the&nbsp;constant.&nbsp;<BR>
&nbsp;<BR>
Variable&nbsp;elements&nbsp;are&nbsp;noted&nbsp;by&nbsp;a&nbsp;&quot;%&quot;&nbsp;sign&nbsp;followed&nbsp;by&nbsp;a&nbsp;code&nbsp;for&nbsp;<BR>
decoding&nbsp;them.&nbsp;&nbsp;If&nbsp;the&nbsp;variable&nbsp;element&nbsp;is&nbsp;to&nbsp;be&nbsp;discarded,&nbsp;the&nbsp;&quot;%&quot;&nbsp;sign&nbsp;<BR>
is&nbsp;followed&nbsp;by&nbsp;the&nbsp;&quot;*&quot;&nbsp;as&nbsp;well&nbsp;as&nbsp;the&nbsp;code&nbsp;for&nbsp;decoding&nbsp;the&nbsp;variable.&nbsp;&nbsp;<BR>
Common&nbsp;codes&nbsp;for&nbsp;variable&nbsp;element&nbsp;decoding&nbsp;are&nbsp;&quot;s&quot;&nbsp;for&nbsp;strings&nbsp;and&nbsp;&quot;d&quot;&nbsp;<BR>
for&nbsp;integers.&nbsp;&nbsp;In&nbsp;addition,&nbsp;your&nbsp;mudlib&nbsp;may&nbsp;support&nbsp;other&nbsp;conversion&nbsp;<BR>
codes,&nbsp;such&nbsp;as&nbsp;&quot;f&quot;&nbsp;for&nbsp;float.&nbsp;&nbsp;So&nbsp;in&nbsp;the&nbsp;two&nbsp;examples&nbsp;above,&nbsp;the&nbsp;&quot;%s&quot;&nbsp;in&nbsp;<BR>
the&nbsp;control&nbsp;string&nbsp;indicates&nbsp;that&nbsp;whatever&nbsp;lies&nbsp;in&nbsp;the&nbsp;original&nbsp;string&nbsp;in&nbsp;the&nbsp;<BR>
corresponding&nbsp;place&nbsp;will&nbsp;be&nbsp;scanned&nbsp;into&nbsp;a&nbsp;new&nbsp;variable&nbsp;as&nbsp;a&nbsp;string.&nbsp;<BR>
&nbsp;<BR>
A&nbsp;simple&nbsp;exercise.&nbsp;&nbsp;How&nbsp;would&nbsp;you&nbsp;turn&nbsp;the&nbsp;string&nbsp;&quot;145&quot;&nbsp;into&nbsp;an&nbsp;<BR>
integer?&nbsp;<BR>
&nbsp;<BR>
Answer:&nbsp;<BR>
int&nbsp;x;&nbsp;<BR>
sscanf(&quot;145&quot;,&nbsp;&quot;%d&quot;,&nbsp;x);&nbsp;<BR>
&nbsp;<BR>
After&nbsp;the&nbsp;sscanf()&nbsp;function,&nbsp;x&nbsp;will&nbsp;equal&nbsp;the&nbsp;integer&nbsp;145.&nbsp;<BR>
&nbsp;<BR>
Whenever&nbsp;you&nbsp;scan&nbsp;a&nbsp;string&nbsp;against&nbsp;a&nbsp;control&nbsp;string,&nbsp;the&nbsp;function&nbsp;<BR>
searches&nbsp;the&nbsp;original&nbsp;string&nbsp;for&nbsp;the&nbsp;first&nbsp;instance&nbsp;of&nbsp;the&nbsp;first&nbsp;constant&nbsp;in&nbsp;<BR>
the&nbsp;original&nbsp;string.&nbsp;&nbsp;For&nbsp;example,&nbsp;if&nbsp;your&nbsp;string&nbsp;is&nbsp;&quot;magic&nbsp;attack&nbsp;100&quot;&nbsp;and&nbsp;<BR>
you&nbsp;have&nbsp;the&nbsp;following:&nbsp;<BR>
int&nbsp;improve(string&nbsp;str)&nbsp;{&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;string&nbsp;skill;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;x;&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if(sscanf(str,&nbsp;&quot;%s&nbsp;%d&quot;,&nbsp;skill,&nbsp;x)&nbsp;!=&nbsp;2)&nbsp;return&nbsp;0;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;...&nbsp;<BR>
}&nbsp;<BR>
you&nbsp;would&nbsp;find&nbsp;that&nbsp;you&nbsp;have&nbsp;come&nbsp;up&nbsp;with&nbsp;the&nbsp;wrong&nbsp;return&nbsp;value&nbsp;for&nbsp;<BR>
sscanf()&nbsp;(more&nbsp;on&nbsp;the&nbsp;return&nbsp;values&nbsp;later).&nbsp;&nbsp;The&nbsp;control&nbsp;string,&nbsp;&quot;%s&nbsp;%d&quot;,&nbsp;<BR>
is&nbsp;made&nbsp;up&nbsp;of&nbsp;to&nbsp;variables&nbsp;to&nbsp;be&nbsp;scanned&nbsp;and&nbsp;one&nbsp;constant.&nbsp;&nbsp;The&nbsp;constant&nbsp;<BR>
is&nbsp;&quot;&nbsp;&quot;.&nbsp;&nbsp;So&nbsp;the&nbsp;function&nbsp;searches&nbsp;the&nbsp;original&nbsp;string&nbsp;for&nbsp;the&nbsp;first&nbsp;instance&nbsp;<BR>
of&nbsp;&quot;&nbsp;&quot;,&nbsp;placing&nbsp;whatever&nbsp;comes&nbsp;before&nbsp;the&nbsp;&quot;&nbsp;&quot;&nbsp;into&nbsp;skill,&nbsp;and&nbsp;trying&nbsp;to&nbsp;<BR>
place&nbsp;whatever&nbsp;comes&nbsp;after&nbsp;the&nbsp;&quot;&nbsp;&quot;&nbsp;into&nbsp;x.&nbsp;&nbsp;This&nbsp;separates&nbsp;&quot;magic&nbsp;attack&nbsp;<BR>
100&quot;&nbsp;into&nbsp;the&nbsp;components&nbsp;&quot;magic&quot;&nbsp;and&nbsp;&quot;attack&nbsp;100&quot;.&nbsp;&nbsp;The&nbsp;function,&nbsp;<BR>
however,&nbsp;cannot&nbsp;make&nbsp;heads&nbsp;or&nbsp;tales&nbsp;of&nbsp;&quot;attack&nbsp;100&quot;&nbsp;as&nbsp;an&nbsp;integer,&nbsp;so&nbsp;it&nbsp;<BR>
returns&nbsp;1,&nbsp;meaning&nbsp;that&nbsp;1&nbsp;variable&nbsp;value&nbsp;was&nbsp;successfully&nbsp;scanned&nbsp;<BR>
(&quot;magic&quot;&nbsp;into&nbsp;skill).&nbsp;<BR>
&nbsp;<BR>
Perhaps&nbsp;you&nbsp;guessed&nbsp;from&nbsp;the&nbsp;above&nbsp;examples,&nbsp;but&nbsp;the&nbsp;efun&nbsp;sscanf()&nbsp;<BR>
returns&nbsp;an&nbsp;int,&nbsp;which&nbsp;is&nbsp;the&nbsp;number&nbsp;of&nbsp;variables&nbsp;into&nbsp;which&nbsp;values&nbsp;from&nbsp;<BR>
the&nbsp;original&nbsp;string&nbsp;were&nbsp;successfully&nbsp;scanned.&nbsp;&nbsp;Some&nbsp;examples&nbsp;with&nbsp;<BR>
return&nbsp;values&nbsp;for&nbsp;you&nbsp;to&nbsp;examine:&nbsp;<BR>
&nbsp;<BR>
sscanf(&quot;swo&nbsp;&nbsp;rd&nbsp;descartes&quot;,&nbsp;&quot;%s&nbsp;to&nbsp;%s&quot;,&nbsp;str1,&nbsp;str2)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return:&nbsp;0&nbsp;<BR>
sscanf(&quot;swo&nbsp;&nbsp;rd&nbsp;descartes&quot;,&nbsp;&quot;%s&nbsp;%s&quot;,&nbsp;str1,&nbsp;str2)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return:&nbsp;2&nbsp;<BR>
sscanf(&quot;200&nbsp;gold&nbsp;to&nbsp;descartes&quot;,&nbsp;&quot;%d&nbsp;%s&nbsp;to&nbsp;%s&quot;,&nbsp;x,&nbsp;str1,&nbsp;str2)&nbsp;return:&nbsp;3&nbsp;<BR>
sscanf(&quot;200&nbsp;gold&nbsp;to&nbsp;descartes&quot;,&nbsp;&quot;%d&nbsp;%*s&nbsp;to&nbsp;%s&quot;,&nbsp;x,&nbsp;str1)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return:&nbsp;2&nbsp;<BR>
where&nbsp;x&nbsp;is&nbsp;an&nbsp;int&nbsp;and&nbsp;str1&nbsp;and&nbsp;str2&nbsp;are&nbsp;string&nbsp;<BR>
&nbsp;<BR>
5.4&nbsp;Summary&nbsp;<BR>
LPC&nbsp;strings&nbsp;can&nbsp;be&nbsp;thought&nbsp;of&nbsp;as&nbsp;arrays&nbsp;of&nbsp;characters,&nbsp;yet&nbsp;always&nbsp;<BR>
keeping&nbsp;in&nbsp;mind&nbsp;that&nbsp;LPC&nbsp;does&nbsp;not&nbsp;have&nbsp;the&nbsp;character&nbsp;data&nbsp;type&nbsp;(with&nbsp;<BR>
most,&nbsp;but&nbsp;not&nbsp;all&nbsp;drivers).&nbsp;&nbsp;Since&nbsp;the&nbsp;character&nbsp;is&nbsp;not&nbsp;a&nbsp;true&nbsp;LPC&nbsp;data&nbsp;<BR>
type,&nbsp;you&nbsp;cannot&nbsp;act&nbsp;upon&nbsp;individual&nbsp;characters&nbsp;in&nbsp;an&nbsp;LPC&nbsp;string&nbsp;in&nbsp;the&nbsp;<BR>
same&nbsp;manner&nbsp;you&nbsp;would&nbsp;act&nbsp;upon&nbsp;different&nbsp;data&nbsp;types.&nbsp;&nbsp;Noticing&nbsp;the&nbsp;<BR>
intimate&nbsp;relationship&nbsp;between&nbsp;strings&nbsp;and&nbsp;arrays&nbsp;nevertheless&nbsp;makes&nbsp;it&nbsp;<BR>
easier&nbsp;to&nbsp;understand&nbsp;such&nbsp;concepts&nbsp;as&nbsp;the&nbsp;range&nbsp;operator&nbsp;and&nbsp;indexing&nbsp;on&nbsp;<BR>
strings.&nbsp;<BR>
&nbsp;<BR>
There&nbsp;are&nbsp;efuns&nbsp;other&nbsp;than&nbsp;sscanf()&nbsp;which&nbsp;involve&nbsp;advanced&nbsp;string&nbsp;<BR>
handling,&nbsp;however,&nbsp;they&nbsp;are&nbsp;not&nbsp;needed&nbsp;nearly&nbsp;as&nbsp;often.&nbsp;&nbsp;You&nbsp;should&nbsp;<BR>
check&nbsp;on&nbsp;your&nbsp;mud&nbsp;for&nbsp;man&nbsp;or&nbsp;help&nbsp;files&nbsp;on&nbsp;the&nbsp;efuns:&nbsp;explode(),&nbsp;<BR>
implode(),&nbsp;replace_string(),&nbsp;sprintf().&nbsp;&nbsp;All&nbsp;of&nbsp;these&nbsp;are&nbsp;very&nbsp;valuable&nbsp;<BR>
tools,&nbsp;especially&nbsp;if&nbsp;you&nbsp;intend&nbsp;to&nbsp;do&nbsp;coding&nbsp;at&nbsp;the&nbsp;mudlib&nbsp;level.&nbsp;<BR>
&nbsp;<BR>
Copyright&nbsp;(c)&nbsp;George&nbsp;Reese&nbsp;1993&nbsp;<BR>
&nbsp;<BR>
--&nbsp;<BR>
小樓一夜聽秋雨&nbsp;<BR>
--&nbsp;<BR>
佇倚危樓風細細&nbsp;望極春愁&nbsp;黯黯生天際&nbsp;&nbsp;草色煙光殘照裡&nbsp;無言誰會憑欄意[0&nbsp;<BR>
擬把疏狂圖一醉&nbsp;對酒當歌&nbsp;強樂還無味&nbsp;&nbsp;衣帶漸寬終不悔&nbsp;為伊消得人憔悴&nbsp;<BR>
&nbsp;<BR>
※&nbsp;來源:•BBS&nbsp;水木清華站&nbsp;bbs.net.tsinghua.edu.cn•[FROM:&nbsp;166.111.5.25]&nbsp;<BR>
<A HREF="00000015.htm">上一篇</A>
<A HREF='javascript:history.go(-1)'>返回上一頁</A>
<A HREF="index.htm">回到目錄</A>
<A HREF="#top">回到頁首</A>
<A HREF="00000017.htm">下一篇</A>
</H1></CENTER>
<CENTER><H1>BBS水木清華站︰精華區</H1></CENTER>
</BODY></HTML>