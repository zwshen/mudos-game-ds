<HTML>
<HEAD>
<TITLE>BBS水木清華站︰精華區</TITLE>
</HEAD>
<BODY>
<CENTER><H1>BBS水木清華站︰精華區</H1></CENTER>
<A Name="top"></a>
發信人:&nbsp;Ranma&nbsp;(亂馬~~~~~~~無聊中),&nbsp;信區:&nbsp;Mud_Builder&nbsp;<BR>
標&nbsp;&nbsp;題:&nbsp;Lpc&nbsp;basics&nbsp;(3)--LPC&nbsp;Data&nbsp;Types&nbsp;<BR>
發信站:&nbsp;BBS&nbsp;水木清華站&nbsp;(Mon&nbsp;Oct&nbsp;20&nbsp;09:05:42&nbsp;1997)&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LPC&nbsp;Basics&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Written&nbsp;by&nbsp;Descartes&nbsp;of&nbsp;Borg&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;first&nbsp;edition:&nbsp;23&nbsp;april&nbsp;1993&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;second&nbsp;edition:&nbsp;17&nbsp;june&nbsp;1993&nbsp;<BR>
&nbsp;<BR>
CHAPTER&nbsp;3:&nbsp;LPC&nbsp;Data&nbsp;Types&nbsp;<BR>
&nbsp;<BR>
3.1&nbsp;What&nbsp;you&nbsp;should&nbsp;know&nbsp;by&nbsp;now&nbsp;<BR>
LPC&nbsp;object&nbsp;are&nbsp;made&nbsp;up&nbsp;of&nbsp;zero&nbsp;or&nbsp;more&nbsp;variables&nbsp;manipulated&nbsp;by&nbsp;one&nbsp;or&nbsp;<BR>
more&nbsp;functions.&nbsp;&nbsp;The&nbsp;order&nbsp;in&nbsp;which&nbsp;these&nbsp;functions&nbsp;appear&nbsp;in&nbsp;code&nbsp;is&nbsp;<BR>
irrelevant.&nbsp;&nbsp;The&nbsp;driver&nbsp;uses&nbsp;the&nbsp;LPC&nbsp;code&nbsp;you&nbsp;write&nbsp;by&nbsp;loading&nbsp;copies&nbsp;of&nbsp;<BR>
it&nbsp;into&nbsp;memory&nbsp;whenever&nbsp;it&nbsp;is&nbsp;first&nbsp;referenced&nbsp;and&nbsp;additional&nbsp;copies&nbsp;<BR>
through&nbsp;cloning.&nbsp;&nbsp;When&nbsp;each&nbsp;object&nbsp;is&nbsp;loaded&nbsp;into&nbsp;memory,&nbsp;all&nbsp;the&nbsp;variables&nbsp;<BR>
initially&nbsp;point&nbsp;to&nbsp;no&nbsp;value.&nbsp;&nbsp;The&nbsp;reset()&nbsp;function&nbsp;in&nbsp;compat&nbsp;muds,&nbsp;and&nbsp;<BR>
create()&nbsp;in&nbsp;native&nbsp;muds&nbsp;are&nbsp;used&nbsp;to&nbsp;give&nbsp;initial&nbsp;values&nbsp;to&nbsp;variables&nbsp;in&nbsp;<BR>
objects.&nbsp;&nbsp;The&nbsp;function&nbsp;for&nbsp;creation&nbsp;is&nbsp;called&nbsp;immediately&nbsp;after&nbsp;the&nbsp;object&nbsp;<BR>
is&nbsp;loaded&nbsp;into&nbsp;memory.&nbsp;&nbsp;However,&nbsp;if&nbsp;you&nbsp;are&nbsp;reading&nbsp;this&nbsp;textbook&nbsp;with&nbsp;no&nbsp;<BR>
prior&nbsp;programming&nbsp;experience,&nbsp;you&nbsp;may&nbsp;not&nbsp;know&nbsp;what&nbsp;a&nbsp;function&nbsp;is&nbsp;or&nbsp;how&nbsp;<BR>
it&nbsp;gets&nbsp;called.&nbsp;&nbsp;And&nbsp;even&nbsp;if&nbsp;you&nbsp;have&nbsp;programming&nbsp;experience,&nbsp;you&nbsp;may&nbsp;<BR>
be&nbsp;wondering&nbsp;how&nbsp;the&nbsp;process&nbsp;of&nbsp;functions&nbsp;calling&nbsp;each&nbsp;other&nbsp;gets&nbsp;started&nbsp;<BR>
in&nbsp;newly&nbsp;created&nbsp;objects.&nbsp;&nbsp;Before&nbsp;any&nbsp;of&nbsp;these&nbsp;questions&nbsp;get&nbsp;answered,&nbsp;<BR>
however,&nbsp;you&nbsp;need&nbsp;to&nbsp;know&nbsp;more&nbsp;about&nbsp;what&nbsp;it&nbsp;is&nbsp;the&nbsp;functions&nbsp;are&nbsp;<BR>
manipulating.&nbsp;&nbsp;You&nbsp;therefore&nbsp;should&nbsp;thouroughly&nbsp;come&nbsp;to&nbsp;know&nbsp;the&nbsp;concept&nbsp;<BR>
behind&nbsp;LPC&nbsp;data&nbsp;types.&nbsp;&nbsp;Certainly&nbsp;the&nbsp;most&nbsp;boring&nbsp;subject&nbsp;in&nbsp;this&nbsp;manual,&nbsp;<BR>
yet&nbsp;it&nbsp;is&nbsp;the&nbsp;most&nbsp;crucial,&nbsp;as&nbsp;90%&nbsp;of&nbsp;all&nbsp;errors&nbsp;(excepting&nbsp;misplaced&nbsp;<BR>
{}&nbsp;and&nbsp;())&nbsp;involve&nbsp;the&nbsp;improper&nbsp;usage&nbsp;of&nbsp;LPC&nbsp;data&nbsp;types.&nbsp;&nbsp;So&nbsp;bear&nbsp;through&nbsp;<BR>
this&nbsp;important&nbsp;chapter,&nbsp;because&nbsp;it&nbsp;is&nbsp;my&nbsp;feeling&nbsp;that&nbsp;understanding&nbsp;this&nbsp;<BR>
chapter&nbsp;alone&nbsp;can&nbsp;help&nbsp;you&nbsp;find&nbsp;coding&nbsp;much,&nbsp;much&nbsp;easier.&nbsp;<BR>
&nbsp;<BR>
3.2&nbsp;Communicating&nbsp;with&nbsp;the&nbsp;computer&nbsp;<BR>
You&nbsp;possibly&nbsp;already&nbsp;know&nbsp;that&nbsp;computers&nbsp;cannot&nbsp;understand&nbsp;the&nbsp;letters&nbsp;<BR>
and&nbsp;numbers&nbsp;used&nbsp;by&nbsp;humans.&nbsp;&nbsp;Instead,&nbsp;the&nbsp;&quot;language&quot;&nbsp;spoken&nbsp;by&nbsp;computers&nbsp;<BR>
consists&nbsp;of&nbsp;an&nbsp;&quot;alphabet&quot;&nbsp;of&nbsp;0's&nbsp;and&nbsp;1's.&nbsp;&nbsp;Certainly&nbsp;you&nbsp;know&nbsp;computers&nbsp;<BR>
do&nbsp;not&nbsp;understand&nbsp;natural&nbsp;human&nbsp;languages.&nbsp;&nbsp;But&nbsp;in&nbsp;fact,&nbsp;they&nbsp;do&nbsp;not&nbsp;<BR>
understand&nbsp;the&nbsp;computer&nbsp;languages&nbsp;we&nbsp;write&nbsp;for&nbsp;them&nbsp;either.&nbsp;&nbsp;Computer&nbsp;<BR>
languages&nbsp;like&nbsp;BASIC,&nbsp;C,&nbsp;C++,&nbsp;Pascal,&nbsp;etc.&nbsp;are&nbsp;all&nbsp;intermediate&nbsp;<BR>
languages.&nbsp;&nbsp;They&nbsp;allow&nbsp;you&nbsp;to&nbsp;structure&nbsp;your&nbsp;thoughts&nbsp;more&nbsp;coherently&nbsp;<BR>
for&nbsp;translation&nbsp;into&nbsp;the&nbsp;0's&nbsp;and&nbsp;1's&nbsp;of&nbsp;the&nbsp;computer's&nbsp;languages.&nbsp;<BR>
&nbsp;<BR>
There&nbsp;are&nbsp;two&nbsp;methods&nbsp;in&nbsp;which&nbsp;translation&nbsp;is&nbsp;done:&nbsp;compilation&nbsp;and&nbsp;<BR>
interpretation.&nbsp;&nbsp;These&nbsp;simply&nbsp;are&nbsp;differences&nbsp;betweem&nbsp;when&nbsp;the&nbsp;&nbsp;<BR>
programming&nbsp;language&nbsp;is&nbsp;translated&nbsp;into&nbsp;computer&nbsp;language.&nbsp;&nbsp;With&nbsp;<BR>
compiled&nbsp;languages,&nbsp;the&nbsp;programmer&nbsp;writes&nbsp;the&nbsp;code&nbsp;then&nbsp;uses&nbsp;a&nbsp;program&nbsp;<BR>
called&nbsp;a&nbsp;compiler&nbsp;to&nbsp;translate&nbsp;the&nbsp;program&nbsp;into&nbsp;the&nbsp;computer's&nbsp;<BR>
language.&nbsp;&nbsp;This&nbsp;translation&nbsp;occurs&nbsp;before&nbsp;the&nbsp;program&nbsp;is&nbsp;run.&nbsp;&nbsp;With&nbsp;<BR>
interpreted&nbsp;languages&nbsp;however,&nbsp;the&nbsp;process&nbsp;of&nbsp;translation&nbsp;occurs&nbsp;as&nbsp;<BR>
the&nbsp;program&nbsp;is&nbsp;being&nbsp;run.&nbsp;&nbsp;Since&nbsp;the&nbsp;translation&nbsp;of&nbsp;the&nbsp;program&nbsp;is&nbsp;<BR>
occurring&nbsp;during&nbsp;the&nbsp;time&nbsp;of&nbsp;the&nbsp;program's&nbsp;running&nbsp;in&nbsp;interpreted&nbsp;<BR>
languages,&nbsp;interpreted&nbsp;languages&nbsp;make&nbsp;much&nbsp;slower&nbsp;programs&nbsp;than&nbsp;<BR>
compiled&nbsp;languages.&nbsp;<BR>
&nbsp;<BR>
The&nbsp;bottom&nbsp;line&nbsp;is,&nbsp;no&nbsp;matter&nbsp;what&nbsp;language&nbsp;you&nbsp;are&nbsp;writing&nbsp;in,&nbsp;at&nbsp;<BR>
some&nbsp;point&nbsp;this&nbsp;has&nbsp;to&nbsp;be&nbsp;changed&nbsp;into&nbsp;0's&nbsp;and&nbsp;1's&nbsp;which&nbsp;can&nbsp;be&nbsp;<BR>
understood&nbsp;by&nbsp;the&nbsp;computer.&nbsp;&nbsp;But&nbsp;the&nbsp;variables&nbsp;which&nbsp;you&nbsp;store&nbsp;in&nbsp;<BR>
memory&nbsp;are&nbsp;not&nbsp;simply&nbsp;0's&nbsp;and&nbsp;1's.&nbsp;&nbsp;So&nbsp;you&nbsp;have&nbsp;to&nbsp;have&nbsp;a&nbsp;way&nbsp;in&nbsp;<BR>
your&nbsp;programming&nbsp;languages&nbsp;of&nbsp;telling&nbsp;the&nbsp;computer&nbsp;whether&nbsp;or&nbsp;not&nbsp;<BR>
the&nbsp;0's&nbsp;and&nbsp;1's&nbsp;should&nbsp;be&nbsp;treated&nbsp;as&nbsp;decimal&nbsp;numbers&nbsp;or&nbsp;characters&nbsp;or&nbsp;<BR>
strings&nbsp;or&nbsp;anything&nbsp;else.&nbsp;&nbsp;You&nbsp;do&nbsp;this&nbsp;through&nbsp;the&nbsp;use&nbsp;of&nbsp;data&nbsp;types.&nbsp;<BR>
&nbsp;<BR>
For&nbsp;example,&nbsp;say&nbsp;you&nbsp;have&nbsp;a&nbsp;variable&nbsp;which&nbsp;you&nbsp;call&nbsp;'x'&nbsp;and&nbsp;you&nbsp;give&nbsp;<BR>
it&nbsp;the&nbsp;decimal&nbsp;whole&nbsp;number&nbsp;value&nbsp;65.&nbsp;&nbsp;In&nbsp;LPC&nbsp;you&nbsp;would&nbsp;do&nbsp;this&nbsp;through&nbsp;<BR>
the&nbsp;statement:&nbsp;<BR>
&nbsp;<BR>
-----&nbsp;<BR>
x&nbsp;=&nbsp;65;&nbsp;<BR>
-----&nbsp;<BR>
&nbsp;<BR>
You&nbsp;can&nbsp;later&nbsp;do&nbsp;things&nbsp;like:&nbsp;<BR>
&nbsp;<BR>
_____&nbsp;<BR>
write(x+&quot;\n&quot;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;\n&nbsp;is&nbsp;symbolically&nbsp;represents&nbsp;a&nbsp;carriage&nbsp;return&nbsp;*/&nbsp;<BR>
y&nbsp;=&nbsp;x&nbsp;+&nbsp;5;&nbsp;<BR>
-----&nbsp;<BR>
&nbsp;<BR>
The&nbsp;first&nbsp;line&nbsp;allows&nbsp;you&nbsp;to&nbsp;send&nbsp;65&nbsp;and&nbsp;a&nbsp;carriage&nbsp;return&nbsp;to&nbsp;someone's&nbsp;screen.&nbsp;<BR>
The&nbsp;second&nbsp;line&nbsp;lets&nbsp;you&nbsp;set&nbsp;the&nbsp;value&nbsp;of&nbsp;y&nbsp;to&nbsp;70.&nbsp;<BR>
The&nbsp;problem&nbsp;for&nbsp;the&nbsp;computer&nbsp;is&nbsp;that&nbsp;it&nbsp;does&nbsp;not&nbsp;know&nbsp;what&nbsp;'65'&nbsp;means&nbsp;when&nbsp;<BR>
you&nbsp;tell&nbsp;it&nbsp;x&nbsp;=&nbsp;65;.&nbsp;&nbsp;What&nbsp;you&nbsp;think&nbsp;of&nbsp;65,&nbsp;it&nbsp;might&nbsp;think&nbsp;of&nbsp;as:&nbsp;<BR>
00000000000000000000000001000001&nbsp;<BR>
But,&nbsp;also,&nbsp;to&nbsp;the&nbsp;computer,&nbsp;the&nbsp;letter&nbsp;'A'&nbsp;is&nbsp;represented&nbsp;as:&nbsp;<BR>
00000000000000000000000001000001&nbsp;<BR>
So,&nbsp;whenever&nbsp;you&nbsp;instruct&nbsp;the&nbsp;computer&nbsp;write(x+&quot;\n&quot;);,&nbsp;it&nbsp;must&nbsp;have&nbsp;some&nbsp;<BR>
way&nbsp;of&nbsp;knowing&nbsp;that&nbsp;you&nbsp;want&nbsp;to&nbsp;see&nbsp;'65'&nbsp;and&nbsp;not&nbsp;'A'.&nbsp;<BR>
&nbsp;<BR>
The&nbsp;computer&nbsp;can&nbsp;tell&nbsp;the&nbsp;difference&nbsp;between&nbsp;'65'&nbsp;and&nbsp;'A'&nbsp;through&nbsp;the&nbsp;use&nbsp;<BR>
of&nbsp;data&nbsp;types.&nbsp;&nbsp;A&nbsp;data&nbsp;types&nbsp;simply&nbsp;says&nbsp;what&nbsp;type&nbsp;of&nbsp;data&nbsp;is&nbsp;being&nbsp;stored&nbsp;<BR>
by&nbsp;the&nbsp;memory&nbsp;location&nbsp;pointed&nbsp;to&nbsp;by&nbsp;a&nbsp;given&nbsp;variable.&nbsp;&nbsp;Thus,&nbsp;each&nbsp;LPC&nbsp;<BR>
variable&nbsp;has&nbsp;a&nbsp;variable&nbsp;type&nbsp;which&nbsp;guides&nbsp;conversions.&nbsp;&nbsp;In&nbsp;the&nbsp;example&nbsp;<BR>
given&nbsp;above,&nbsp;you&nbsp;would&nbsp;have&nbsp;had&nbsp;the&nbsp;following&nbsp;line&nbsp;somewhere&nbsp;in&nbsp;the&nbsp;<BR>
code&nbsp;*before*&nbsp;the&nbsp;lines&nbsp;shown&nbsp;above:&nbsp;<BR>
&nbsp;<BR>
-----&nbsp;<BR>
int&nbsp;x;&nbsp;<BR>
-----&nbsp;<BR>
&nbsp;<BR>
This&nbsp;one&nbsp;line&nbsp;tells&nbsp;the&nbsp;driver&nbsp;that&nbsp;whatever&nbsp;value&nbsp;x&nbsp;points&nbsp;to,&nbsp;it&nbsp;will&nbsp;<BR>
be&nbsp;used&nbsp;as&nbsp;the&nbsp;data&nbsp;type&nbsp;&quot;int&quot;,&nbsp;which&nbsp;is&nbsp;short&nbsp;for&nbsp;integer,&nbsp;or&nbsp;whole&nbsp;<BR>
number.&nbsp;&nbsp;So&nbsp;you&nbsp;have&nbsp;a&nbsp;basic&nbsp;introduction&nbsp;into&nbsp;the&nbsp;reason&nbsp;why&nbsp;data&nbsp;types&nbsp;<BR>
exist.&nbsp;&nbsp;They&nbsp;exist&nbsp;so&nbsp;the&nbsp;driver&nbsp;can&nbsp;make&nbsp;sense&nbsp;of&nbsp;the&nbsp;0's&nbsp;and&nbsp;1's&nbsp;that&nbsp;<BR>
the&nbsp;computer&nbsp;is&nbsp;storing&nbsp;in&nbsp;memory.&nbsp;<BR>
&nbsp;<BR>
3.3&nbsp;The&nbsp;data&nbsp;types&nbsp;of&nbsp;LPC&nbsp;<BR>
All&nbsp;LPMud&nbsp;drivers&nbsp;have&nbsp;the&nbsp;following&nbsp;data&nbsp;types:&nbsp;<BR>
&nbsp;<BR>
void,&nbsp;status,&nbsp;int,&nbsp;string,&nbsp;object,&nbsp;int&nbsp;*,&nbsp;string&nbsp;*,&nbsp;object&nbsp;*,&nbsp;mixed&nbsp;*&nbsp;<BR>
&nbsp;<BR>
Many&nbsp;drivers,&nbsp;but&nbsp;not&nbsp;all&nbsp;have&nbsp;the&nbsp;following&nbsp;important&nbsp;data&nbsp;types&nbsp;which&nbsp;<BR>
are&nbsp;important&nbsp;to&nbsp;discuss:&nbsp;<BR>
&nbsp;<BR>
float,&nbsp;mapping,&nbsp;float&nbsp;*,&nbsp;mapping&nbsp;*&nbsp;<BR>
&nbsp;<BR>
And&nbsp;there&nbsp;are&nbsp;a&nbsp;few&nbsp;drivers&nbsp;with&nbsp;the&nbsp;following&nbsp;rarely&nbsp;used&nbsp;data&nbsp;types&nbsp;<BR>
which&nbsp;are&nbsp;not&nbsp;important&nbsp;to&nbsp;discuss:&nbsp;<BR>
&nbsp;<BR>
function,&nbsp;enum,&nbsp;struct,&nbsp;char&nbsp;<BR>
&nbsp;<BR>
3.4&nbsp;Simple&nbsp;data&nbsp;types&nbsp;<BR>
This&nbsp;introductory&nbsp;textbook&nbsp;will&nbsp;deal&nbsp;with&nbsp;the&nbsp;data&nbsp;types&nbsp;void,&nbsp;status,&nbsp;<BR>
int,&nbsp;float,&nbsp;string,&nbsp;object,&nbsp;mand&nbsp;mixed.&nbsp;&nbsp;You&nbsp;can&nbsp;find&nbsp;out&nbsp;about&nbsp;the&nbsp;<BR>
more&nbsp;complex&nbsp;data&nbsp;types&nbsp;like&nbsp;mappings&nbsp;and&nbsp;arrays&nbsp;in&nbsp;the&nbsp;intermediate&nbsp;<BR>
textbook.&nbsp;&nbsp;This&nbsp;chapter&nbsp;deals&nbsp;with&nbsp;the&nbsp;two&nbsp;simplest&nbsp;data&nbsp;types&nbsp;(from&nbsp;the&nbsp;<BR>
point&nbsp;of&nbsp;view&nbsp;of&nbsp;the&nbsp;LPC&nbsp;coder),&nbsp;int&nbsp;and&nbsp;string.&nbsp;<BR>
&nbsp;<BR>
An&nbsp;int&nbsp;is&nbsp;any&nbsp;whole&nbsp;number.&nbsp;&nbsp;Thus&nbsp;1,&nbsp;42,&nbsp;-17,&nbsp;0,&nbsp;-10000023&nbsp;are&nbsp;all&nbsp;type&nbsp;int.&nbsp;<BR>
A&nbsp;string&nbsp;is&nbsp;one&nbsp;or&nbsp;more&nbsp;alphanumeric&nbsp;characters.&nbsp;&nbsp;Thus&nbsp;&quot;a&quot;,&nbsp;&quot;we&nbsp;are&nbsp;borg&quot;,&nbsp;<BR>
&quot;42&quot;,&nbsp;&quot;This&nbsp;is&nbsp;a&nbsp;string&quot;&nbsp;are&nbsp;all&nbsp;strings.&nbsp;&nbsp;Note&nbsp;that&nbsp;strings&nbsp;are&nbsp;always&nbsp;<BR>
enclosed&nbsp;in&nbsp;&quot;&quot;&nbsp;to&nbsp;allow&nbsp;the&nbsp;driver&nbsp;to&nbsp;distinguish&nbsp;between&nbsp;the&nbsp;int&nbsp;42&nbsp;and&nbsp;<BR>
the&nbsp;string&nbsp;&quot;42&quot;&nbsp;as&nbsp;well&nbsp;as&nbsp;to&nbsp;distinguish&nbsp;between&nbsp;variable&nbsp;names&nbsp;(like&nbsp;x)&nbsp;<BR>
and&nbsp;strings&nbsp;by&nbsp;the&nbsp;same&nbsp;names&nbsp;(like&nbsp;&quot;x&quot;).&nbsp;<BR>
&nbsp;<BR>
When&nbsp;you&nbsp;use&nbsp;a&nbsp;variable&nbsp;in&nbsp;code,&nbsp;you&nbsp;must&nbsp;first&nbsp;let&nbsp;the&nbsp;driver&nbsp;know&nbsp;<BR>
what&nbsp;type&nbsp;of&nbsp;data&nbsp;to&nbsp;which&nbsp;that&nbsp;variable&nbsp;points.&nbsp;&nbsp;This&nbsp;process&nbsp;is&nbsp;<BR>
called&nbsp;*declaration*.&nbsp;&nbsp;You&nbsp;do&nbsp;this&nbsp;at&nbsp;the&nbsp;beginning&nbsp;of&nbsp;the&nbsp;function&nbsp;<BR>
or&nbsp;at&nbsp;the&nbsp;beginning&nbsp;of&nbsp;the&nbsp;object&nbsp;code&nbsp;(outside&nbsp;of&nbsp;functions&nbsp;before&nbsp;all&nbsp;<BR>
functions&nbsp;which&nbsp;use&nbsp;it).&nbsp;&nbsp;This&nbsp;is&nbsp;done&nbsp;by&nbsp;placing&nbsp;the&nbsp;name&nbsp;of&nbsp;the&nbsp;data&nbsp;type&nbsp;<BR>
before&nbsp;the&nbsp;name&nbsp;of&nbsp;the&nbsp;variable&nbsp;like&nbsp;in&nbsp;the&nbsp;following&nbsp;example:&nbsp;<BR>
&nbsp;<BR>
-----&nbsp;<BR>
void&nbsp;add_two_and_two()&nbsp;{&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;x;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;y;&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;=&nbsp;2;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;=&nbsp;x&nbsp;+&nbsp;x;&nbsp;<BR>
}&nbsp;<BR>
-----&nbsp;<BR>
&nbsp;<BR>
Now,&nbsp;this&nbsp;is&nbsp;a&nbsp;complete&nbsp;function.&nbsp;&nbsp;The&nbsp;name&nbsp;of&nbsp;the&nbsp;function&nbsp;is&nbsp;&nbsp;<BR>
add_two_and_two().&nbsp;&nbsp;The&nbsp;function&nbsp;begins&nbsp;with&nbsp;the&nbsp;declaration&nbsp;of&nbsp;an&nbsp;<BR>
int&nbsp;variable&nbsp;named&nbsp;x&nbsp;followed&nbsp;by&nbsp;the&nbsp;declaration&nbsp;of&nbsp;an&nbsp;in&nbsp;variable&nbsp;<BR>
named&nbsp;y.&nbsp;&nbsp;So&nbsp;now,&nbsp;at&nbsp;this&nbsp;point,&nbsp;the&nbsp;driver&nbsp;now&nbsp;has&nbsp;two&nbsp;variables&nbsp;which&nbsp;<BR>
point&nbsp;to&nbsp;NULL&nbsp;values,&nbsp;and&nbsp;it&nbsp;expects&nbsp;what&nbsp;ever&nbsp;values&nbsp;end&nbsp;up&nbsp;there&nbsp;to&nbsp;be&nbsp;<BR>
of&nbsp;type&nbsp;int.&nbsp;<BR>
&nbsp;<BR>
A&nbsp;note&nbsp;about&nbsp;the&nbsp;data&nbsp;types&nbsp;void&nbsp;and&nbsp;status:&nbsp;<BR>
Void&nbsp;is&nbsp;a&nbsp;trivial&nbsp;data&nbsp;type&nbsp;which&nbsp;points&nbsp;to&nbsp;nothing.&nbsp;&nbsp;It&nbsp;is&nbsp;not&nbsp;used&nbsp;<BR>
with&nbsp;respect&nbsp;to&nbsp;variables,&nbsp;but&nbsp;instead&nbsp;with&nbsp;respect&nbsp;to&nbsp;functions.&nbsp;&nbsp;You&nbsp;<BR>
will&nbsp;come&nbsp;to&nbsp;understand&nbsp;this&nbsp;better&nbsp;later.&nbsp;&nbsp;For&nbsp;now,&nbsp;you&nbsp;need&nbsp;only&nbsp;<BR>
understand&nbsp;that&nbsp;it&nbsp;points&nbsp;to&nbsp;no&nbsp;value.&nbsp;&nbsp;&nbsp;<BR>
&nbsp;<BR>
The&nbsp;data&nbsp;type&nbsp;status&nbsp;is&nbsp;a&nbsp;boolean&nbsp;data&nbsp;type.&nbsp;&nbsp;That&nbsp;is,&nbsp;it&nbsp;can&nbsp;only&nbsp;have&nbsp;<BR>
1&nbsp;or&nbsp;0&nbsp;as&nbsp;a&nbsp;value.&nbsp;&nbsp;This&nbsp;is&nbsp;often&nbsp;referred&nbsp;to&nbsp;as&nbsp;being&nbsp;true&nbsp;or&nbsp;false.&nbsp;<BR>
&nbsp;<BR>
3.5&nbsp;Chapter&nbsp;summary&nbsp;<BR>
For&nbsp;variables,&nbsp;the&nbsp;driver&nbsp;needs&nbsp;to&nbsp;know&nbsp;how&nbsp;the&nbsp;0's&nbsp;and&nbsp;1's&nbsp;the&nbsp;computer&nbsp;<BR>
stores&nbsp;in&nbsp;memory&nbsp;get&nbsp;converted&nbsp;into&nbsp;the&nbsp;forms&nbsp;in&nbsp;which&nbsp;you&nbsp;intend&nbsp;them&nbsp;<BR>
to&nbsp;be&nbsp;used.&nbsp;&nbsp;The&nbsp;simplest&nbsp;LPC&nbsp;data&nbsp;types&nbsp;are&nbsp;void,&nbsp;status,&nbsp;int,&nbsp;and&nbsp;string.&nbsp;<BR>
You&nbsp;do&nbsp;not&nbsp;user&nbsp;variables&nbsp;of&nbsp;type&nbsp;void,&nbsp;but&nbsp;the&nbsp;data&nbsp;type&nbsp;does&nbsp;come&nbsp;<BR>
into&nbsp;play&nbsp;with&nbsp;respect&nbsp;to&nbsp;functions.&nbsp;&nbsp;In&nbsp;addition&nbsp;to&nbsp;being&nbsp;used&nbsp;for&nbsp;<BR>
translation&nbsp;from&nbsp;one&nbsp;form&nbsp;to&nbsp;the&nbsp;next,&nbsp;data&nbsp;types&nbsp;are&nbsp;used&nbsp;in&nbsp;determining&nbsp;<BR>
what&nbsp;rules&nbsp;the&nbsp;driver&nbsp;uses&nbsp;for&nbsp;such&nbsp;operations&nbsp;as&nbsp;+,&nbsp;-,&nbsp;etc.&nbsp;&nbsp;For&nbsp;example,&nbsp;<BR>
in&nbsp;the&nbsp;expression&nbsp;5+5,&nbsp;the&nbsp;driver&nbsp;knows&nbsp;to&nbsp;add&nbsp;the&nbsp;values&nbsp;of&nbsp;5&nbsp;and&nbsp;5&nbsp;<BR>
together&nbsp;to&nbsp;make&nbsp;10.&nbsp;&nbsp;With&nbsp;strings&nbsp;however,&nbsp;the&nbsp;rules&nbsp;for&nbsp;int&nbsp;addition&nbsp;<BR>
make&nbsp;no&nbsp;sense.&nbsp;&nbsp;So&nbsp;instead,&nbsp;with&nbsp;&quot;a&quot;+&quot;b&quot;,&nbsp;it&nbsp;appends&nbsp;&quot;b&quot;&nbsp;to&nbsp;the&nbsp;string&nbsp;&quot;a&quot;&nbsp;<BR>
so&nbsp;that&nbsp;the&nbsp;final&nbsp;string&nbsp;is&nbsp;&quot;ab&quot;.&nbsp;&nbsp;Errors&nbsp;can&nbsp;thus&nbsp;result&nbsp;if&nbsp;you&nbsp;mistakenly&nbsp;<BR>
try&nbsp;to&nbsp;add&nbsp;&quot;5&quot;+5.&nbsp;&nbsp;Since&nbsp;int&nbsp;addition&nbsp;makes&nbsp;no&nbsp;sense&nbsp;with&nbsp;strings,&nbsp;the&nbsp;<BR>
driver&nbsp;will&nbsp;convert&nbsp;the&nbsp;second&nbsp;5&nbsp;to&nbsp;&quot;5&quot;&nbsp;and&nbsp;use&nbsp;string&nbsp;addition.&nbsp;&nbsp;The&nbsp;final&nbsp;<BR>
result&nbsp;would&nbsp;be&nbsp;&quot;55&quot;.&nbsp;&nbsp;If&nbsp;you&nbsp;were&nbsp;looking&nbsp;for&nbsp;10,&nbsp;you&nbsp;would&nbsp;therefore&nbsp;<BR>
have&nbsp;ended&nbsp;up&nbsp;with&nbsp;erroneous&nbsp;code.&nbsp;&nbsp;Keep&nbsp;in&nbsp;mind,&nbsp;however,&nbsp;that&nbsp;in&nbsp;most&nbsp;<BR>
instances,&nbsp;the&nbsp;driver&nbsp;will&nbsp;not&nbsp;do&nbsp;something&nbsp;so&nbsp;useful&nbsp;as&nbsp;coming&nbsp;up&nbsp;with&nbsp;<BR>
&quot;55&quot;.&nbsp;&nbsp;It&nbsp;comes&nbsp;up&nbsp;with&nbsp;&quot;55&quot;&nbsp;cause&nbsp;it&nbsp;has&nbsp;a&nbsp;rule&nbsp;for&nbsp;adding&nbsp;a&nbsp;string&nbsp;<BR>
to&nbsp;an&nbsp;int,&nbsp;namely&nbsp;to&nbsp;treat&nbsp;the&nbsp;int&nbsp;as&nbsp;a&nbsp;string.&nbsp;&nbsp;In&nbsp;most&nbsp;cases,&nbsp;if&nbsp;you&nbsp;<BR>
use&nbsp;a&nbsp;data&nbsp;type&nbsp;for&nbsp;which&nbsp;an&nbsp;operation&nbsp;or&nbsp;function&nbsp;is&nbsp;not&nbsp;defined&nbsp;<BR>
(like&nbsp;if&nbsp;you&nbsp;tried&nbsp;to&nbsp;divide&nbsp;&quot;this&nbsp;is&quot;&nbsp;by&nbsp;&quot;nonsense&quot;,&nbsp;&quot;this&nbsp;is&quot;/&quot;nonsense&quot;),&nbsp;<BR>
the&nbsp;driver&nbsp;will&nbsp;barf&nbsp;and&nbsp;report&nbsp;an&nbsp;error&nbsp;to&nbsp;you.&nbsp;<BR>
&nbsp;<BR>
--&nbsp;<BR>
小樓一夜聽秋雨&nbsp;<BR>
--&nbsp;<BR>
佇倚危樓風細細&nbsp;望極春愁&nbsp;黯黯生天際&nbsp;&nbsp;草色煙光殘照裡&nbsp;無言誰會憑欄意[0&nbsp;<BR>
擬把疏狂圖一醉&nbsp;對酒當歌&nbsp;強樂還無味&nbsp;&nbsp;衣帶漸寬終不悔&nbsp;為伊消得人憔悴&nbsp;<BR>
&nbsp;<BR>
※&nbsp;來源:•BBS&nbsp;水木清華站&nbsp;bbs.net.tsinghua.edu.cn•[FROM:&nbsp;166.111.5.25]&nbsp;<BR>
<A HREF="00000003.htm">上一篇</A>
<A HREF='javascript:history.go(-1)'>返回上一頁</A>
<A HREF="index.htm">回到目錄</A>
<A HREF="#top">回到頁首</A>
<A HREF="00000005.htm">下一篇</A>
</H1></CENTER>
<CENTER><H1>BBS水木清華站︰精華區</H1></CENTER>
</BODY></HTML>