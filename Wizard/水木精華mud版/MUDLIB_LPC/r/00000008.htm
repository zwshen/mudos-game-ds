<HTML>
<HEAD>
<TITLE>BBS水木清華站︰精華區</TITLE>
</HEAD>
<BODY>
<CENTER><H1>BBS水木清華站︰精華區</H1></CENTER>
<A Name="top"></a>
發信人:&nbsp;jameson&nbsp;(阿其),&nbsp;信區:&nbsp;Mud_Builder&nbsp;<BR>
標&nbsp;&nbsp;題:&nbsp;LPC&nbsp;Manual&nbsp;-&nbsp;LPC&nbsp;basics&nbsp;(4)&nbsp;<BR>
發信站:&nbsp;BBS&nbsp;水木清華站&nbsp;(Fri&nbsp;May&nbsp;23&nbsp;18:05:24&nbsp;1997)&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
Conditionals&nbsp;<BR>
&nbsp;<BR>
Conditional&nbsp;statements&nbsp;are&nbsp;used&nbsp;a&nbsp;lot&nbsp;in&nbsp;LPC,&nbsp;and&nbsp;there&nbsp;is&nbsp;several&nbsp;ways&nbsp;of&nbsp;writing&nbsp;them.&nbsp;A&nbsp;very&nbsp;<BR>
important&nbsp;concept&nbsp;is&nbsp;that&nbsp;0&nbsp;is&nbsp;considered&nbsp;as&nbsp;false&nbsp;and&nbsp;any&nbsp;other&nbsp;value&nbsp;as&nbsp;true&nbsp;in&nbsp;tests.&nbsp;This&nbsp;means&nbsp;<BR>
that&nbsp;empty&nbsp;listings&nbsp;({}),&nbsp;empty&nbsp;strings&nbsp;&quot;&quot;&nbsp;and&nbsp;empty&nbsp;mappings&nbsp;([])&nbsp;also&nbsp;are&nbsp;evaluated&nbsp;as&nbsp;true&nbsp;<BR>
since&nbsp;they&nbsp;aren't&nbsp;0.&nbsp;You&nbsp;have&nbsp;to&nbsp;use&nbsp;special&nbsp;functions&nbsp;to&nbsp;compute&nbsp;their&nbsp;size&nbsp;or&nbsp;determine&nbsp;content&nbsp;if&nbsp;<BR>
you&nbsp;want&nbsp;test&nbsp;them,&nbsp;more&nbsp;about&nbsp;that&nbsp;later&nbsp;however.&nbsp;&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if/else:&nbsp;The&nbsp;common&nbsp;if/else&nbsp;statement&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;switch:&nbsp;The&nbsp;switch&nbsp;statement&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;?colon:&nbsp;The&nbsp;?:&nbsp;statement&nbsp;&nbsp;<BR>
&nbsp;<BR>
The&nbsp;if/else&nbsp;statement&nbsp;<BR>
&nbsp;<BR>
The&nbsp;most&nbsp;common&nbsp;conditional&nbsp;statement&nbsp;is&nbsp;naturally&nbsp;the&nbsp;if&nbsp;statement.&nbsp;It's&nbsp;easy&nbsp;to&nbsp;use&nbsp;and&nbsp;can&nbsp;be&nbsp;<BR>
combined&nbsp;with&nbsp;an&nbsp;else&nbsp;clause&nbsp;to&nbsp;handle&nbsp;failed&nbsp;tests.&nbsp;It's&nbsp;written&nbsp;like&nbsp;this:&nbsp;&nbsp;<BR>
&nbsp;<BR>
if&nbsp;(expression)&nbsp;statement;&nbsp;<BR>
e.g.&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(a&nbsp;==&nbsp;5)&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;-=&nbsp;4;&nbsp;<BR>
&nbsp;<BR>
If&nbsp;you&nbsp;want&nbsp;to&nbsp;handle&nbsp;the&nbsp;failed&nbsp;match,&nbsp;you&nbsp;add&nbsp;an&nbsp;else&nbsp;statement&nbsp;like&nbsp;this:&nbsp;&nbsp;<BR>
&nbsp;<BR>
if&nbsp;(expression)&nbsp;true-statement&nbsp;else&nbsp;false-statement;&nbsp;<BR>
e.g.&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(a&nbsp;==&nbsp;5)&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;-=&nbsp;4;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;+=&nbsp;18;&nbsp;<BR>
&nbsp;<BR>
The&nbsp;switch&nbsp;statement&nbsp;<BR>
&nbsp;<BR>
If&nbsp;one&nbsp;variable&nbsp;has&nbsp;to&nbsp;be&nbsp;tested&nbsp;for&nbsp;a&nbsp;lot&nbsp;of&nbsp;different&nbsp;values,&nbsp;the&nbsp;resulting&nbsp;list&nbsp;of&nbsp;`if-else-if-else'&nbsp;<BR>
statements&nbsp;soon&nbsp;gets&nbsp;very&nbsp;long&nbsp;and&nbsp;not&nbsp;very&nbsp;easy&nbsp;to&nbsp;read.&nbsp;However,&nbsp;if&nbsp;the&nbsp;type&nbsp;of&nbsp;the&nbsp;value&nbsp;you&nbsp;are&nbsp;<BR>
testing&nbsp;is&nbsp;an&nbsp;integer,&nbsp;a&nbsp;float&nbsp;or&nbsp;a&nbsp;string&nbsp;you&nbsp;can&nbsp;use&nbsp;a&nbsp;much&nbsp;denser&nbsp;and&nbsp;neater&nbsp;way&nbsp;of&nbsp;coding.&nbsp;Assume&nbsp;<BR>
you&nbsp;have&nbsp;the&nbsp;following&nbsp;code&nbsp;you&nbsp;want&nbsp;to&nbsp;write:&nbsp;&nbsp;<BR>
&nbsp;<BR>
if&nbsp;(name&nbsp;==&nbsp;&quot;fatty&quot;)&nbsp;<BR>
{&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;nat&nbsp;=&nbsp;&quot;se&quot;;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;desc&nbsp;=&nbsp;&quot;blimp&quot;;&nbsp;<BR>
}&nbsp;<BR>
else&nbsp;if&nbsp;(name&nbsp;==&nbsp;&quot;plugh&quot;)&nbsp;<BR>
{&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;nat&nbsp;=&nbsp;&quot;no&quot;;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;desc&nbsp;=&nbsp;&quot;warlock&quot;;&nbsp;<BR>
}&nbsp;<BR>
else&nbsp;if&nbsp;(name&nbsp;==&nbsp;&quot;olorin&quot;)&nbsp;<BR>
{&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;nat&nbsp;=&nbsp;&quot;de&quot;;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;desc&nbsp;=&nbsp;&quot;bloodshot&quot;;&nbsp;<BR>
}&nbsp;<BR>
else&nbsp;<BR>
{&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;nat&nbsp;=&nbsp;&quot;x&quot;;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;desc&nbsp;=&nbsp;&quot;unknown&quot;;&nbsp;<BR>
}&nbsp;<BR>
&nbsp;<BR>
The&nbsp;better&nbsp;way&nbsp;of&nbsp;writing&nbsp;this&nbsp;is&nbsp;as&nbsp;follows:&nbsp;&nbsp;<BR>
&nbsp;<BR>
switch&nbsp;(name)&nbsp;<BR>
{&nbsp;<BR>
case&nbsp;&quot;fatty&quot;:&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;nat&nbsp;=&nbsp;&quot;se&quot;;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;desc&nbsp;=&nbsp;&quot;blimp&quot;;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;break;&nbsp;<BR>
&nbsp;<BR>
case&nbsp;&quot;plugh&quot;:&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;nat&nbsp;=&nbsp;&quot;no&quot;;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;desc&nbsp;=&nbsp;&quot;warlock&quot;;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;break;&nbsp;<BR>
&nbsp;<BR>
case&nbsp;&quot;olorin&quot;:&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;nat&nbsp;=&nbsp;&quot;de&quot;;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;desc&nbsp;=&nbsp;&quot;bloodshot&quot;;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;break;&nbsp;<BR>
&nbsp;<BR>
default:&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;nat&nbsp;=&nbsp;&quot;x&quot;;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;desc&nbsp;=&nbsp;&quot;unknown&quot;;&nbsp;<BR>
}&nbsp;<BR>
&nbsp;<BR>
The&nbsp;workings&nbsp;of&nbsp;this&nbsp;statement&nbsp;is&nbsp;very&nbsp;simple&nbsp;really:&nbsp;switch&nbsp;sets&nbsp;up&nbsp;the&nbsp;expression&nbsp;value&nbsp;within&nbsp;the&nbsp;<BR>
parenthesis&nbsp;for&nbsp;matching.&nbsp;Then&nbsp;every&nbsp;expression&nbsp;following&nbsp;a&nbsp;case&nbsp;is&nbsp;examined&nbsp;to&nbsp;find&nbsp;a&nbsp;match.&nbsp;&nbsp;<BR>
&nbsp;<BR>
NB!&nbsp;The&nbsp;case&nbsp;expression&nbsp;must&nbsp;be&nbsp;a&nbsp;constant&nbsp;value,&nbsp;it&nbsp;can't&nbsp;be&nbsp;a&nbsp;variable,&nbsp;function&nbsp;call&nbsp;or&nbsp;other&nbsp;type&nbsp;<BR>
of&nbsp;expression.&nbsp;&nbsp;<BR>
&nbsp;<BR>
After&nbsp;a&nbsp;match&nbsp;has&nbsp;been&nbsp;found&nbsp;the&nbsp;following&nbsp;statements&nbsp;are&nbsp;executed&nbsp;until&nbsp;a&nbsp;break&nbsp;statement&nbsp;is&nbsp;<BR>
found.&nbsp;If&nbsp;no&nbsp;matching&nbsp;value&nbsp;can&nbsp;be&nbsp;found,&nbsp;the&nbsp;default&nbsp;statements&nbsp;are&nbsp;executed&nbsp;instead.&nbsp;&nbsp;<BR>
&nbsp;<BR>
NB!&nbsp;While&nbsp;it's&nbsp;not&nbsp;mandatory&nbsp;to&nbsp;have&nbsp;a&nbsp;default&nbsp;section,&nbsp;it's&nbsp;highly&nbsp;recommended&nbsp;since&nbsp;that&nbsp;usually&nbsp;<BR>
means&nbsp;that&nbsp;something&nbsp;has&nbsp;happened&nbsp;that&nbsp;wasn't&nbsp;predicted&nbsp;when&nbsp;writing&nbsp;the&nbsp;program.&nbsp;If&nbsp;you&nbsp;have&nbsp;<BR>
written&nbsp;it&nbsp;that&nbsp;way&nbsp;on&nbsp;purpose&nbsp;that's&nbsp;one&nbsp;thing,&nbsp;but&nbsp;if&nbsp;you&nbsp;expect&nbsp;only&nbsp;a&nbsp;certain&nbsp;range&nbsp;of&nbsp;values&nbsp;and&nbsp;<BR>
another&nbsp;one&nbsp;turns&nbsp;up&nbsp;it's&nbsp;usually&nbsp;very&nbsp;good&nbsp;to&nbsp;have&nbsp;an&nbsp;error&nbsp;message&nbsp;there&nbsp;to&nbsp;notify&nbsp;the&nbsp;user&nbsp;that&nbsp;<BR>
something&nbsp;unexpected&nbsp;happened.&nbsp;&nbsp;<BR>
&nbsp;<BR>
If&nbsp;you&nbsp;forget&nbsp;to&nbsp;put&nbsp;in&nbsp;a&nbsp;'break'&nbsp;statement&nbsp;the&nbsp;following&nbsp;'case'&nbsp;expression&nbsp;will&nbsp;be&nbsp;executed.&nbsp;This&nbsp;might&nbsp;<BR>
sound&nbsp;like&nbsp;something&nbsp;you&nbsp;don't&nbsp;want,&nbsp;but&nbsp;if&nbsp;in&nbsp;the&nbsp;example&nbsp;above&nbsp;the&nbsp;names&nbsp;`fatty'&nbsp;and&nbsp;`plugh'&nbsp;<BR>
both&nbsp;should&nbsp;generate&nbsp;the&nbsp;same&nbsp;result&nbsp;you&nbsp;could&nbsp;write:&nbsp;&nbsp;<BR>
&nbsp;<BR>
case&nbsp;&quot;fatty&quot;:&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;FALLTHROUGH&nbsp;*/&nbsp;<BR>
case&nbsp;&quot;plugh&quot;:&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;&nbsp;code&nbsp;&gt;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;break;&nbsp;<BR>
&nbsp;<BR>
...&nbsp;and&nbsp;save&nbsp;a&nbsp;bit&nbsp;of&nbsp;space.&nbsp;Writing&nbsp;code&nbsp;with&nbsp;switch&nbsp;doesn't&nbsp;make&nbsp;it&nbsp;any&nbsp;quicker&nbsp;to&nbsp;execute,&nbsp;but&nbsp;a&nbsp;lot&nbsp;<BR>
easier&nbsp;to&nbsp;read&nbsp;thereby&nbsp;reducing&nbsp;the&nbsp;chance&nbsp;of&nbsp;making&nbsp;mistakes&nbsp;while&nbsp;coding.&nbsp;Remember&nbsp;to&nbsp;put&nbsp;the&nbsp;/*&nbsp;<BR>
FALLTHROUGH&nbsp;*/&nbsp;comment&nbsp;there&nbsp;though,&nbsp;or&nbsp;it&nbsp;might&nbsp;be&nbsp;hard&nbsp;to&nbsp;remember&nbsp;later&nbsp;if&nbsp;it&nbsp;was&nbsp;intentional&nbsp;<BR>
or&nbsp;an&nbsp;ommission&nbsp;of&nbsp;a&nbsp;break&nbsp;statement,&nbsp;particularly&nbsp;if&nbsp;you&nbsp;have&nbsp;some&nbsp;code&nbsp;that's&nbsp;executed&nbsp;previously&nbsp;<BR>
to&nbsp;the&nbsp;fallthrough.&nbsp;A&nbsp;good&nbsp;idea&nbsp;is&nbsp;usually&nbsp;to&nbsp;add&nbsp;an&nbsp;extra&nbsp;linefeed&nbsp;after&nbsp;a&nbsp;break&nbsp;statement&nbsp;just&nbsp;to&nbsp;give&nbsp;<BR>
some&nbsp;extra&nbsp;'breathing&nbsp;space'&nbsp;to&nbsp;improve&nbsp;on&nbsp;legibility.&nbsp;&nbsp;<BR>
&nbsp;<BR>
The&nbsp;?:&nbsp;expression&nbsp;<BR>
&nbsp;<BR>
This&nbsp;is&nbsp;a&nbsp;very&nbsp;condensed&nbsp;way&nbsp;of&nbsp;writing&nbsp;an&nbsp;if/else&nbsp;statement&nbsp;and&nbsp;return&nbsp;a&nbsp;value&nbsp;depending&nbsp;on&nbsp;how&nbsp;<BR>
the&nbsp;test&nbsp;turned&nbsp;out.&nbsp;This&nbsp;isn't&nbsp;a&nbsp;statement&nbsp;naturally,&nbsp;it's&nbsp;an&nbsp;expression&nbsp;since&nbsp;it&nbsp;returns&nbsp;a&nbsp;value,&nbsp;but&nbsp;it&nbsp;<BR>
was&nbsp;hard&nbsp;to&nbsp;explain&nbsp;earlier&nbsp;before&nbsp;explaining&nbsp;the&nbsp;if/else&nbsp;statement.&nbsp;&nbsp;<BR>
&nbsp;<BR>
Suppose&nbsp;you&nbsp;want&nbsp;to&nbsp;write&nbsp;the&nbsp;following:&nbsp;&nbsp;<BR>
&nbsp;<BR>
if&nbsp;(test_expression)&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;=&nbsp;if_expression;&nbsp;<BR>
else&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;=&nbsp;else_expression;&nbsp;<BR>
&nbsp;<BR>
You&nbsp;can&nbsp;write&nbsp;that&nbsp;much&nbsp;more&nbsp;condensed&nbsp;in&nbsp;this&nbsp;way:&nbsp;&nbsp;<BR>
&nbsp;<BR>
var&nbsp;=&nbsp;test_expression&nbsp;?&nbsp;if_expression&nbsp;:&nbsp;else_expression;&nbsp;<BR>
e.g.&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;name&nbsp;=&nbsp;day&nbsp;==&nbsp;2&nbsp;?&nbsp;&quot;tuesday&quot;&nbsp;:&nbsp;&quot;another&nbsp;day&quot;;&nbsp;<BR>
&nbsp;<BR>
It&nbsp;can&nbsp;be&nbsp;debated&nbsp;if&nbsp;writing&nbsp;code&nbsp;this&nbsp;way&nbsp;makes&nbsp;you&nbsp;code&nbsp;easier&nbsp;or&nbsp;harder&nbsp;to&nbsp;read.&nbsp;As&nbsp;a&nbsp;rule&nbsp;it&nbsp;can&nbsp;be&nbsp;<BR>
argued&nbsp;rather&nbsp;successfully&nbsp;that&nbsp;one&nbsp;expression&nbsp;of&nbsp;that&nbsp;kind&nbsp;does&nbsp;make&nbsp;it&nbsp;clearer,&nbsp;but&nbsp;that&nbsp;a&nbsp;<BR>
combination&nbsp;of&nbsp;several&nbsp;only&nbsp;makes&nbsp;it&nbsp;worse.&nbsp;Something&nbsp;like&nbsp;this&nbsp;definately&nbsp;isn't&nbsp;an&nbsp;improvement:&nbsp;&nbsp;<BR>
&nbsp;<BR>
name&nbsp;=&nbsp;day&nbsp;==&nbsp;2&nbsp;?&nbsp;time&nbsp;==&nbsp;18&nbsp;?&nbsp;&quot;miller&nbsp;time&quot;&nbsp;:&nbsp;&quot;tuesday&quot;&nbsp;:&nbsp;&quot;another&nbsp;day&quot;;&nbsp;<BR>
&nbsp;<BR>
Loop&nbsp;statements&nbsp;<BR>
&nbsp;<BR>
Basically&nbsp;there&nbsp;are&nbsp;two&nbsp;kinds&nbsp;of&nbsp;loop&nbsp;statements&nbsp;which&nbsp;incorporate&nbsp;the&nbsp;use&nbsp;of&nbsp;conditional&nbsp;statements&nbsp;<BR>
within&nbsp;them,&nbsp;i.e.&nbsp;they&nbsp;can&nbsp;be&nbsp;programmed&nbsp;to&nbsp;execute&nbsp;only&nbsp;until&nbsp;a&nbsp;certain&nbsp;state&nbsp;is&nbsp;reached.&nbsp;&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for:&nbsp;The&nbsp;for&nbsp;statement&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while:&nbsp;The&nbsp;while&nbsp;statement&nbsp;&nbsp;<BR>
&nbsp;<BR>
The&nbsp;for&nbsp;statement&nbsp;<BR>
&nbsp;<BR>
If&nbsp;you&nbsp;want&nbsp;a&nbsp;simple&nbsp;counter&nbsp;you&nbsp;should&nbsp;use&nbsp;the&nbsp;for&nbsp;statement.&nbsp;The&nbsp;syntax&nbsp;is&nbsp;as&nbsp;follows:&nbsp;&nbsp;<BR>
&nbsp;<BR>
for&nbsp;(initalize_statement&nbsp;;&nbsp;test_expression&nbsp;;&nbsp;end_of_loop_statement)&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;body_statement;&nbsp;<BR>
&nbsp;<BR>
When&nbsp;first&nbsp;entered,&nbsp;the&nbsp;for&nbsp;statement&nbsp;executes&nbsp;the&nbsp;initialize_statement&nbsp;part.&nbsp;This&nbsp;part&nbsp;usually&nbsp;is&nbsp;<BR>
used&nbsp;to&nbsp;initialize&nbsp;counters&nbsp;or&nbsp;values&nbsp;used&nbsp;during&nbsp;the&nbsp;actual&nbsp;loop.&nbsp;Then&nbsp;the&nbsp;actual&nbsp;loop&nbsp;starts.&nbsp;Every&nbsp;<BR>
loop&nbsp;starts&nbsp;by&nbsp;executing&nbsp;the&nbsp;test_expression&nbsp;and&nbsp;examining&nbsp;the&nbsp;result.&nbsp;This&nbsp;is&nbsp;a&nbsp;truth&nbsp;conditional,&nbsp;so&nbsp;<BR>
any&nbsp;answer&nbsp;not&nbsp;equal&nbsp;to&nbsp;0&nbsp;will&nbsp;cause&nbsp;the&nbsp;loop&nbsp;to&nbsp;be&nbsp;run.&nbsp;If&nbsp;the&nbsp;answer&nbsp;is&nbsp;true&nbsp;the&nbsp;body_statement&nbsp;is&nbsp;<BR>
executed,&nbsp;immediately&nbsp;followed&nbsp;by&nbsp;the&nbsp;end_of_loop_statement.&nbsp;In&nbsp;the&nbsp;body_statement&nbsp;you&nbsp;usually&nbsp;<BR>
do&nbsp;what&nbsp;you&nbsp;want&nbsp;to&nbsp;have&nbsp;done&nbsp;during&nbsp;the&nbsp;loop,&nbsp;in&nbsp;the&nbsp;end_of_loop_statement&nbsp;you&nbsp;usually&nbsp;increment&nbsp;<BR>
or&nbsp;decrement&nbsp;counters&nbsp;as&nbsp;needed.&nbsp;&nbsp;<BR>
&nbsp;<BR>
Throughout&nbsp;the&nbsp;previous&nbsp;section&nbsp;I&nbsp;used&nbsp;the&nbsp;word&nbsp;usually&nbsp;a&nbsp;lot.&nbsp;This&nbsp;is&nbsp;because&nbsp;you&nbsp;don't&nbsp;have&nbsp;to&nbsp;do&nbsp;it&nbsp;<BR>
that&nbsp;way,&nbsp;there's&nbsp;no&nbsp;rule&nbsp;forcing&nbsp;you&nbsp;to&nbsp;make&nbsp;use&nbsp;of&nbsp;the&nbsp;statements&nbsp;in&nbsp;the&nbsp;way&nbsp;I&nbsp;said.&nbsp;However,&nbsp;for&nbsp;<BR>
now&nbsp;let's&nbsp;stick&nbsp;to&nbsp;the&nbsp;regular&nbsp;way&nbsp;of&nbsp;using&nbsp;the&nbsp;for-statement.&nbsp;Later&nbsp;on&nbsp;I'll&nbsp;describe&nbsp;more&nbsp;refined&nbsp;<BR>
techniques.&nbsp;&nbsp;<BR>
&nbsp;<BR>
Assume&nbsp;you&nbsp;want&nbsp;to&nbsp;compute&nbsp;the&nbsp;sum&nbsp;of&nbsp;all&nbsp;integers&nbsp;from&nbsp;7&nbsp;to&nbsp;123&nbsp;and&nbsp;don't&nbsp;know&nbsp;the&nbsp;formula&nbsp;((x2^2&nbsp;<BR>
+&nbsp;x1^2)&nbsp;/&nbsp;2).&nbsp;The&nbsp;easiest&nbsp;(if&nbsp;not&nbsp;most&nbsp;efficient)&nbsp;way&nbsp;of&nbsp;doing&nbsp;that&nbsp;is&nbsp;a&nbsp;loop.&nbsp;&nbsp;<BR>
&nbsp;<BR>
result&nbsp;=&nbsp;0;&nbsp;<BR>
for&nbsp;(count&nbsp;=&nbsp;7&nbsp;;&nbsp;count&nbsp;&lt;&nbsp;124&nbsp;;&nbsp;count++)&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;result&nbsp;+=&nbsp;count;&nbsp;<BR>
&nbsp;<BR>
What&nbsp;happens&nbsp;is&nbsp;that&nbsp;first&nbsp;of&nbsp;all&nbsp;result&nbsp;is&nbsp;set&nbsp;to&nbsp;0,&nbsp;then&nbsp;the&nbsp;actual&nbsp;for-statement&nbsp;is&nbsp;entered.&nbsp;It&nbsp;begins&nbsp;<BR>
by&nbsp;setting&nbsp;the&nbsp;variable&nbsp;count&nbsp;to&nbsp;7.&nbsp;Then&nbsp;the&nbsp;loop&nbsp;is&nbsp;entered,&nbsp;beginning&nbsp;by&nbsp;testing&nbsp;if&nbsp;count&nbsp;(=&nbsp;7)&nbsp;is&nbsp;less&nbsp;<BR>
than&nbsp;124,&nbsp;it&nbsp;is&nbsp;so&nbsp;the&nbsp;value&nbsp;is&nbsp;added&nbsp;to&nbsp;count.&nbsp;Then&nbsp;count&nbsp;is&nbsp;incremented&nbsp;one&nbsp;step&nbsp;and&nbsp;the&nbsp;loop&nbsp;entered&nbsp;<BR>
again.&nbsp;This&nbsp;goes&nbsp;on&nbsp;until&nbsp;the&nbsp;count&nbsp;value&nbsp;reaches&nbsp;124.&nbsp;Since&nbsp;that&nbsp;isn't&nbsp;less&nbsp;than&nbsp;124&nbsp;the&nbsp;loop&nbsp;is&nbsp;ended.&nbsp;&nbsp;<BR>
&nbsp;<BR>
NB!&nbsp;The&nbsp;value&nbsp;of&nbsp;count&nbsp;after&nbsp;the&nbsp;for-statement&nbsp;will&nbsp;be&nbsp;124&nbsp;and&nbsp;not&nbsp;123&nbsp;that&nbsp;some&nbsp;people&nbsp;tend&nbsp;to&nbsp;<BR>
believe.&nbsp;The&nbsp;test_expression&nbsp;must&nbsp;evaluate&nbsp;to&nbsp;false&nbsp;in&nbsp;order&nbsp;for&nbsp;the&nbsp;loop&nbsp;to&nbsp;end,&nbsp;and&nbsp;in&nbsp;this&nbsp;case&nbsp;<BR>
the&nbsp;value&nbsp;for&nbsp;count&nbsp;then&nbsp;must&nbsp;be&nbsp;124.&nbsp;&nbsp;<BR>
&nbsp;<BR>
The&nbsp;while&nbsp;statement&nbsp;<BR>
&nbsp;<BR>
The&nbsp;while&nbsp;statement&nbsp;is&nbsp;pretty&nbsp;straight-forward,&nbsp;you&nbsp;can&nbsp;guess&nbsp;from&nbsp;the&nbsp;very&nbsp;name&nbsp;what&nbsp;it&nbsp;does.&nbsp;The&nbsp;<BR>
statement&nbsp;will&nbsp;perform&nbsp;another&nbsp;statement&nbsp;over&nbsp;and&nbsp;over&nbsp;until&nbsp;a&nbsp;given&nbsp;while&nbsp;expression&nbsp;returns&nbsp;false.&nbsp;<BR>
The&nbsp;syntax&nbsp;is&nbsp;simple:&nbsp;&nbsp;<BR>
&nbsp;<BR>
while&nbsp;(&lt;test&nbsp;expression&gt;)&nbsp;<BR>
&nbsp;<BR>
Note&nbsp;carefully&nbsp;that&nbsp;the&nbsp;test&nbsp;expression&nbsp;is&nbsp;checked&nbsp;first&nbsp;of&nbsp;all,&nbsp;before&nbsp;running&nbsp;the&nbsp;statement&nbsp;the&nbsp;first&nbsp;<BR>
time.&nbsp;If&nbsp;it&nbsp;evaluates&nbsp;as&nbsp;false&nbsp;the&nbsp;first&nbsp;time,&nbsp;the&nbsp;body&nbsp;is&nbsp;never&nbsp;executed.&nbsp;&nbsp;<BR>
&nbsp;<BR>
a&nbsp;=&nbsp;0;&nbsp;<BR>
while&nbsp;(a&nbsp;!=&nbsp;4)&nbsp;<BR>
{&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;+=&nbsp;5;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;/=&nbsp;2;&nbsp;<BR>
}&nbsp;<BR>
&nbsp;<BR>
The&nbsp;break&nbsp;and&nbsp;continue&nbsp;statement&nbsp;<BR>
&nbsp;<BR>
Sometimes&nbsp;during&nbsp;the&nbsp;execution&nbsp;of&nbsp;switch,&nbsp;for&nbsp;or&nbsp;while&nbsp;statements&nbsp;it&nbsp;becomes&nbsp;necessary&nbsp;to&nbsp;abort&nbsp;<BR>
execution&nbsp;of&nbsp;the&nbsp;block&nbsp;code,&nbsp;and&nbsp;continue&nbsp;execution&nbsp;outside.&nbsp;To&nbsp;do&nbsp;that&nbsp;you&nbsp;use&nbsp;the&nbsp;break&nbsp;statement.&nbsp;<BR>
It&nbsp;simply&nbsp;aborts&nbsp;execution&nbsp;of&nbsp;that&nbsp;block&nbsp;and&nbsp;continues&nbsp;outside&nbsp;it.&nbsp;&nbsp;<BR>
&nbsp;<BR>
while&nbsp;(end_condition&nbsp;&lt;&nbsp;9999)&nbsp;<BR>
{&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;If&nbsp;the&nbsp;time()&nbsp;function&nbsp;returns&nbsp;29449494,&nbsp;abort&nbsp;execution&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(time()&nbsp;==&nbsp;29449494)&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;&nbsp;code&nbsp;&gt;&nbsp;<BR>
}&nbsp;<BR>
&nbsp;<BR>
//&nbsp;Continue&nbsp;here&nbsp;both&nbsp;after&nbsp;a&nbsp;break&nbsp;or&nbsp;when&nbsp;the&nbsp;full&nbsp;loop&nbsp;is&nbsp;done.&nbsp;<BR>
&lt;&nbsp;code&nbsp;&gt;&nbsp;<BR>
&nbsp;<BR>
Somtimes&nbsp;you&nbsp;merely&nbsp;want&nbsp;to&nbsp;start&nbsp;over&nbsp;from&nbsp;the&nbsp;top&nbsp;of&nbsp;the&nbsp;loop&nbsp;you&nbsp;are&nbsp;running,&nbsp;in&nbsp;a&nbsp;for&nbsp;or&nbsp;while&nbsp;<BR>
statement,&nbsp;that's&nbsp;when&nbsp;you&nbsp;use&nbsp;the&nbsp;continue&nbsp;statement.&nbsp;&nbsp;<BR>
&nbsp;<BR>
//&nbsp;Add&nbsp;all&nbsp;even&nbsp;numbers&nbsp;<BR>
sum&nbsp;=&nbsp;0;&nbsp;<BR>
for&nbsp;(i&nbsp;=&nbsp;0&nbsp;;&nbsp;i&nbsp;&lt;&nbsp;10000&nbsp;;&nbsp;i++)&nbsp;<BR>
{&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Start&nbsp;from&nbsp;the&nbsp;top&nbsp;of&nbsp;the&nbsp;loop&nbsp;if&nbsp;'i'&nbsp;is&nbsp;an&nbsp;odd&nbsp;number&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(i&nbsp;%&nbsp;2)&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;sum&nbsp;+=&nbsp;i;&nbsp;<BR>
}&nbsp;<BR>
&nbsp;<BR>
--&nbsp;<BR>
※&nbsp;來源:•BBS&nbsp;水木清華站&nbsp;bbs.net.tsinghua.edu.cn•[FROM:&nbsp;klab.ishii.utsu]&nbsp;<BR>
<A HREF="00000007.htm">上一篇</A>
<A HREF='javascript:history.go(-1)'>返回上一頁</A>
<A HREF="index.htm">回到目錄</A>
<A HREF="#top">回到頁首</A>
<A HREF="00000009.htm">下一篇</A>
</H1></CENTER>
<CENTER><H1>BBS水木清華站︰精華區</H1></CENTER>
</BODY></HTML>