<HTML>
<HEAD>
<TITLE>BBS水木清華站︰精華區</TITLE>
</HEAD>
<BODY>
<CENTER><H1>BBS水木清華站︰精華區</H1></CENTER>
<A Name="top"></a>
發信人:&nbsp;jameson&nbsp;(阿其),&nbsp;信區:&nbsp;Mud_Builder&nbsp;<BR>
標&nbsp;&nbsp;題:&nbsp;LPC&nbsp;Manual&nbsp;-&nbsp;LPC&nbsp;basics&nbsp;(5)&nbsp;<BR>
發信站:&nbsp;BBS&nbsp;水木清華站&nbsp;(Fri&nbsp;May&nbsp;23&nbsp;18:08:53&nbsp;1997)&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
Arrays&nbsp;and&nbsp;Mappings&nbsp;<BR>
&nbsp;<BR>
It's&nbsp;time&nbsp;to&nbsp;dig&nbsp;deeper&nbsp;into&nbsp;the&nbsp;special&nbsp;type&nbsp;array&nbsp;and&nbsp;mapping.&nbsp;Their&nbsp;use&nbsp;might&nbsp;look&nbsp;similar&nbsp;but&nbsp;in&nbsp;<BR>
fact&nbsp;they&nbsp;are&nbsp;very&nbsp;different&nbsp;from&nbsp;each&nbsp;other&nbsp;as&nbsp;you&nbsp;will&nbsp;see.&nbsp;&nbsp;<BR>
&nbsp;<BR>
To&nbsp;both&nbsp;of&nbsp;these&nbsp;data&nbsp;types&nbsp;there&nbsp;exists&nbsp;a&nbsp;number&nbsp;of&nbsp;useful&nbsp;(indeed&nbsp;even&nbsp;essential)&nbsp;efuns&nbsp;that&nbsp;<BR>
manipulates&nbsp;them&nbsp;and&nbsp;extracts&nbsp;information&nbsp;from&nbsp;them.&nbsp;They&nbsp;will&nbsp;be&nbsp;described&nbsp;in&nbsp;total&nbsp;later&nbsp;however,&nbsp;<BR>
only&nbsp;some&nbsp;are&nbsp;mentioned&nbsp;here.&nbsp;&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Arrays:&nbsp;How&nbsp;to&nbsp;declare&nbsp;and&nbsp;use&nbsp;arrays&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Mappings:&nbsp;How&nbsp;to&nbsp;declare&nbsp;and&nbsp;use&nbsp;mappings&nbsp;&nbsp;<BR>
&nbsp;<BR>
How&nbsp;to&nbsp;declare&nbsp;and&nbsp;use&nbsp;arrays&nbsp;<BR>
&nbsp;<BR>
Arrays&nbsp;really&nbsp;aren't&nbsp;arrays&nbsp;in&nbsp;the&nbsp;proper&nbsp;sense&nbsp;of&nbsp;the&nbsp;word.&nbsp;They&nbsp;can&nbsp;better&nbsp;be&nbsp;seen&nbsp;as&nbsp;lists&nbsp;with&nbsp;fixed&nbsp;<BR>
order.&nbsp;The&nbsp;difference&nbsp;might&nbsp;seem&nbsp;slight,&nbsp;but&nbsp;it&nbsp;makes&nbsp;sense&nbsp;to&nbsp;the&nbsp;computer-science&nbsp;buffs&nbsp;:)&nbsp;&nbsp;<BR>
&nbsp;<BR>
Arrays&nbsp;are&nbsp;type-specific.&nbsp;This&nbsp;means&nbsp;that&nbsp;an&nbsp;array&nbsp;of&nbsp;a&nbsp;certain&nbsp;type&nbsp;only&nbsp;can&nbsp;contain&nbsp;variables&nbsp;of&nbsp;that&nbsp;<BR>
single&nbsp;type.&nbsp;Another&nbsp;restrictions&nbsp;is&nbsp;that&nbsp;all&nbsp;arrays&nbsp;are&nbsp;one-dimensional.&nbsp;You&nbsp;can't&nbsp;have&nbsp;an&nbsp;array&nbsp;of&nbsp;<BR>
arrays.&nbsp;However,&nbsp;the&nbsp;mixed&nbsp;type&nbsp;takes&nbsp;care&nbsp;of&nbsp;these&nbsp;limitations.&nbsp;A&nbsp;mixed&nbsp;variable&nbsp;can&nbsp;act&nbsp;as&nbsp;an&nbsp;<BR>
array&nbsp;containing&nbsp;any&nbsp;data&nbsp;type,&nbsp;even&nbsp;other&nbsp;arrays.&nbsp;As&nbsp;a&nbsp;rule&nbsp;you&nbsp;should&nbsp;try&nbsp;to&nbsp;use&nbsp;properly&nbsp;typed&nbsp;<BR>
arrays&nbsp;to&nbsp;minimize&nbsp;the&nbsp;probabilities&nbsp;of&nbsp;programming&nbsp;mistakes&nbsp;however.&nbsp;&nbsp;<BR>
&nbsp;<BR>
You&nbsp;declare&nbsp;an&nbsp;array&nbsp;like&nbsp;this:&nbsp;&nbsp;<BR>
&nbsp;<BR>
&lt;type&gt;&nbsp;*&lt;array&nbsp;name&gt;;&nbsp;<BR>
e.g.&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;*my_arr,&nbsp;*your_arr;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;float&nbsp;*another_arr;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;object&nbsp;*ob_arr;&nbsp;<BR>
&nbsp;<BR>
The&nbsp;initial&nbsp;values&nbsp;of&nbsp;these&nbsp;declared&nbsp;arrays&nbsp;is&nbsp;'0',&nbsp;not&nbsp;an&nbsp;empty&nbsp;array.&nbsp;I&nbsp;repeat:&nbsp;they&nbsp;are&nbsp;initialized&nbsp;to&nbsp;0&nbsp;<BR>
and&nbsp;not&nbsp;to&nbsp;an&nbsp;empty&nbsp;array.&nbsp;Keep&nbsp;this&nbsp;in&nbsp;mind!&nbsp;&nbsp;<BR>
&nbsp;<BR>
You&nbsp;can&nbsp;allocate&nbsp;and&nbsp;initialize&nbsp;an&nbsp;array&nbsp;like&nbsp;this:&nbsp;&nbsp;<BR>
&nbsp;<BR>
&lt;array&gt;&nbsp;=&nbsp;({&nbsp;elem1,&nbsp;elem2,&nbsp;elem3,&nbsp;...,&nbsp;elemN&nbsp;});&nbsp;<BR>
e.g.&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;my_arr&nbsp;=&nbsp;({&nbsp;1,&nbsp;383,&nbsp;5,&nbsp;391,&nbsp;-4,&nbsp;6&nbsp;});&nbsp;<BR>
&nbsp;<BR>
You&nbsp;access&nbsp;members&nbsp;of&nbsp;the&nbsp;array&nbsp;using&nbsp;brackets&nbsp;on&nbsp;the&nbsp;variable&nbsp;name.&nbsp;(Assume&nbsp;val&nbsp;here&nbsp;is&nbsp;declared&nbsp;<BR>
to&nbsp;be&nbsp;an&nbsp;integer).&nbsp;&nbsp;<BR>
&nbsp;<BR>
&lt;data&nbsp;variable&gt;&nbsp;=&nbsp;&lt;array&gt;[&lt;index&gt;];&nbsp;<BR>
e.g.&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;val&nbsp;=&nbsp;my_arr[3];&nbsp;<BR>
&nbsp;<BR>
LPC,&nbsp;like&nbsp;C,&nbsp;starts&nbsp;counting&nbsp;from&nbsp;0,&nbsp;making&nbsp;the&nbsp;index&nbsp;to&nbsp;the&nbsp;fourth&nbsp;value&nbsp;=&nbsp;3.&nbsp;&nbsp;<BR>
&nbsp;<BR>
To&nbsp;set&nbsp;the&nbsp;value&nbsp;of&nbsp;an&nbsp;existing&nbsp;position&nbsp;to&nbsp;a&nbsp;new&nbsp;value,&nbsp;simply&nbsp;set&nbsp;it&nbsp;using&nbsp;the&nbsp;=&nbsp;operator.&nbsp;&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;my_arr[3]&nbsp;=&nbsp;22;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;=&gt;&nbsp;({&nbsp;1,&nbsp;383,&nbsp;5,&nbsp;22,&nbsp;-4,&nbsp;6&nbsp;})&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;my_arr[3]&nbsp;=&nbsp;391;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;=&gt;&nbsp;({&nbsp;1,&nbsp;383,&nbsp;5,&nbsp;391,&nbsp;-4,&nbsp;6&nbsp;})&nbsp;<BR>
&nbsp;<BR>
If&nbsp;you&nbsp;want&nbsp;to&nbsp;make&nbsp;a&nbsp;subset&nbsp;of&nbsp;an&nbsp;array&nbsp;you&nbsp;can&nbsp;specify&nbsp;a&nbsp;range&nbsp;of&nbsp;indices&nbsp;within&nbsp;the&nbsp;brackets.&nbsp;&nbsp;<BR>
&nbsp;<BR>
&lt;array&nbsp;variable&gt;&nbsp;=&nbsp;&lt;array&gt;[&lt;start_range&gt;..&lt;end_range&gt;];&nbsp;<BR>
e.g.&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;your_arr&nbsp;=&nbsp;my_arr[1..3];&nbsp;<BR>
&nbsp;<BR>
...&nbsp;will&nbsp;result&nbsp;in&nbsp;your_arr&nbsp;becoming&nbsp;the&nbsp;new&nbsp;array&nbsp;({&nbsp;383,&nbsp;5,&nbsp;391&nbsp;});&nbsp;If&nbsp;you&nbsp;give&nbsp;a&nbsp;new&nbsp;value&nbsp;<BR>
to&nbsp;an&nbsp;old&nbsp;array,&nbsp;the&nbsp;previous&nbsp;array&nbsp;is&nbsp;lost.&nbsp;&nbsp;<BR>
&nbsp;<BR>
e.g.&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;my_arr&nbsp;=&nbsp;({&nbsp;});&nbsp;<BR>
&nbsp;<BR>
...&nbsp;will&nbsp;result&nbsp;in&nbsp;my_arr&nbsp;holding&nbsp;an&nbsp;empty&nbsp;array.&nbsp;The&nbsp;old&nbsp;array&nbsp;is&nbsp;deallocated&nbsp;and&nbsp;the&nbsp;memory&nbsp;<BR>
previously&nbsp;used&nbsp;is&nbsp;reclaimed&nbsp;by&nbsp;the&nbsp;gamedriver.&nbsp;&nbsp;<BR>
&nbsp;<BR>
If&nbsp;you&nbsp;index&nbsp;outside&nbsp;an&nbsp;array,&nbsp;an&nbsp;error&nbsp;occurs&nbsp;and&nbsp;execution&nbsp;of&nbsp;the&nbsp;object&nbsp;is&nbsp;aborted.&nbsp;However,&nbsp;range&nbsp;<BR>
indexing&nbsp;outside&nbsp;the&nbsp;array&nbsp;does&nbsp;not&nbsp;result&nbsp;in&nbsp;an&nbsp;error,&nbsp;the&nbsp;range&nbsp;is&nbsp;then&nbsp;only&nbsp;constrained&nbsp;to&nbsp;fall&nbsp;within&nbsp;<BR>
the&nbsp;array.&nbsp;&nbsp;<BR>
&nbsp;<BR>
If&nbsp;you&nbsp;want&nbsp;to&nbsp;create&nbsp;an&nbsp;empty&nbsp;array,&nbsp;initialized&nbsp;to&nbsp;0&nbsp;(no&nbsp;matter&nbsp;the&nbsp;type&nbsp;of&nbsp;the&nbsp;array,&nbsp;all&nbsp;positions&nbsp;will&nbsp;<BR>
be&nbsp;set&nbsp;to&nbsp;0&nbsp;anyway)&nbsp;of&nbsp;a&nbsp;given&nbsp;length,&nbsp;you&nbsp;use&nbsp;the&nbsp;efun&nbsp;allocate().&nbsp;&nbsp;<BR>
&nbsp;<BR>
&lt;array&gt;&nbsp;=&nbsp;allocate(&lt;length&gt;);&nbsp;<BR>
e.g.&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;your_arr&nbsp;=&nbsp;allocate(3);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;=&gt;&nbsp;your_arr&nbsp;=&nbsp;({&nbsp;0,&nbsp;0,&nbsp;0&nbsp;});&nbsp;&nbsp;<BR>
&nbsp;<BR>
Concatenating&nbsp;(adding)&nbsp;arrays&nbsp;to&nbsp;each&nbsp;other&nbsp;is&nbsp;most&nbsp;easily&nbsp;done&nbsp;with&nbsp;the&nbsp;+&nbsp;operator.&nbsp;Simply&nbsp;add&nbsp;them&nbsp;<BR>
as&nbsp;you&nbsp;would&nbsp;numbers.&nbsp;The&nbsp;+=&nbsp;operator&nbsp;works&nbsp;fine&nbsp;as&nbsp;well.&nbsp;&nbsp;<BR>
&nbsp;<BR>
my_arr&nbsp;=&nbsp;({&nbsp;9,&nbsp;3&nbsp;})&nbsp;+&nbsp;({&nbsp;5,&nbsp;10,&nbsp;3&nbsp;});&nbsp;//&nbsp;=&gt;&nbsp;({&nbsp;9,&nbsp;3,&nbsp;5,&nbsp;10,&nbsp;3&nbsp;})&nbsp;<BR>
&nbsp;<BR>
Removing&nbsp;elements&nbsp;from&nbsp;an&nbsp;array&nbsp;is&nbsp;easiest&nbsp;done&nbsp;with&nbsp;the&nbsp;-/-=&nbsp;operator,&nbsp;however,&nbsp;be&nbsp;aware&nbsp;that&nbsp;it&nbsp;<BR>
is&nbsp;a&nbsp;general&nbsp;operator&nbsp;that&nbsp;will&nbsp;remove&nbsp;all&nbsp;items&nbsp;found&nbsp;that&nbsp;match&nbsp;the&nbsp;item&nbsp;you&nbsp;want&nbsp;to&nbsp;remove.&nbsp;&nbsp;<BR>
&nbsp;<BR>
my_arr&nbsp;-=&nbsp;({&nbsp;3,&nbsp;10&nbsp;});&nbsp;//&nbsp;=&gt;&nbsp;({&nbsp;9,&nbsp;5&nbsp;})&nbsp;<BR>
&nbsp;<BR>
If&nbsp;you&nbsp;want&nbsp;to&nbsp;remove&nbsp;a&nbsp;single&nbsp;item&nbsp;in&nbsp;the&nbsp;middle&nbsp;somewhere&nbsp;that&nbsp;might&nbsp;have&nbsp;been&nbsp;repeated,&nbsp;you&nbsp;have&nbsp;<BR>
to&nbsp;use&nbsp;the&nbsp;range&nbsp;operator&nbsp;of&nbsp;course.&nbsp;&nbsp;<BR>
&nbsp;<BR>
my_arr&nbsp;=&nbsp;({&nbsp;9,&nbsp;3,&nbsp;5,&nbsp;10,&nbsp;3&nbsp;});&nbsp;<BR>
my_arr&nbsp;=&nbsp;my_arr[0..0]&nbsp;+&nbsp;my_arr[2..4];&nbsp;//&nbsp;=&gt;&nbsp;({&nbsp;9,&nbsp;5,&nbsp;10,&nbsp;3&nbsp;})&nbsp;<BR>
&nbsp;<BR>
NB!&nbsp;Beware&nbsp;this&nbsp;difference!!!!&nbsp;One&nbsp;is&nbsp;a&nbsp;list,&nbsp;the&nbsp;other&nbsp;an&nbsp;integer!&nbsp;&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;array&gt;&nbsp;my_arr[0..0]&nbsp;&nbsp;&nbsp;//&nbsp;=&nbsp;({&nbsp;9&nbsp;})&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;int&gt;&nbsp;&nbsp;&nbsp;my_arr[0]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;=&nbsp;9&nbsp;<BR>
&nbsp;<BR>
How&nbsp;to&nbsp;declare&nbsp;and&nbsp;use&nbsp;Mappings&nbsp;<BR>
&nbsp;<BR>
Mappings&nbsp;are&nbsp;lists&nbsp;of&nbsp;associated&nbsp;values.&nbsp;They&nbsp;are&nbsp;mixed&nbsp;by&nbsp;default,&nbsp;meaning&nbsp;that&nbsp;the&nbsp;index&nbsp;part&nbsp;of&nbsp;<BR>
the&nbsp;associated&nbsp;values&nbsp;doesn't&nbsp;have&nbsp;to&nbsp;be&nbsp;of&nbsp;the&nbsp;same&nbsp;type&nbsp;all&nbsp;the&nbsp;time,&nbsp;even&nbsp;though&nbsp;this&nbsp;is&nbsp;<BR>
encouraged&nbsp;for&nbsp;the&nbsp;same&nbsp;reason&nbsp;as&nbsp;before&nbsp;in&nbsp;regard&nbsp;to&nbsp;the&nbsp;mixed&nbsp;data&nbsp;type.&nbsp;&nbsp;<BR>
&nbsp;<BR>
Mappings&nbsp;can&nbsp;use&nbsp;any&nbsp;kind&nbsp;of&nbsp;data&nbsp;type&nbsp;both&nbsp;as&nbsp;index&nbsp;and&nbsp;value.&nbsp;The&nbsp;index&nbsp;part&nbsp;of&nbsp;the&nbsp;mapping&nbsp;in&nbsp;a&nbsp;<BR>
single&nbsp;mapping&nbsp;must&nbsp;consist&nbsp;of&nbsp;unique&nbsp;values.&nbsp;There&nbsp;can&nbsp;not&nbsp;be&nbsp;two&nbsp;indices&nbsp;of&nbsp;the&nbsp;same&nbsp;value.&nbsp;&nbsp;<BR>
&nbsp;<BR>
This&nbsp;all&nbsp;sounds&nbsp;pretty&nbsp;complicated,&nbsp;but&nbsp;in&nbsp;reality&nbsp;it's&nbsp;pretty&nbsp;simple&nbsp;to&nbsp;use.&nbsp;However,&nbsp;it&nbsp;will&nbsp;be&nbsp;a&nbsp;lot&nbsp;<BR>
easier&nbsp;to&nbsp;understand&nbsp;once&nbsp;we&nbsp;get&nbsp;down&nbsp;to&nbsp;actually&nbsp;seeing&nbsp;it&nbsp;used.&nbsp;&nbsp;<BR>
&nbsp;<BR>
You&nbsp;declare&nbsp;a&nbsp;mapping&nbsp;just&nbsp;like&nbsp;any&nbsp;other&nbsp;variable,&nbsp;so&nbsp;let's&nbsp;just&nbsp;start&nbsp;up&nbsp;with&nbsp;a&nbsp;few&nbsp;declarations&nbsp;for&nbsp;<BR>
later&nbsp;use:&nbsp;&nbsp;<BR>
&nbsp;<BR>
mapping&nbsp;my_map;&nbsp;<BR>
int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value;&nbsp;<BR>
&nbsp;<BR>
Allocating&nbsp;and&nbsp;initializing&nbsp;can&nbsp;be&nbsp;done&nbsp;in&nbsp;three&nbsp;different&nbsp;ways:&nbsp;&nbsp;<BR>
&nbsp;<BR>
1:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;mapping_var&gt;&nbsp;=&nbsp;([&nbsp;&lt;index1&gt;:&lt;value1&gt;,&nbsp;&lt;index2&gt;:&lt;value2&gt;,&nbsp;...&nbsp;]);&nbsp;<BR>
&nbsp;<BR>
2:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;mapping_var&gt;[&lt;index&gt;]&nbsp;=&nbsp;value;&nbsp;<BR>
&nbsp;<BR>
3:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;mapping_var&gt;&nbsp;=&nbsp;mkmapping(&lt;list&nbsp;of&nbsp;indices&gt;,&nbsp;&lt;list&nbsp;of&nbsp;values&gt;);&nbsp;<BR>
&nbsp;<BR>
The&nbsp;first&nbsp;is&nbsp;straight-forward&nbsp;and&nbsp;easy.&nbsp;&nbsp;<BR>
&nbsp;<BR>
1:&nbsp;my_map&nbsp;=&nbsp;([&nbsp;&quot;adam&quot;:5,&nbsp;&quot;bertil&quot;:8,&nbsp;&quot;cecar&quot;:-4&nbsp;]);&nbsp;<BR>
&nbsp;<BR>
The&nbsp;second&nbsp;works&nbsp;so&nbsp;that&nbsp;in&nbsp;case&nbsp;a&nbsp;given&nbsp;mapping&nbsp;pair&nbsp;doesn't&nbsp;exist,&nbsp;it&nbsp;is&nbsp;created&nbsp;when&nbsp;referenced.&nbsp;If&nbsp;<BR>
it&nbsp;does&nbsp;exist&nbsp;the&nbsp;value&nbsp;part&nbsp;is&nbsp;replaced.&nbsp;&nbsp;<BR>
&nbsp;<BR>
2:&nbsp;my_map[&quot;adam&quot;]&nbsp;=&nbsp;1;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Creates&nbsp;the&nbsp;pair&nbsp;&quot;adam&quot;:1&nbsp;<BR>
&nbsp;&nbsp;&nbsp;my_map[&quot;bertil&quot;]&nbsp;=&nbsp;8;&nbsp;&nbsp;//&nbsp;Creates&nbsp;the&nbsp;pair&nbsp;&quot;bertil&quot;:8&nbsp;<BR>
&nbsp;&nbsp;&nbsp;my_map[&quot;adam&quot;]&nbsp;=&nbsp;5;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Replaces&nbsp;the&nbsp;old&nbsp;value&nbsp;in&nbsp;&quot;adam&quot;&nbsp;with&nbsp;5.&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...&nbsp;<BR>
&nbsp;<BR>
The&nbsp;third&nbsp;requires&nbsp;two&nbsp;arrays,&nbsp;one&nbsp;containing&nbsp;the&nbsp;indices&nbsp;and&nbsp;one&nbsp;containing&nbsp;the&nbsp;values.&nbsp;How&nbsp;to&nbsp;create&nbsp;<BR>
arrays&nbsp;was&nbsp;described&nbsp;in&nbsp;the&nbsp;previous&nbsp;chapter.&nbsp;&nbsp;<BR>
&nbsp;<BR>
3:&nbsp;my_map&nbsp;=&nbsp;mkmapping(({&nbsp;&quot;adam&quot;,&nbsp;&quot;bertil&quot;,&nbsp;&quot;cecar&quot;&nbsp;}),&nbsp;({&nbsp;5,&nbsp;8,&nbsp;-4&nbsp;}));&nbsp;<BR>
&nbsp;<BR>
Unlike&nbsp;arrays&nbsp;there's&nbsp;no&nbsp;order&nbsp;in&nbsp;a&nbsp;mapping.&nbsp;The&nbsp;values&nbsp;are&nbsp;stashed&nbsp;in&nbsp;a&nbsp;way&nbsp;that&nbsp;makes&nbsp;finding&nbsp;the&nbsp;<BR>
values&nbsp;as&nbsp;quick&nbsp;as&nbsp;possible.&nbsp;There&nbsp;are&nbsp;functions&nbsp;that&nbsp;will&nbsp;allow&nbsp;you&nbsp;to&nbsp;get&nbsp;the&nbsp;component&nbsp;lists&nbsp;(the&nbsp;<BR>
indices&nbsp;or&nbsp;values)&nbsp;from&nbsp;a&nbsp;mapping&nbsp;but&nbsp;keep&nbsp;in&nbsp;mind&nbsp;that&nbsp;they&nbsp;can&nbsp;be&nbsp;in&nbsp;any&nbsp;order&nbsp;and&nbsp;are&nbsp;not&nbsp;<BR>
guaranteed&nbsp;to&nbsp;remain&nbsp;the&nbsp;same&nbsp;from&nbsp;call&nbsp;to&nbsp;call.&nbsp;In&nbsp;practice&nbsp;though,&nbsp;they&nbsp;only&nbsp;change&nbsp;order&nbsp;when&nbsp;you&nbsp;<BR>
add&nbsp;or&nbsp;remove&nbsp;an&nbsp;element.&nbsp;&nbsp;<BR>
&nbsp;<BR>
Merging&nbsp;mappings&nbsp;can&nbsp;be&nbsp;done&nbsp;with&nbsp;the&nbsp;+/+=&nbsp;operator&nbsp;just&nbsp;as&nbsp;with&nbsp;mappings.&nbsp;&nbsp;<BR>
&nbsp;<BR>
my_map&nbsp;+=&nbsp;([&nbsp;&quot;david&quot;:5,&nbsp;&quot;erik&quot;:33&nbsp;]);&nbsp;<BR>
&nbsp;<BR>
Removing&nbsp;items&nbsp;in&nbsp;a&nbsp;mapping,&nbsp;however,&nbsp;is&nbsp;a&nbsp;bit&nbsp;trickier.&nbsp;That&nbsp;has&nbsp;to&nbsp;be&nbsp;done&nbsp;by&nbsp;using&nbsp;the&nbsp;special&nbsp;efun&nbsp;<BR>
m_delete()&nbsp;(also&nbsp;described&nbsp;later).&nbsp;&nbsp;<BR>
&nbsp;<BR>
my_map&nbsp;=&nbsp;m_delete(my_map,&nbsp;&quot;bertil&quot;);&nbsp;<BR>
my_map&nbsp;=&nbsp;m_delete(my_map,&nbsp;&quot;david&quot;);&nbsp;<BR>
&nbsp;<BR>
As&nbsp;you&nbsp;see&nbsp;the&nbsp;mapping&nbsp;pairs&nbsp;has&nbsp;to&nbsp;be&nbsp;removed&nbsp;one&nbsp;by&nbsp;one&nbsp;using&nbsp;the&nbsp;index&nbsp;as&nbsp;an&nbsp;identifier&nbsp;of&nbsp;which&nbsp;<BR>
pair&nbsp;you&nbsp;want&nbsp;to&nbsp;remove.&nbsp;Another&nbsp;thing&nbsp;you&nbsp;now&nbsp;realize&nbsp;quite&nbsp;clearly&nbsp;is&nbsp;that&nbsp;the&nbsp;indices&nbsp;in&nbsp;a&nbsp;mapping&nbsp;<BR>
has&nbsp;to&nbsp;be&nbsp;unique,&nbsp;you&nbsp;can't&nbsp;have&nbsp;two&nbsp;identical&nbsp;'handles'&nbsp;to&nbsp;different&nbsp;values.&nbsp;The&nbsp;values&nbsp;however&nbsp;can&nbsp;<BR>
naturally&nbsp;be&nbsp;identical.&nbsp;&nbsp;<BR>
&nbsp;<BR>
Individual&nbsp;values&nbsp;can&nbsp;be&nbsp;obtained&nbsp;through&nbsp;simple&nbsp;indexing.&nbsp;&nbsp;<BR>
&nbsp;<BR>
value&nbsp;=&nbsp;my_map[&quot;cecar&quot;];&nbsp;//&nbsp;=&gt;&nbsp;-4&nbsp;<BR>
&nbsp;<BR>
Indexing&nbsp;a&nbsp;value&nbsp;that&nbsp;doesn't&nbsp;exist&nbsp;will&nbsp;not&nbsp;generate&nbsp;an&nbsp;error,&nbsp;only&nbsp;the&nbsp;value&nbsp;0.&nbsp;Be&nbsp;very&nbsp;careful&nbsp;of&nbsp;this&nbsp;<BR>
since&nbsp;you&nbsp;might&nbsp;indeed&nbsp;have&nbsp;legal&nbsp;values&nbsp;of&nbsp;0&nbsp;in&nbsp;the&nbsp;mapping&nbsp;as&nbsp;well.&nbsp;i.e.&nbsp;a&nbsp;value&nbsp;of&nbsp;0&nbsp;might&nbsp;mean&nbsp;that&nbsp;<BR>
the&nbsp;index&nbsp;has&nbsp;no&nbsp;value&nbsp;part&nbsp;but&nbsp;also&nbsp;that&nbsp;the&nbsp;value&nbsp;indeed&nbsp;is&nbsp;0.&nbsp;&nbsp;<BR>
&nbsp;<BR>
value&nbsp;=&nbsp;my_map[&quot;urk&quot;];&nbsp;//&nbsp;=&gt;&nbsp;0&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
--&nbsp;<BR>
※&nbsp;來源:•BBS&nbsp;水木清華站&nbsp;bbs.net.tsinghua.edu.cn•[FROM:&nbsp;klab.ishii.utsu]&nbsp;<BR>
<A HREF="00000008.htm">上一篇</A>
<A HREF='javascript:history.go(-1)'>返回上一頁</A>
<A HREF="index.htm">回到目錄</A>
<A HREF="#top">回到頁首</A>
<A HREF="00000010.htm">下一篇</A>
</H1></CENTER>
<CENTER><H1>BBS水木清華站︰精華區</H1></CENTER>
</BODY></HTML>