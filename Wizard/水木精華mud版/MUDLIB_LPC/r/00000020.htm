<HTML>
<HEAD>
<TITLE>BBS水木清華站︰精華區</TITLE>
</HEAD>
<BODY>
<CENTER><H1>BBS水木清華站︰精華區</H1></CENTER>
<A Name="top"></a>
發信人:&nbsp;jameson&nbsp;(阿其),&nbsp;信區:&nbsp;Mud_Builder&nbsp;<BR>
標&nbsp;&nbsp;題:&nbsp;LPC&nbsp;Manual&nbsp;-&nbsp;Advanced&nbsp;LPC&nbsp;and&nbsp;Mudlib&nbsp;(2)&nbsp;<BR>
發信站:&nbsp;BBS&nbsp;水木清華站&nbsp;(Fri&nbsp;May&nbsp;23&nbsp;23:01:09&nbsp;1997)&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
Writing&nbsp;efficient&nbsp;code&nbsp;<BR>
&nbsp;<BR>
Actually,&nbsp;this&nbsp;subject&nbsp;is&nbsp;closely&nbsp;linked&nbsp;to&nbsp;the&nbsp;very&nbsp;thing&nbsp;I&nbsp;said&nbsp;I&nbsp;would&nbsp;not&nbsp;explain&nbsp;-&nbsp;namely&nbsp;how&nbsp;to&nbsp;program.&nbsp;I'll&nbsp;retract&nbsp;my&nbsp;words&nbsp;-&nbsp;a&nbsp;bit&nbsp;-&nbsp;and&nbsp;<BR>
talk&nbsp;about&nbsp;some&nbsp;'what&nbsp;to&nbsp;do's&nbsp;and&nbsp;even&nbsp;more&nbsp;importantly&nbsp;'what&nbsp;not&nbsp;to&nbsp;do's.&nbsp;&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Efficient&nbsp;loops:&nbsp;How&nbsp;to&nbsp;write&nbsp;loops&nbsp;effeciently&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Abusing&nbsp;defines:&nbsp;Nono's&nbsp;in&nbsp;defines&nbsp;&nbsp;<BR>
&nbsp;<BR>
Efficient&nbsp;loops&nbsp;<BR>
&nbsp;<BR>
This&nbsp;might&nbsp;seem&nbsp;rather&nbsp;trivial,&nbsp;in&nbsp;how&nbsp;many&nbsp;ways&nbsp;can&nbsp;you&nbsp;mess&nbsp;up&nbsp;a&nbsp;loop&nbsp;anyway?&nbsp;Well...&nbsp;actually,&nbsp;quite&nbsp;a&nbsp;few.&nbsp;Let's&nbsp;start&nbsp;with&nbsp;the&nbsp;most&nbsp;<BR>
common&nbsp;mistake.&nbsp;Assume&nbsp;you&nbsp;have&nbsp;a&nbsp;large&nbsp;array,&nbsp;let's&nbsp;call&nbsp;it&nbsp;'big_arr',&nbsp;and&nbsp;let's&nbsp;assume&nbsp;you&nbsp;want&nbsp;to&nbsp;loop&nbsp;over&nbsp;all&nbsp;elements&nbsp;in&nbsp;that&nbsp;array,&nbsp;what&nbsp;<BR>
do&nbsp;you&nbsp;do?&nbsp;&quot;Simple!&quot;,&nbsp;you&nbsp;exclaim,&nbsp;&quot;A&nbsp;'for'&nbsp;loop,&nbsp;of&nbsp;course!&quot;.&nbsp;Sure...&nbsp;but&nbsp;how&nbsp;do&nbsp;you&nbsp;write&nbsp;it?&nbsp;Well,&nbsp;the&nbsp;most&nbsp;common&nbsp;implementation&nbsp;usually&nbsp;<BR>
looks&nbsp;something&nbsp;like&nbsp;this:&nbsp;&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;i;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(i&nbsp;=&nbsp;0&nbsp;;&nbsp;i&nbsp;&lt;&nbsp;sizeof(big_arr)&nbsp;;&nbsp;i++)&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Here&nbsp;we&nbsp;do&nbsp;something&nbsp;with&nbsp;the&nbsp;array&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<BR>
&nbsp;<BR>
Ok...&nbsp;now&nbsp;why&nbsp;is&nbsp;this&nbsp;bad?&nbsp;Well,&nbsp;if&nbsp;you&nbsp;review&nbsp;the&nbsp;chapter&nbsp;on&nbsp;how&nbsp;the&nbsp;for&nbsp;statement&nbsp;works,&nbsp;you'll&nbsp;find&nbsp;that&nbsp;the&nbsp;three&nbsp;parts&nbsp;inside&nbsp;the&nbsp;round&nbsp;<BR>
brackets&nbsp;actually&nbsp;gets&nbsp;executed.&nbsp;The&nbsp;first&nbsp;one&nbsp;once&nbsp;at&nbsp;the&nbsp;start,&nbsp;the&nbsp;second&nbsp;(or&nbsp;middle)&nbsp;part&nbsp;every&nbsp;time&nbsp;the&nbsp;loop&nbsp;is&nbsp;run&nbsp;and&nbsp;the&nbsp;third&nbsp;part&nbsp;also&nbsp;<BR>
every&nbsp;time&nbsp;the&nbsp;current&nbsp;loop&nbsp;is&nbsp;finished.&nbsp;&nbsp;<BR>
&nbsp;<BR>
This&nbsp;obviously&nbsp;means&nbsp;that&nbsp;the&nbsp;sizeof()&nbsp;function&nbsp;gets&nbsp;executed&nbsp;every&nbsp;time&nbsp;the&nbsp;loop&nbsp;is&nbsp;run.&nbsp;rather&nbsp;a&nbsp;waste&nbsp;of&nbsp;time&nbsp;given&nbsp;the&nbsp;fact&nbsp;that&nbsp;the&nbsp;array&nbsp;<BR>
hardly&nbsp;is&nbsp;intended&nbsp;to&nbsp;change&nbsp;size.&nbsp;If&nbsp;it&nbsp;was,&nbsp;that&nbsp;would&nbsp;have&nbsp;been&nbsp;another&nbsp;matter,&nbsp;but&nbsp;as&nbsp;it&nbsp;isn't...&nbsp;No.&nbsp;Write&nbsp;like&nbsp;this&nbsp;instead:&nbsp;&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;i,&nbsp;sz;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(i&nbsp;=&nbsp;0,&nbsp;sz&nbsp;=&nbsp;sizeof(big_arr)&nbsp;;&nbsp;i&nbsp;&lt;&nbsp;sz&nbsp;;&nbsp;i++)&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Here&nbsp;we&nbsp;do&nbsp;something&nbsp;with&nbsp;the&nbsp;array&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<BR>
&nbsp;<BR>
See?&nbsp;The&nbsp;variables&nbsp;'i'&nbsp;and&nbsp;'sz'&nbsp;gets&nbsp;assigned&nbsp;their&nbsp;respective&nbsp;values&nbsp;at&nbsp;the&nbsp;start&nbsp;of&nbsp;the&nbsp;loop,&nbsp;and&nbsp;only&nbsp;then.&nbsp;The&nbsp;counter&nbsp;'i'&nbsp;gets&nbsp;set&nbsp;to&nbsp;0&nbsp;and&nbsp;the&nbsp;<BR>
size&nbsp;variable&nbsp;'sz'&nbsp;gets&nbsp;set&nbsp;to&nbsp;the&nbsp;size&nbsp;of&nbsp;the&nbsp;array.&nbsp;During&nbsp;the&nbsp;entire&nbsp;loop&nbsp;after&nbsp;that,&nbsp;'i'&nbsp;is&nbsp;compared&nbsp;with&nbsp;'sz'&nbsp;instead&nbsp;of&nbsp;repeatedly&nbsp;recompute&nbsp;the&nbsp;<BR>
size&nbsp;of&nbsp;the&nbsp;array.&nbsp;&nbsp;<BR>
&nbsp;<BR>
Believe&nbsp;it&nbsp;or&nbsp;not,&nbsp;this&nbsp;is&nbsp;a&nbsp;very&nbsp;common&nbsp;mistake,&nbsp;all&nbsp;people&nbsp;do&nbsp;it.&nbsp;While&nbsp;the&nbsp;savings&nbsp;in&nbsp;doing&nbsp;as&nbsp;I&nbsp;suggest&nbsp;might&nbsp;not&nbsp;seem&nbsp;that&nbsp;great,&nbsp;well...&nbsp;<BR>
multiply&nbsp;this&nbsp;small&nbsp;gain&nbsp;in&nbsp;one&nbsp;loop&nbsp;by&nbsp;all&nbsp;the&nbsp;loops&nbsp;in&nbsp;the&nbsp;mud&nbsp;and&nbsp;all&nbsp;the&nbsp;number&nbsp;of&nbsp;times&nbsp;that&nbsp;those&nbsp;loops&nbsp;are&nbsp;run&nbsp;and&nbsp;you'll&nbsp;end&nbsp;up&nbsp;with&nbsp;<BR>
quite&nbsp;a&nbsp;big&nbsp;number.&nbsp;The&nbsp;added&nbsp;cost&nbsp;in&nbsp;doing&nbsp;this&nbsp;is&nbsp;one&nbsp;local&nbsp;variable,&nbsp;which&nbsp;is&nbsp;a&nbsp;small&nbsp;enough&nbsp;price&nbsp;to&nbsp;pay.&nbsp;&nbsp;<BR>
&nbsp;<BR>
Keep&nbsp;this&nbsp;general&nbsp;problem&nbsp;in&nbsp;mind&nbsp;since&nbsp;a&nbsp;lot&nbsp;of&nbsp;cases&nbsp;don't&nbsp;use&nbsp;arrays&nbsp;perhaps,&nbsp;but&nbsp;mappings&nbsp;or&nbsp;other&nbsp;general&nbsp;containers&nbsp;of&nbsp;items&nbsp;you&nbsp;want&nbsp;<BR>
to&nbsp;loop&nbsp;through.&nbsp;The&nbsp;solution&nbsp;apart&nbsp;from&nbsp;specifics&nbsp;in&nbsp;identifying&nbsp;the&nbsp;size&nbsp;of&nbsp;that&nbsp;container&nbsp;is&nbsp;always&nbsp;the&nbsp;same.&nbsp;&nbsp;<BR>
&nbsp;<BR>
Abusing&nbsp;defines&nbsp;<BR>
&nbsp;<BR>
A&nbsp;common&nbsp;mistake&nbsp;is&nbsp;to&nbsp;put&nbsp;HUGE&nbsp;arrays&nbsp;and&nbsp;mappings&nbsp;in&nbsp;a&nbsp;define.&nbsp;It's&nbsp;very&nbsp;tempting&nbsp;really,&nbsp;assume&nbsp;for&nbsp;example&nbsp;that&nbsp;you&nbsp;have&nbsp;a&nbsp;mapping&nbsp;<BR>
that&nbsp;contains&nbsp;the&nbsp;definitions&nbsp;of&nbsp;guild&nbsp;ranks,&nbsp;descriptions,&nbsp;various&nbsp;skill&nbsp;limits,&nbsp;benefit&nbsp;adjustors&nbsp;etc&nbsp;in&nbsp;one&nbsp;big&nbsp;mapping&nbsp;with&nbsp;the&nbsp;rank&nbsp;as&nbsp;index.&nbsp;<BR>
Very&nbsp;often&nbsp;you'd&nbsp;then&nbsp;need&nbsp;to&nbsp;index&nbsp;that&nbsp;mapping&nbsp;to&nbsp;look&nbsp;up&nbsp;things.&nbsp;Probably&nbsp;it'll&nbsp;be&nbsp;done&nbsp;dozens&nbsp;of&nbsp;times&nbsp;in&nbsp;the&nbsp;central&nbsp;guild&nbsp;object.&nbsp;You'd&nbsp;<BR>
have&nbsp;something&nbsp;like&nbsp;this:&nbsp;&nbsp;<BR>
&nbsp;<BR>
//&nbsp;Top&nbsp;of&nbsp;file&nbsp;<BR>
&nbsp;<BR>
#define&nbsp;GUILD_MAP&nbsp;([&nbsp;0:&nbsp;({&nbsp;&quot;beginner&quot;,&nbsp;&quot;Utter&nbsp;newbie&quot;,&nbsp;3,&nbsp;2343,&nbsp;...&nbsp;}),&nbsp;\&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1:&nbsp;({&nbsp;....&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...&nbsp;/*&nbsp;Perhaps&nbsp;another&nbsp;10-20&nbsp;lines&nbsp;or&nbsp;more&nbsp;*/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;])&nbsp;<BR>
&nbsp;<BR>
//&nbsp;code,&nbsp;example&nbsp;of&nbsp;use&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;write(&quot;Your&nbsp;rank&nbsp;is:&nbsp;&quot;&nbsp;+&nbsp;GUILD_MAP[rank][1]&nbsp;+&nbsp;&quot;\n&quot;);&nbsp;<BR>
//&nbsp;more&nbsp;code...&nbsp;<BR>
&nbsp;<BR>
However...&nbsp;just&nbsp;pause&nbsp;for&nbsp;a&nbsp;second&nbsp;and&nbsp;consider&nbsp;what&nbsp;the&nbsp;#define&nbsp;statement&nbsp;really&nbsp;does...&nbsp;well,&nbsp;it&nbsp;substitutes&nbsp;whatever&nbsp;you&nbsp;had&nbsp;as&nbsp;a&nbsp;pattern&nbsp;<BR>
for&nbsp;the&nbsp;#define&nbsp;body.&nbsp;So,&nbsp;in&nbsp;every&nbsp;instance&nbsp;where&nbsp;you&nbsp;had&nbsp;written&nbsp;GUILD_MAP&nbsp;the&nbsp;entire&nbsp;mapping&nbsp;would&nbsp;be&nbsp;copied&nbsp;in.&nbsp;And&nbsp;every&nbsp;time&nbsp;it&nbsp;was&nbsp;<BR>
put&nbsp;in,&nbsp;the&nbsp;gamedriver&nbsp;would&nbsp;have&nbsp;to&nbsp;interprete,&nbsp;store&nbsp;and&nbsp;index&nbsp;the&nbsp;mapping&nbsp;again.&nbsp;It&nbsp;doesn't&nbsp;take&nbsp;a&nbsp;genious&nbsp;level&nbsp;of&nbsp;intelligence&nbsp;to&nbsp;realize&nbsp;<BR>
that&nbsp;this&nbsp;is&nbsp;a&nbsp;horrible&nbsp;waste&nbsp;of&nbsp;both&nbsp;memory&nbsp;and&nbsp;time.&nbsp;&nbsp;<BR>
&nbsp;<BR>
So...&nbsp;instead&nbsp;of&nbsp;doing&nbsp;it&nbsp;this&nbsp;way&nbsp;you&nbsp;store&nbsp;the&nbsp;mapping&nbsp;in&nbsp;a&nbsp;global&nbsp;variable.&nbsp;Then&nbsp;you&nbsp;use&nbsp;that&nbsp;variable&nbsp;as&nbsp;you&nbsp;use&nbsp;the&nbsp;define.&nbsp;I.e.&nbsp;&nbsp;<BR>
&nbsp;<BR>
//&nbsp;Top&nbsp;of&nbsp;file&nbsp;<BR>
&nbsp;<BR>
mapping&nbsp;GuildMap;&nbsp;<BR>
&nbsp;<BR>
create_object()&nbsp;<BR>
{&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;code&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;GuildMap&nbsp;=&nbsp;&nbsp;([&nbsp;0:&nbsp;({&nbsp;&quot;beginner&quot;,&nbsp;&quot;Utter&nbsp;newbie&quot;,&nbsp;3,&nbsp;2343,&nbsp;...&nbsp;}),&nbsp;\&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1:&nbsp;({&nbsp;....&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...&nbsp;/*&nbsp;Perhaps&nbsp;another&nbsp;10-20&nbsp;lines&nbsp;or&nbsp;more&nbsp;*/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]);&nbsp;<BR>
}&nbsp;<BR>
&nbsp;<BR>
//&nbsp;code,&nbsp;example&nbsp;of&nbsp;use&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;write(&quot;Your&nbsp;rank&nbsp;is:&nbsp;&quot;&nbsp;+&nbsp;GuildMap[rank][1]&nbsp;+&nbsp;&quot;\n&quot;);&nbsp;<BR>
//&nbsp;more&nbsp;code...&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
--&nbsp;<BR>
※&nbsp;來源:•BBS&nbsp;水木清華站&nbsp;bbs.net.tsinghua.edu.cn•[FROM:&nbsp;klab.ishii.utsu]&nbsp;<BR>
<A HREF="00000019.htm">上一篇</A>
<A HREF='javascript:history.go(-1)'>返回上一頁</A>
<A HREF="index.htm">回到目錄</A>
<A HREF="#top">回到頁首</A>
<A HREF="00000021.htm">下一篇</A>
</H1></CENTER>
<CENTER><H1>BBS水木清華站︰精華區</H1></CENTER>
</BODY></HTML>