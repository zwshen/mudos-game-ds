<HTML>
<HEAD>
<TITLE>BBS水木清華站︰精華區</TITLE>
</HEAD>
<BODY>
<CENTER><H1>BBS水木清華站︰精華區</H1></CENTER>
<A Name="top"></a>
發信人:&nbsp;jameson&nbsp;(阿其),&nbsp;信區:&nbsp;Mud_Builder&nbsp;<BR>
標&nbsp;&nbsp;題:&nbsp;LPC&nbsp;Manual&nbsp;-&nbsp;LPC&nbsp;basics&nbsp;(3)&nbsp;<BR>
發信站:&nbsp;BBS&nbsp;水木清華站&nbsp;(Fri&nbsp;May&nbsp;23&nbsp;17:52:57&nbsp;1997)&nbsp;<BR>
&nbsp;<BR>
Statements&nbsp;and&nbsp;Expressions&nbsp;<BR>
&nbsp;<BR>
We&nbsp;need&nbsp;to&nbsp;define&nbsp;what&nbsp;a&nbsp;statement&nbsp;and&nbsp;what&nbsp;an&nbsp;expression&nbsp;is&nbsp;in&nbsp;order&nbsp;to&nbsp;be&nbsp;able&nbsp;to&nbsp;proceed.&nbsp;&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Statements:&nbsp;Definition&nbsp;of&nbsp;statements&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Expressions:&nbsp;Definition&nbsp;of&nbsp;expressions&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Block&nbsp;statement:&nbsp;The&nbsp;block&nbsp;statement&nbsp;&nbsp;<BR>
&nbsp;<BR>
Statements&nbsp;<BR>
&nbsp;<BR>
A&nbsp;statement&nbsp;is&nbsp;sort&nbsp;of&nbsp;a&nbsp;full&nbsp;sentence&nbsp;of&nbsp;instructions,&nbsp;made&nbsp;up&nbsp;from&nbsp;one&nbsp;or&nbsp;more&nbsp;expressions.&nbsp;<BR>
Statements&nbsp;usually&nbsp;cover&nbsp;no&nbsp;more&nbsp;than&nbsp;a&nbsp;single&nbsp;line&nbsp;of&nbsp;code.&nbsp;Sometimes&nbsp;it's&nbsp;necessary&nbsp;to&nbsp;break&nbsp;it&nbsp;up&nbsp;<BR>
though&nbsp;if&nbsp;it&nbsp;becomes&nbsp;too&nbsp;long,&nbsp;simply&nbsp;to&nbsp;improve&nbsp;on&nbsp;legibility.&nbsp;For&nbsp;most&nbsp;statements&nbsp;you&nbsp;simply&nbsp;break&nbsp;<BR>
the&nbsp;line&nbsp;between&nbsp;two&nbsp;words,&nbsp;but&nbsp;if&nbsp;you&nbsp;are&nbsp;in&nbsp;the&nbsp;middle&nbsp;of&nbsp;a&nbsp;string&nbsp;you&nbsp;need&nbsp;to&nbsp;add&nbsp;a&nbsp;backslash&nbsp;(\)&nbsp;at&nbsp;<BR>
the&nbsp;end&nbsp;of&nbsp;the&nbsp;line&nbsp;in&nbsp;order&nbsp;for&nbsp;the&nbsp;gamedriver&nbsp;to&nbsp;understand&nbsp;what's&nbsp;going&nbsp;on.&nbsp;&nbsp;<BR>
&nbsp;<BR>
write(&quot;This&nbsp;is&nbsp;an&nbsp;example&nbsp;of&nbsp;\&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;broken&nbsp;string.\n&quot;);&nbsp;<BR>
&nbsp;<BR>
However,&nbsp;breaking&nbsp;a&nbsp;statement&nbsp;with&nbsp;backslash&nbsp;is&nbsp;extremely&nbsp;ugly&nbsp;and&nbsp;makes&nbsp;the&nbsp;code&nbsp;hard&nbsp;to&nbsp;read.&nbsp;In&nbsp;<BR>
fact,&nbsp;it's&nbsp;usually&nbsp;possible&nbsp;to&nbsp;break&nbsp;the&nbsp;line&nbsp;naturally&nbsp;at&nbsp;the&nbsp;end&nbsp;of&nbsp;a&nbsp;string,&nbsp;between&nbsp;two&nbsp;operators&nbsp;of&nbsp;<BR>
some&nbsp;kind,&nbsp;or&nbsp;even&nbsp;just&nbsp;split&nbsp;the&nbsp;string&nbsp;in&nbsp;half&nbsp;and&nbsp;add&nbsp;the&nbsp;two&nbsp;parts&nbsp;together&nbsp;with&nbsp;the&nbsp;+&nbsp;operator.&nbsp;The&nbsp;<BR>
only&nbsp;time&nbsp;the&nbsp;backslash&nbsp;really&nbsp;is&nbsp;necessary&nbsp;is&nbsp;in&nbsp;#define-statements,&nbsp;handled&nbsp;later.&nbsp;&nbsp;<BR>
&nbsp;<BR>
write(&quot;This&nbsp;is&nbsp;a&nbsp;better&nbsp;way&nbsp;of&nbsp;&quot;&nbsp;+&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;breaking&nbsp;a&nbsp;string.\n&quot;);&nbsp;<BR>
&nbsp;<BR>
Statements&nbsp;in&nbsp;LPC&nbsp;are&nbsp;usually&nbsp;ended&nbsp;with&nbsp;a&nbsp;;,&nbsp;which&nbsp;also&nbsp;is&nbsp;a&nbsp;good&nbsp;place&nbsp;to&nbsp;end&nbsp;the&nbsp;line.&nbsp;There's&nbsp;<BR>
nothing&nbsp;stopping&nbsp;you&nbsp;from&nbsp;entering&nbsp;another&nbsp;statement&nbsp;right&nbsp;after,&nbsp;other&nbsp;than&nbsp;that&nbsp;it&nbsp;will&nbsp;look&nbsp;awful.&nbsp;&nbsp;<BR>
&nbsp;<BR>
Expressions&nbsp;<BR>
&nbsp;<BR>
An&nbsp;expression&nbsp;is&nbsp;an&nbsp;instruction&nbsp;or&nbsp;set&nbsp;of&nbsp;instructions&nbsp;that&nbsp;results&nbsp;in&nbsp;a&nbsp;value&nbsp;of&nbsp;some&nbsp;kind.&nbsp;Take&nbsp;+,&nbsp;for&nbsp;<BR>
example.&nbsp;It&nbsp;uses&nbsp;two&nbsp;other&nbsp;expressions&nbsp;to&nbsp;make&nbsp;up&nbsp;a&nbsp;result.&nbsp;A&nbsp;variable&nbsp;is&nbsp;an&nbsp;expression&nbsp;since&nbsp;it&nbsp;<BR>
yields&nbsp;its&nbsp;contents&nbsp;as&nbsp;a&nbsp;result.&nbsp;The&nbsp;combination&nbsp;of&nbsp;the&nbsp;following&nbsp;two&nbsp;expressions&nbsp;and&nbsp;an&nbsp;operator&nbsp;is&nbsp;a&nbsp;<BR>
valid&nbsp;expression:&nbsp;a&nbsp;+&nbsp;b,&nbsp;a&nbsp;and&nbsp;b&nbsp;being&nbsp;variables&nbsp;(expressions)&nbsp;and&nbsp;+&nbsp;being&nbsp;the&nbsp;operator&nbsp;used&nbsp;on&nbsp;<BR>
them.&nbsp;a&nbsp;=&nbsp;b&nbsp;+&nbsp;c;&nbsp;is&nbsp;a&nbsp;full&nbsp;statement&nbsp;ending&nbsp;in&nbsp;a&nbsp;;.&nbsp;&nbsp;<BR>
&nbsp;<BR>
Function&nbsp;calls&nbsp;are&nbsp;valid&nbsp;expressions.&nbsp;They&nbsp;are&nbsp;written&nbsp;simply&nbsp;as&nbsp;the&nbsp;name&nbsp;followed&nbsp;by&nbsp;a&nbsp;set&nbsp;of&nbsp;<BR>
matched&nbsp;parentheses&nbsp;with&nbsp;the&nbsp;arguments&nbsp;that&nbsp;the&nbsp;functions&nbsp;uses&nbsp;listed&nbsp;inside.&nbsp;Take&nbsp;the&nbsp;simple&nbsp;<BR>
function&nbsp;max()&nbsp;for&nbsp;example,&nbsp;that&nbsp;returns&nbsp;the&nbsp;max&nbsp;of&nbsp;the&nbsp;two&nbsp;arguments.&nbsp;To&nbsp;determine&nbsp;the&nbsp;maximum&nbsp;of&nbsp;<BR>
4&nbsp;and&nbsp;10,&nbsp;you&nbsp;would&nbsp;write&nbsp;max(4,&nbsp;10)&nbsp;as&nbsp;the&nbsp;expression.&nbsp;Naturally&nbsp;the&nbsp;result&nbsp;must&nbsp;be&nbsp;either&nbsp;stored&nbsp;<BR>
or&nbsp;used.&nbsp;&nbsp;<BR>
&nbsp;<BR>
The&nbsp;block&nbsp;statement&nbsp;<BR>
&nbsp;<BR>
There&nbsp;are&nbsp;a&nbsp;lot&nbsp;of&nbsp;statements,&nbsp;for&nbsp;example&nbsp;conditional&nbsp;statements,&nbsp;that&nbsp;in&nbsp;certain&nbsp;circumstances&nbsp;<BR>
execute&nbsp;one&nbsp;specified&nbsp;statement&nbsp;and&nbsp;never&nbsp;else.&nbsp;Suppose&nbsp;you&nbsp;want&nbsp;to&nbsp;have&nbsp;several&nbsp;statements&nbsp;<BR>
executed&nbsp;and&nbsp;not&nbsp;just&nbsp;one?&nbsp;Well,&nbsp;there's&nbsp;a&nbsp;special&nbsp;statement&nbsp;called&nbsp;block&nbsp;statement&nbsp;that&nbsp;will&nbsp;allow&nbsp;<BR>
you&nbsp;to&nbsp;do&nbsp;that.&nbsp;A&nbsp;block&nbsp;is&nbsp;defined&nbsp;as&nbsp;starting&nbsp;with&nbsp;a&nbsp;{&nbsp;and&nbsp;ending&nbsp;with&nbsp;a&nbsp;}.&nbsp;Within&nbsp;that&nbsp;block&nbsp;you&nbsp;may&nbsp;<BR>
have&nbsp;as&nbsp;many&nbsp;statements&nbsp;of&nbsp;any&nbsp;kind&nbsp;(including&nbsp;variable&nbsp;definitions)&nbsp;as&nbsp;you&nbsp;like.&nbsp;The&nbsp;block&nbsp;statement&nbsp;<BR>
is&nbsp;not&nbsp;ending&nbsp;with&nbsp;a&nbsp;;,&nbsp;even&nbsp;though&nbsp;it&nbsp;doesn't&nbsp;matter&nbsp;if&nbsp;you&nbsp;accidentally&nbsp;put&nbsp;one&nbsp;there.&nbsp;&nbsp;<BR>
&nbsp;<BR>
The&nbsp;';'&nbsp;statement&nbsp;<BR>
&nbsp;<BR>
As&nbsp;stated&nbsp;;&nbsp;is&nbsp;mostly&nbsp;used&nbsp;to&nbsp;terminate&nbsp;statements,&nbsp;however&nbsp;it's&nbsp;also&nbsp;a&nbsp;statement&nbsp;in&nbsp;its&nbsp;own&nbsp;right.&nbsp;&nbsp;<BR>
&nbsp;<BR>
The&nbsp;;&nbsp;on&nbsp;it's&nbsp;own&nbsp;will&nbsp;simply&nbsp;be&nbsp;a&nbsp;null-statement&nbsp;causing&nbsp;nothing&nbsp;to&nbsp;happen.&nbsp;This&nbsp;is&nbsp;useful&nbsp;when&nbsp;you&nbsp;<BR>
have&nbsp;test-clauses&nbsp;and&nbsp;loops&nbsp;(described&nbsp;later)&nbsp;that&nbsp;perform&nbsp;their&nbsp;intended&nbsp;purpose&nbsp;within&nbsp;the&nbsp;test&nbsp;or&nbsp;<BR>
loop&nbsp;clause&nbsp;and&nbsp;aren't&nbsp;actually&nbsp;intended&nbsp;to&nbsp;do&nbsp;anything&nbsp;else.&nbsp;&nbsp;<BR>
&nbsp;<BR>
Scope&nbsp;and&nbsp;prototypes&nbsp;<BR>
&nbsp;<BR>
Scope&nbsp;is&nbsp;a&nbsp;term&nbsp;defining&nbsp;where&nbsp;a&nbsp;function&nbsp;or&nbsp;variable&nbsp;declaration&nbsp;is&nbsp;valid.&nbsp;Since&nbsp;programs&nbsp;are&nbsp;read&nbsp;top&nbsp;<BR>
down,&nbsp;left&nbsp;right&nbsp;(just&nbsp;like&nbsp;you&nbsp;read&nbsp;this&nbsp;page),&nbsp;declarations&nbsp;of&nbsp;functions&nbsp;and&nbsp;variables&nbsp;are&nbsp;available&nbsp;to&nbsp;<BR>
the&nbsp;right&nbsp;and&nbsp;below&nbsp;of&nbsp;the&nbsp;actual&nbsp;declaration.&nbsp;However,&nbsp;the&nbsp;scope&nbsp;might&nbsp;be&nbsp;limited.&nbsp;&nbsp;<BR>
&nbsp;<BR>
A&nbsp;variable&nbsp;that&nbsp;is&nbsp;declared&nbsp;inside&nbsp;a&nbsp;function&nbsp;is&nbsp;only&nbsp;valid&nbsp;until&nbsp;the&nbsp;block&nbsp;terminator&nbsp;(the&nbsp;terminating&nbsp;})&nbsp;<BR>
for&nbsp;that&nbsp;variable&nbsp;is&nbsp;reached.&nbsp;&nbsp;<BR>
&nbsp;<BR>
&lt;&nbsp;top&nbsp;of&nbsp;file&nbsp;&gt;&nbsp;<BR>
int&nbsp;GlobCount;&nbsp;<BR>
&nbsp;<BR>
//&nbsp;Only&nbsp;GlobCount&nbsp;is&nbsp;available&nbsp;here&nbsp;<BR>
&nbsp;<BR>
void&nbsp;<BR>
var_func(int&nbsp;arg)&nbsp;<BR>
{&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;var_1;&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;GlobCount,&nbsp;arg&nbsp;and&nbsp;var_1&nbsp;is&nbsp;available&nbsp;here&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;&nbsp;code&nbsp;&gt;&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;string&nbsp;var_2;&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;GlobCount,&nbsp;arg,&nbsp;var_1&nbsp;and&nbsp;var_2&nbsp;is&nbsp;available&nbsp;in&nbsp;this&nbsp;block&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&nbsp;code&nbsp;&gt;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;GlobCount,&nbsp;arg&nbsp;and&nbsp;var_1&nbsp;is&nbsp;available&nbsp;here&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;&nbsp;code&nbsp;&gt;&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;var_2;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mapping&nbsp;var_3;&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;GlobCount,&nbsp;arg,&nbsp;var_1,&nbsp;var_2&nbsp;and&nbsp;var_3&nbsp;is&nbsp;available&nbsp;here&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;NB&nbsp;this&nbsp;var_2&nbsp;is&nbsp;a&nbsp;NEW&nbsp;var_2,&nbsp;declared&nbsp;here&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&nbsp;code&nbsp;&gt;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;GlobCount,&nbsp;arg&nbsp;and&nbsp;var_1&nbsp;is&nbsp;available&nbsp;here&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;&nbsp;code&nbsp;&gt;&nbsp;<BR>
}&nbsp;<BR>
&nbsp;<BR>
//&nbsp;Here&nbsp;only&nbsp;GlobCount&nbsp;(and&nbsp;the&nbsp;function&nbsp;var_func)&nbsp;is&nbsp;available&nbsp;<BR>
&nbsp;<BR>
Function&nbsp;declarations&nbsp;follow&nbsp;the&nbsp;same&nbsp;rule,&nbsp;though&nbsp;you&nbsp;can't&nbsp;declare&nbsp;a&nbsp;function&nbsp;inside&nbsp;another&nbsp;function.&nbsp;<BR>
However,&nbsp;suppose&nbsp;you&nbsp;have&nbsp;these&nbsp;two&nbsp;functions&nbsp;where&nbsp;the&nbsp;first&nbsp;uses&nbsp;the&nbsp;second:&nbsp;&nbsp;<BR>
&nbsp;<BR>
int&nbsp;<BR>
func_1()&nbsp;<BR>
{&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;&nbsp;code&nbsp;&gt;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;func_2(&quot;test&quot;);&nbsp;<BR>
}&nbsp;<BR>
&nbsp;<BR>
void&nbsp;<BR>
func_2(string&nbsp;data)&nbsp;<BR>
{&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;&nbsp;code&nbsp;&gt;&nbsp;<BR>
}&nbsp;<BR>
&nbsp;<BR>
Then&nbsp;you&nbsp;have&nbsp;a&nbsp;problem,&nbsp;because&nbsp;the&nbsp;first&nbsp;function&nbsp;tries&nbsp;to&nbsp;use&nbsp;the&nbsp;second&nbsp;before&nbsp;it&nbsp;is&nbsp;declared.&nbsp;This&nbsp;<BR>
will&nbsp;result&nbsp;in&nbsp;an&nbsp;error&nbsp;message&nbsp;if&nbsp;you&nbsp;have&nbsp;instructed&nbsp;the&nbsp;gamedriver&nbsp;to&nbsp;require&nbsp;types&nbsp;to&nbsp;match&nbsp;by&nbsp;<BR>
specifying&nbsp;pragma&nbsp;strict_types&nbsp;as&nbsp;suggested&nbsp;earlier.&nbsp;To&nbsp;take&nbsp;care&nbsp;of&nbsp;this&nbsp;you&nbsp;can&nbsp;either&nbsp;<BR>
re-arrange&nbsp;the&nbsp;functions&nbsp;so&nbsp;that&nbsp;func_2&nbsp;comes&nbsp;before&nbsp;func_1&nbsp;in&nbsp;the&nbsp;listing,&nbsp;but&nbsp;this&nbsp;might&nbsp;not&nbsp;<BR>
always&nbsp;be&nbsp;possible&nbsp;and&nbsp;the&nbsp;layout&nbsp;might&nbsp;suffer.&nbsp;Better&nbsp;then&nbsp;is&nbsp;to&nbsp;write&nbsp;a&nbsp;function&nbsp;prototype.&nbsp;The&nbsp;<BR>
function&nbsp;prototype&nbsp;should&nbsp;be&nbsp;placed&nbsp;in&nbsp;the&nbsp;top&nbsp;of&nbsp;the&nbsp;file&nbsp;after&nbsp;the&nbsp;inherit&nbsp;and&nbsp;#include&nbsp;<BR>
statements&nbsp;(described&nbsp;later)&nbsp;but&nbsp;before&nbsp;any&nbsp;code&nbsp;and&nbsp;look&nbsp;exactly&nbsp;as&nbsp;the&nbsp;function&nbsp;declaration&nbsp;itself.&nbsp;In&nbsp;<BR>
this&nbsp;case:&nbsp;&nbsp;<BR>
&nbsp;<BR>
&lt;&nbsp;top&nbsp;of&nbsp;file,&nbsp;inherit&nbsp;and&nbsp;#include&nbsp;statements&nbsp;&gt;&nbsp;<BR>
&nbsp;<BR>
void&nbsp;func_2(string&nbsp;data);&nbsp;<BR>
&nbsp;<BR>
&lt;&nbsp;the&nbsp;actual&nbsp;code&nbsp;&gt;&nbsp;<BR>
&nbsp;<BR>
Operator&nbsp;expressions&nbsp;<BR>
&nbsp;<BR>
The&nbsp;LPC&nbsp;language&nbsp;defines&nbsp;a&nbsp;large&nbsp;set&nbsp;of&nbsp;operators&nbsp;expressions,&nbsp;simply&nbsp;expressions&nbsp;that&nbsp;operate&nbsp;on&nbsp;<BR>
other&nbsp;expressions.&nbsp;What&nbsp;follows&nbsp;here&nbsp;is&nbsp;a&nbsp;list&nbsp;of&nbsp;them.&nbsp;I've&nbsp;used&nbsp;a&nbsp;condensed&nbsp;notation&nbsp;so&nbsp;that&nbsp;the&nbsp;text&nbsp;<BR>
won't&nbsp;take&nbsp;all&nbsp;of&nbsp;the&nbsp;page&nbsp;before&nbsp;getting&nbsp;down&nbsp;to&nbsp;actual&nbsp;explanations.&nbsp;&nbsp;<BR>
&nbsp;<BR>
`E'&nbsp;Any&nbsp;expression,&nbsp;even&nbsp;a&nbsp;compound&nbsp;one.&nbsp;&nbsp;<BR>
`V'&nbsp;A&nbsp;variable.&nbsp;&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Miscellaneous&nbsp;operators:&nbsp;General&nbsp;(C)&nbsp;operators&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Arithmetic&nbsp;operators:&nbsp;The&nbsp;arithmetic&nbsp;operators&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Boolean&nbsp;operators:&nbsp;Boolean,&nbsp;or&nbsp;binary,&nbsp;operators&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Conditional&nbsp;operators:&nbsp;Conditionals&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Comparative&nbsp;operators:&nbsp;Comparing&nbsp;data&nbsp;&nbsp;<BR>
&nbsp;<BR>
Miscellaneous&nbsp;operators&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;1.(E)&nbsp;E&nbsp;is&nbsp;evaluated&nbsp;before&nbsp;doing&nbsp;anything&nbsp;outside&nbsp;the&nbsp;parenthesis.&nbsp;This&nbsp;is&nbsp;useful&nbsp;for&nbsp;isolating&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;expressions&nbsp;that&nbsp;need&nbsp;to&nbsp;be&nbsp;done&nbsp;in&nbsp;a&nbsp;specific&nbsp;order,&nbsp;or&nbsp;when&nbsp;you&nbsp;are&nbsp;uncertain&nbsp;about&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prescedence&nbsp;(described&nbsp;later).&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;2.E1,&nbsp;E2&nbsp;E1&nbsp;is&nbsp;evaluated&nbsp;first&nbsp;and&nbsp;the&nbsp;result&nbsp;stored,&nbsp;then&nbsp;E2&nbsp;is&nbsp;evaluated&nbsp;and&nbsp;the&nbsp;result&nbsp;thrown&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;away,&nbsp;lastly&nbsp;the&nbsp;stored&nbsp;result&nbsp;of&nbsp;E1&nbsp;is&nbsp;returned&nbsp;as&nbsp;the&nbsp;value&nbsp;of&nbsp;the&nbsp;entire&nbsp;expression.&nbsp;&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The&nbsp;statement&nbsp;'a&nbsp;=&nbsp;1,&nbsp;2,&nbsp;3;'&nbsp;will&nbsp;set&nbsp;'a'&nbsp;to&nbsp;contain&nbsp;'1'.&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;3.V&nbsp;=&nbsp;E&nbsp;The&nbsp;variable&nbsp;is&nbsp;given&nbsp;the&nbsp;value&nbsp;of&nbsp;the&nbsp;expression.&nbsp;The&nbsp;result&nbsp;of&nbsp;this&nbsp;entire&nbsp;expression&nbsp;is&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;also&nbsp;the&nbsp;value&nbsp;of&nbsp;E.&nbsp;&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'a&nbsp;=&nbsp;b&nbsp;=&nbsp;4;'&nbsp;will&nbsp;set&nbsp;a&nbsp;and&nbsp;b&nbsp;to&nbsp;be&nbsp;4.&nbsp;It&nbsp;can&nbsp;also&nbsp;be&nbsp;written&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'a&nbsp;=&nbsp;(b&nbsp;=&nbsp;4)'&nbsp;to&nbsp;illustrate&nbsp;the&nbsp;order&nbsp;of&nbsp;execution.&nbsp;<BR>
&nbsp;<BR>
Arithmetic&nbsp;operators&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;1.E1&nbsp;+&nbsp;E2&nbsp;The&nbsp;expressions&nbsp;are&nbsp;evaluated&nbsp;and&nbsp;the&nbsp;results&nbsp;added&nbsp;to&nbsp;each&nbsp;other.&nbsp;You&nbsp;can&nbsp;add&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;integers,&nbsp;floats,&nbsp;strings,&nbsp;arrays&nbsp;and&nbsp;mappings.&nbsp;Strings,&nbsp;arrays&nbsp;and&nbsp;mappings&nbsp;are&nbsp;simply&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;concatenated&nbsp;-&nbsp;pasted&nbsp;together&nbsp;to&nbsp;the&nbsp;end&nbsp;of&nbsp;the&nbsp;first&nbsp;argument.&nbsp;It's&nbsp;also&nbsp;possible&nbsp;to&nbsp;add&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;integers&nbsp;to&nbsp;strings,&nbsp;they&nbsp;will&nbsp;then&nbsp;be&nbsp;converted&nbsp;to&nbsp;strings&nbsp;and&nbsp;pasted&nbsp;to&nbsp;the&nbsp;end&nbsp;of&nbsp;the&nbsp;string.&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;2.E1&nbsp;-&nbsp;E2&nbsp;E2&nbsp;is&nbsp;subtracted&nbsp;from&nbsp;E1.&nbsp;You&nbsp;can&nbsp;subtract&nbsp;integers,&nbsp;floats&nbsp;and&nbsp;any&nbsp;type&nbsp;from&nbsp;arrays&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;of&nbsp;the&nbsp;same&nbsp;type.&nbsp;For&nbsp;arrays&nbsp;the&nbsp;item,&nbsp;if&nbsp;it&nbsp;exists&nbsp;in&nbsp;the&nbsp;array&nbsp;it&nbsp;is&nbsp;subtracted&nbsp;from,&nbsp;is&nbsp;removed&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;from&nbsp;the&nbsp;array.&nbsp;If&nbsp;it&nbsp;doesn't&nbsp;exist&nbsp;in&nbsp;the&nbsp;array,&nbsp;the&nbsp;array&nbsp;is&nbsp;returned&nbsp;intact.&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;3.E1&nbsp;*&nbsp;E2&nbsp;E1&nbsp;is&nbsp;multiplied&nbsp;by&nbsp;E2.&nbsp;This&nbsp;only&nbsp;works&nbsp;on&nbsp;integers&nbsp;and&nbsp;floats.&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;4.E1&nbsp;/&nbsp;E2&nbsp;E1&nbsp;is&nbsp;divided&nbsp;by&nbsp;E2.&nbsp;This&nbsp;only&nbsp;works&nbsp;on&nbsp;integers&nbsp;and&nbsp;floats.&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;5.E1&nbsp;%&nbsp;E2&nbsp;The&nbsp;remainder&nbsp;of&nbsp;the&nbsp;expression&nbsp;'E1&nbsp;/&nbsp;E2'&nbsp;is&nbsp;returned.&nbsp;This&nbsp;only&nbsp;works&nbsp;with&nbsp;integers.&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'14&nbsp;%&nbsp;3'&nbsp;will&nbsp;yield&nbsp;2&nbsp;as&nbsp;the&nbsp;remainder.&nbsp;'14&nbsp;/&nbsp;3'&nbsp;will&nbsp;be&nbsp;4,&nbsp;and&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;*&nbsp;3&nbsp;+&nbsp;2&nbsp;=&nbsp;14&nbsp;as&nbsp;a&nbsp;small&nbsp;check.&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;6.-E&nbsp;Return&nbsp;E&nbsp;with&nbsp;reversed&nbsp;sign.&nbsp;This&nbsp;only&nbsp;works&nbsp;on&nbsp;integers&nbsp;and&nbsp;floats.&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;7.E++,&nbsp;++E&nbsp;The&nbsp;expression&nbsp;'E'&nbsp;is&nbsp;incremented&nbsp;by&nbsp;one.&nbsp;If&nbsp;the&nbsp;operator&nbsp;is&nbsp;in&nbsp;front&nbsp;of&nbsp;the&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;expression,&nbsp;the&nbsp;incrememntation&nbsp;is&nbsp;done&nbsp;before&nbsp;the&nbsp;expression&nbsp;is&nbsp;used,&nbsp;otherwise&nbsp;afterwards.&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'a&nbsp;=&nbsp;3;&nbsp;b&nbsp;=&nbsp;++a;'&nbsp;will&nbsp;yield&nbsp;the&nbsp;result&nbsp;'a&nbsp;=&nbsp;4,&nbsp;b&nbsp;=&nbsp;4',&nbsp;while&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'a&nbsp;=&nbsp;3;&nbsp;b&nbsp;=&nbsp;a++;'&nbsp;will&nbsp;yield&nbsp;the&nbsp;result&nbsp;'a&nbsp;=&nbsp;4,&nbsp;b&nbsp;=&nbsp;3'.&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This&nbsp;only&nbsp;works&nbsp;on&nbsp;integers.&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;8.E--,&nbsp;--E&nbsp;The&nbsp;expression&nbsp;'E'&nbsp;is&nbsp;decremented&nbsp;by&nbsp;one.&nbsp;If&nbsp;the&nbsp;operator&nbsp;is&nbsp;in&nbsp;front&nbsp;of&nbsp;the&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;expression,&nbsp;the&nbsp;deccrememntation&nbsp;is&nbsp;done&nbsp;before&nbsp;the&nbsp;expression&nbsp;is&nbsp;used,&nbsp;otherwise&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;afterwards.&nbsp;&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'a&nbsp;=&nbsp;3;&nbsp;b&nbsp;=&nbsp;--a;'&nbsp;will&nbsp;yield&nbsp;the&nbsp;result&nbsp;'a&nbsp;=&nbsp;2,&nbsp;b&nbsp;=&nbsp;2',&nbsp;while&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'a&nbsp;=&nbsp;3;&nbsp;b&nbsp;=&nbsp;a--;'&nbsp;will&nbsp;yield&nbsp;the&nbsp;result&nbsp;'a&nbsp;=&nbsp;2,&nbsp;b&nbsp;=&nbsp;3'.&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This&nbsp;only&nbsp;works&nbsp;on&nbsp;integers.&nbsp;&nbsp;<BR>
&nbsp;<BR>
Boolean&nbsp;operators&nbsp;<BR>
&nbsp;<BR>
Boolean&nbsp;(binary)&nbsp;operators&nbsp;are&nbsp;applicable&nbsp;only&nbsp;to&nbsp;integers&nbsp;with&nbsp;the&nbsp;exception&nbsp;of&nbsp;the&nbsp;&amp;&nbsp;operator&nbsp;which&nbsp;<BR>
also&nbsp;works&nbsp;on&nbsp;arrays.&nbsp;Internally&nbsp;an&nbsp;integer&nbsp;is&nbsp;32&nbsp;bits&nbsp;long.&nbsp;However,&nbsp;in&nbsp;the&nbsp;following&nbsp;examples&nbsp;I&nbsp;will&nbsp;<BR>
only&nbsp;show&nbsp;the&nbsp;ten&nbsp;last&nbsp;bits&nbsp;as&nbsp;the&nbsp;others&nbsp;are&nbsp;0&nbsp;and&nbsp;can&nbsp;be&nbsp;ignored&nbsp;with&nbsp;the&nbsp;one&nbsp;exception&nbsp;of&nbsp;the&nbsp;<BR>
~-operator.&nbsp;&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;1.E1&nbsp;&amp;&nbsp;E2&nbsp;E1&nbsp;and&nbsp;E2.&nbsp;&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1011101001&nbsp;&nbsp;&nbsp;(=&nbsp;745)&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1000100010&nbsp;&amp;&nbsp;(=&nbsp;546)&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;------------&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1000100000&nbsp;&nbsp;&nbsp;(=&nbsp;544)&nbsp;=&gt;&nbsp;745&nbsp;&amp;&nbsp;546&nbsp;=&nbsp;544&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Used&nbsp;on&nbsp;two&nbsp;arrays,&nbsp;this&nbsp;function&nbsp;will&nbsp;return&nbsp;a&nbsp;new&nbsp;array&nbsp;that&nbsp;holds&nbsp;all&nbsp;elements&nbsp;that&nbsp;are&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;members&nbsp;of&nbsp;both&nbsp;of&nbsp;the&nbsp;argument&nbsp;arrays.&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;2.E1&nbsp;|&nbsp;E2&nbsp;E1&nbsp;or&nbsp;E2.&nbsp;&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1011101001&nbsp;&nbsp;&nbsp;(=&nbsp;745)&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1000100010&nbsp;|&nbsp;(=&nbsp;546)&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;------------&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1011101011&nbsp;&nbsp;&nbsp;(=&nbsp;747)&nbsp;=&gt;&nbsp;745&nbsp;|&nbsp;546&nbsp;=&nbsp;747&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;3.E1&nbsp;^&nbsp;E2&nbsp;E1&nbsp;xor&nbsp;(exclusive&nbsp;or)&nbsp;E2.&nbsp;&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1011101001&nbsp;&nbsp;&nbsp;(=&nbsp;745)&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1000100010&nbsp;^&nbsp;(=&nbsp;546)&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;------------&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0011001011&nbsp;&nbsp;&nbsp;(=&nbsp;203)&nbsp;=&gt;&nbsp;745&nbsp;^&nbsp;546&nbsp;=&nbsp;203&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;4.~E&nbsp;1-complement&nbsp;of&nbsp;E&nbsp;(invert&nbsp;E).&nbsp;&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;00000000000000000000001011101001&nbsp;~&nbsp;(=&nbsp;745)&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;----------------------------------&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;11111111111111111111110100010110&nbsp;&nbsp;&nbsp;(=&nbsp;-746)&nbsp;=&gt;&nbsp;~745&nbsp;=&nbsp;-746&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NB!&nbsp;The&nbsp;above&nbsp;example&nbsp;might&nbsp;be&nbsp;hard&nbsp;to&nbsp;understand&nbsp;unless&nbsp;you&nbsp;really&nbsp;know&nbsp;your&nbsp;binary&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arithmetic.&nbsp;However,&nbsp;trust&nbsp;me&nbsp;when&nbsp;I&nbsp;say&nbsp;that&nbsp;this&nbsp;is&nbsp;not&nbsp;a&nbsp;typo,&nbsp;it's&nbsp;the&nbsp;way&nbsp;it&nbsp;should&nbsp;look.&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Read&nbsp;a&nbsp;book&nbsp;on&nbsp;boolean&nbsp;algebra&nbsp;(the&nbsp;section&nbsp;on&nbsp;two-complement&nbsp;binary&nbsp;arithmentic)&nbsp;and&nbsp;all&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;will&nbsp;be&nbsp;clear.&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;5.E1&nbsp;&lt;&lt;&nbsp;E2&nbsp;E1&nbsp;is&nbsp;shifted&nbsp;left&nbsp;E2&nbsp;steps.&nbsp;&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5&nbsp;&lt;&lt;&nbsp;4&nbsp;=&gt;&nbsp;101(b)&nbsp;&lt;&lt;&nbsp;4&nbsp;=&nbsp;1010000(b)&nbsp;=&nbsp;80&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;6.E1&nbsp;&gt;&gt;&nbsp;E2&nbsp;E1&nbsp;is&nbsp;shifted&nbsp;right&nbsp;E2&nbsp;steps.&nbsp;&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1054&nbsp;&gt;&gt;&nbsp;5&nbsp;=&gt;&nbsp;10000011110(b)&nbsp;&gt;&gt;&nbsp;5&nbsp;=&nbsp;100000(b)&nbsp;=&nbsp;32&nbsp;<BR>
&nbsp;<BR>
Conditional&nbsp;(logical)&nbsp;operators&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;1.E1&nbsp;||&nbsp;E2&nbsp;Returns&nbsp;true&nbsp;if&nbsp;E1&nbsp;or&nbsp;E2&nbsp;evaluates&nbsp;as&nbsp;true.&nbsp;Will&nbsp;not&nbsp;evaluate&nbsp;E2&nbsp;if&nbsp;E1&nbsp;is&nbsp;true.&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;2.E1&nbsp;&amp;&amp;&nbsp;E2&nbsp;Returns&nbsp;true&nbsp;if&nbsp;both&nbsp;E1&nbsp;and&nbsp;E2&nbsp;evaluates&nbsp;as&nbsp;true.&nbsp;Will&nbsp;not&nbsp;evaluate&nbsp;E2&nbsp;if&nbsp;E1&nbsp;is&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;false.&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;3.!E&nbsp;Returns&nbsp;true&nbsp;if&nbsp;E&nbsp;is&nbsp;false&nbsp;&amp;&nbsp;vice&nbsp;versa.&nbsp;&nbsp;<BR>
&nbsp;<BR>
Comparative&nbsp;operators&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;1.E1&nbsp;==&nbsp;E2&nbsp;Returns&nbsp;true&nbsp;if&nbsp;E1&nbsp;is&nbsp;equal&nbsp;to&nbsp;E2,&nbsp;can&nbsp;be&nbsp;used&nbsp;on&nbsp;all&nbsp;kinds&nbsp;of&nbsp;types,&nbsp;but&nbsp;see&nbsp;the&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;special&nbsp;section&nbsp;later&nbsp;on&nbsp;arrays&nbsp;and&nbsp;mappings,&nbsp;it&nbsp;works&nbsp;differently&nbsp;on&nbsp;them&nbsp;from&nbsp;what&nbsp;you&nbsp;might&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;think.&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;2.E1&nbsp;!=&nbsp;E2&nbsp;Returns&nbsp;true&nbsp;if&nbsp;E1&nbsp;isn't&nbsp;equal&nbsp;to&nbsp;E2,&nbsp;can&nbsp;be&nbsp;used&nbsp;on&nbsp;all&nbsp;kinds&nbsp;of&nbsp;types,&nbsp;but&nbsp;see&nbsp;the&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;special&nbsp;section&nbsp;later&nbsp;on&nbsp;arrays&nbsp;and&nbsp;mappings,&nbsp;it&nbsp;works&nbsp;differently&nbsp;om&nbsp;them&nbsp;from&nbsp;what&nbsp;you&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;might&nbsp;think.&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;3.E1&nbsp;&gt;&nbsp;E2&nbsp;Returns&nbsp;true&nbsp;if&nbsp;E1&nbsp;is&nbsp;greater&nbsp;than&nbsp;E2,&nbsp;can&nbsp;be&nbsp;used&nbsp;on&nbsp;all&nbsp;types&nbsp;except&nbsp;arrays&nbsp;and&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mappings.&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;4.E1&nbsp;&lt;&nbsp;E2&nbsp;Returns&nbsp;true&nbsp;if&nbsp;E1&nbsp;is&nbsp;less&nbsp;than&nbsp;E2,&nbsp;can&nbsp;be&nbsp;used&nbsp;on&nbsp;all&nbsp;types&nbsp;except&nbsp;arrays&nbsp;and&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mappings.&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;5.E1&nbsp;&gt;=&nbsp;E2&nbsp;Returns&nbsp;true&nbsp;if&nbsp;E1&nbsp;is&nbsp;greater&nbsp;or&nbsp;equal&nbsp;to&nbsp;E2,&nbsp;can&nbsp;be&nbsp;used&nbsp;on&nbsp;all&nbsp;types&nbsp;except&nbsp;arrays&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;and&nbsp;mappings.&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;6.E1&nbsp;&lt;=&nbsp;E2&nbsp;Returns&nbsp;true&nbsp;if&nbsp;E1&nbsp;is&nbsp;less&nbsp;or&nbsp;equal&nbsp;to&nbsp;E2,&nbsp;can&nbsp;be&nbsp;used&nbsp;on&nbsp;all&nbsp;types&nbsp;except&nbsp;arrays&nbsp;and&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mappings.&nbsp;&nbsp;<BR>
&nbsp;<BR>
Prefix&nbsp;allocation&nbsp;<BR>
&nbsp;<BR>
All&nbsp;of&nbsp;the&nbsp;arithmetic&nbsp;and&nbsp;boolean&nbsp;operator&nbsp;expressions&nbsp;can&nbsp;be&nbsp;written&nbsp;in&nbsp;a&nbsp;shorter&nbsp;way&nbsp;if&nbsp;all&nbsp;you&nbsp;want&nbsp;<BR>
to&nbsp;do&nbsp;is&nbsp;compute&nbsp;one&nbsp;variable&nbsp;with&nbsp;any&nbsp;other&nbsp;expression&nbsp;and&nbsp;then&nbsp;store&nbsp;the&nbsp;result&nbsp;in&nbsp;the&nbsp;variable&nbsp;<BR>
again.&nbsp;&nbsp;<BR>
&nbsp;<BR>
Say&nbsp;that&nbsp;what&nbsp;you&nbsp;want&nbsp;to&nbsp;do&nbsp;is&nbsp;this&nbsp;a&nbsp;=&nbsp;a&nbsp;+&nbsp;5;,&nbsp;a&nbsp;much&nbsp;neater&nbsp;way&nbsp;of&nbsp;writing&nbsp;that&nbsp;is&nbsp;a&nbsp;+=&nbsp;5;.&nbsp;<BR>
The&nbsp;value&nbsp;of&nbsp;the&nbsp;second&nbsp;expression&nbsp;is&nbsp;added&nbsp;to&nbsp;the&nbsp;first&nbsp;and&nbsp;then&nbsp;stored&nbsp;in&nbsp;the&nbsp;first&nbsp;which&nbsp;happens&nbsp;to&nbsp;<BR>
be&nbsp;a&nbsp;variable.&nbsp;&nbsp;<BR>
&nbsp;<BR>
You&nbsp;write&nbsp;all&nbsp;the&nbsp;others&nbsp;in&nbsp;the&nbsp;same&nbsp;way,&nbsp;i.e.&nbsp;the&nbsp;variable,&nbsp;then&nbsp;the&nbsp;operator&nbsp;directly&nbsp;followed&nbsp;by&nbsp;=&nbsp;and&nbsp;<BR>
then&nbsp;the&nbsp;expression.&nbsp;&nbsp;<BR>
&nbsp;<BR>
a&nbsp;&gt;&gt;=&nbsp;5;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;a&nbsp;=&nbsp;a&nbsp;&gt;&gt;&nbsp;5;&nbsp;<BR>
b&nbsp;%=&nbsp;d&nbsp;+&nbsp;4;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;b&nbsp;=&nbsp;b&nbsp;%&nbsp;(d&nbsp;+&nbsp;4);&nbsp;<BR>
c&nbsp;^=&nbsp;44&nbsp;&amp;&nbsp;q;&nbsp;&nbsp;&nbsp;//&nbsp;c&nbsp;=&nbsp;c&nbsp;^&nbsp;(44&nbsp;&amp;&nbsp;q);&nbsp;<BR>
&nbsp;<BR>
Precedence&nbsp;and&nbsp;Order&nbsp;of&nbsp;evalutaion&nbsp;<BR>
&nbsp;<BR>
The&nbsp;table&nbsp;below&nbsp;summarizes&nbsp;the&nbsp;rules&nbsp;for&nbsp;precedence&nbsp;and&nbsp;associativity&nbsp;of&nbsp;all&nbsp;operators,&nbsp;including&nbsp;<BR>
those&nbsp;which&nbsp;we&nbsp;have&nbsp;not&nbsp;yet&nbsp;discussed.&nbsp;Operators&nbsp;on&nbsp;the&nbsp;same&nbsp;line&nbsp;have&nbsp;the&nbsp;same&nbsp;precedence,&nbsp;rows&nbsp;<BR>
are&nbsp;in&nbsp;order&nbsp;of&nbsp;decreasing&nbsp;precedence,&nbsp;so,&nbsp;for&nbsp;example,&nbsp;*,&nbsp;/&nbsp;and&nbsp;%&nbsp;all&nbsp;have&nbsp;the&nbsp;same&nbsp;precedence,&nbsp;which&nbsp;<BR>
is&nbsp;higher&nbsp;than&nbsp;that&nbsp;of&nbsp;+&nbsp;and&nbsp;-.&nbsp;&nbsp;<BR>
&nbsp;<BR>
Note&nbsp;that&nbsp;the&nbsp;precedence&nbsp;of&nbsp;the&nbsp;bitwise&nbsp;logical&nbsp;operators&nbsp;&amp;,&nbsp;^&nbsp;and&nbsp;|&nbsp;falls&nbsp;below&nbsp;==&nbsp;and&nbsp;!=.&nbsp;This&nbsp;<BR>
implies&nbsp;that&nbsp;bit-testing&nbsp;expressions&nbsp;like&nbsp;&nbsp;<BR>
&nbsp;<BR>
if&nbsp;((x&nbsp;&amp;&nbsp;MASK)&nbsp;==&nbsp;0)&nbsp;...&nbsp;<BR>
&nbsp;<BR>
must&nbsp;be&nbsp;fully&nbsp;parenthesized&nbsp;to&nbsp;give&nbsp;proper&nbsp;results.&nbsp;&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;1.()&nbsp;[]&nbsp;Left&nbsp;to&nbsp;right&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;2.!&nbsp;~&nbsp;++&nbsp;--&nbsp;-&nbsp;(type)&nbsp;*&nbsp;&amp;&nbsp;Right&nbsp;to&nbsp;left&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;3.*&nbsp;/&nbsp;%&nbsp;Left&nbsp;to&nbsp;right&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;4.+&nbsp;-&nbsp;Left&nbsp;to&nbsp;right&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;5.&lt;&lt;&nbsp;&gt;&gt;&nbsp;Left&nbsp;to&nbsp;right&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;6.&lt;&nbsp;&lt;=&nbsp;&gt;&nbsp;&gt;=&nbsp;Left&nbsp;to&nbsp;right&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;7.==&nbsp;!=&nbsp;Left&nbsp;to&nbsp;right&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;8.&amp;&nbsp;Left&nbsp;to&nbsp;right&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;9.^&nbsp;Left&nbsp;to&nbsp;right&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;10.|&nbsp;Left&nbsp;to&nbsp;right&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;11.&amp;&amp;&nbsp;Left&nbsp;to&nbsp;right&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;12.||&nbsp;Left&nbsp;to&nbsp;right&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;13.?:&nbsp;Right&nbsp;to&nbsp;left&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;14.=&nbsp;+=&nbsp;==&nbsp;etc.&nbsp;Right&nbsp;to&nbsp;left&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;15.,&nbsp;Left&nbsp;to&nbsp;right&nbsp;&nbsp;<BR>
&nbsp;<BR>
--&nbsp;<BR>
※&nbsp;來源:•BBS&nbsp;水木清華站&nbsp;bbs.net.tsinghua.edu.cn•[FROM:&nbsp;klab.ishii.utsu]&nbsp;<BR>
<A HREF="00000006.htm">上一篇</A>
<A HREF='javascript:history.go(-1)'>返回上一頁</A>
<A HREF="index.htm">回到目錄</A>
<A HREF="#top">回到頁首</A>
<A HREF="00000008.htm">下一篇</A>
</H1></CENTER>
<CENTER><H1>BBS水木清華站︰精華區</H1></CENTER>
</BODY></HTML>