<HTML>
<HEAD>
<TITLE>BBS水木清華站︰精華區</TITLE>
</HEAD>
<BODY>
<CENTER><H1>BBS水木清華站︰精華區</H1></CENTER>
<A Name="top"></a>
發信人:&nbsp;jameson&nbsp;(阿其),&nbsp;信區:&nbsp;Mud_Builder&nbsp;<BR>
標&nbsp;&nbsp;題:&nbsp;LPC&nbsp;Manual&nbsp;-&nbsp;Essential&nbsp;LPC&nbsp;and&nbsp;MUDLIB&nbsp;(7)&nbsp;<BR>
發信站:&nbsp;BBS&nbsp;水木清華站&nbsp;(Fri&nbsp;May&nbsp;23&nbsp;22:54:05&nbsp;1997)&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
Alarms:&nbsp;Asynchronous&nbsp;function&nbsp;execution&nbsp;<BR>
&nbsp;<BR>
[set_alarm,&nbsp;remove_alarm,&nbsp;get_alarm,&nbsp;get_all_alarms]&nbsp;&nbsp;<BR>
&nbsp;<BR>
Somtimes&nbsp;it's&nbsp;desirable&nbsp;to&nbsp;postpone&nbsp;execution&nbsp;of&nbsp;code&nbsp;a&nbsp;while&nbsp;and&nbsp;sometimes&nbsp;you&nbsp;want&nbsp;things&nbsp;to&nbsp;happen&nbsp;regularly.&nbsp;The&nbsp;gamedriver&nbsp;counts&nbsp;<BR>
something&nbsp;called&nbsp;evaluation&nbsp;cost,&nbsp;or&nbsp;eval&nbsp;cost.&nbsp;It's&nbsp;simply&nbsp;a&nbsp;way&nbsp;of&nbsp;measuring&nbsp;the&nbsp;amount&nbsp;of&nbsp;CPU&nbsp;cost&nbsp;an&nbsp;object&nbsp;uses.&nbsp;Any&nbsp;given&nbsp;object&nbsp;is&nbsp;<BR>
only&nbsp;allowed&nbsp;a&nbsp;certain&nbsp;amount&nbsp;of&nbsp;eval&nbsp;cost&nbsp;per&nbsp;execution&nbsp;chain.&nbsp;When&nbsp;that&nbsp;amount&nbsp;is&nbsp;used&nbsp;up,&nbsp;the&nbsp;object&nbsp;aborts.&nbsp;How&nbsp;the&nbsp;eval&nbsp;cost&nbsp;is&nbsp;<BR>
computed&nbsp;isn't&nbsp;very&nbsp;important,&nbsp;it's&nbsp;set&nbsp;so&nbsp;that&nbsp;the&nbsp;game&nbsp;shouldn't&nbsp;be&nbsp;held&nbsp;up&nbsp;too&nbsp;long.&nbsp;However,&nbsp;the&nbsp;existance&nbsp;of&nbsp;eval&nbsp;cost&nbsp;makes&nbsp;a&nbsp;bit&nbsp;of&nbsp;<BR>
special&nbsp;programming&nbsp;necessary.&nbsp;When&nbsp;you&nbsp;have&nbsp;very&nbsp;heavy&nbsp;computations&nbsp;you&nbsp;need&nbsp;to&nbsp;do,&nbsp;they&nbsp;simply&nbsp;won't&nbsp;fit&nbsp;withing&nbsp;the&nbsp;maximum&nbsp;allowed&nbsp;<BR>
eval&nbsp;cost,&nbsp;so&nbsp;you&nbsp;need&nbsp;to&nbsp;cut&nbsp;the&nbsp;job&nbsp;up&nbsp;in&nbsp;chunks&nbsp;and&nbsp;do&nbsp;it&nbsp;bit&nbsp;by&nbsp;bit.&nbsp;&nbsp;<BR>
&nbsp;<BR>
All&nbsp;of&nbsp;this&nbsp;adds&nbsp;up&nbsp;to&nbsp;a&nbsp;need&nbsp;for&nbsp;a&nbsp;function&nbsp;that&nbsp;allows&nbsp;you&nbsp;to&nbsp;do&nbsp;things&nbsp;regularly,&nbsp;or&nbsp;with&nbsp;delays.&nbsp;The&nbsp;alarm&nbsp;functionality&nbsp;will&nbsp;do&nbsp;this&nbsp;for&nbsp;you.&nbsp;<BR>
The&nbsp;efun&nbsp;set_alarm()&nbsp;will&nbsp;allow&nbsp;you&nbsp;to&nbsp;create&nbsp;a&nbsp;delayed&nbsp;alarm,&nbsp;possibly&nbsp;repeating,&nbsp;that&nbsp;will&nbsp;call&nbsp;a&nbsp;given&nbsp;function&nbsp;as&nbsp;you&nbsp;decide.&nbsp;&nbsp;<BR>
&nbsp;<BR>
int&nbsp;set_alarm(float&nbsp;delay,&nbsp;float&nbsp;repeat,&nbsp;function&nbsp;alarm_func)&nbsp;<BR>
remove_alarm(int&nbsp;alarm_id)&nbsp;<BR>
mixed&nbsp;get_alarm(int&nbsp;alarm_id)&nbsp;<BR>
mixed&nbsp;get_all_alarms()&nbsp;<BR>
&nbsp;<BR>
The&nbsp;function&nbsp;returns&nbsp;a&nbsp;unique&nbsp;alarm&nbsp;number&nbsp;for&nbsp;that&nbsp;alarm&nbsp;and&nbsp;that&nbsp;object&nbsp;that&nbsp;you&nbsp;can&nbsp;use&nbsp;later&nbsp;to&nbsp;manipulate&nbsp;the&nbsp;specific&nbsp;alarm.&nbsp;You&nbsp;can&nbsp;<BR>
retrieve&nbsp;info&nbsp;for&nbsp;the&nbsp;alarm&nbsp;with&nbsp;the&nbsp;efun&nbsp;get_alarm(),&nbsp;remove&nbsp;it&nbsp;with&nbsp;remove_alarm()&nbsp;or&nbsp;even&nbsp;get&nbsp;info&nbsp;about&nbsp;all&nbsp;alarms&nbsp;in&nbsp;an&nbsp;object&nbsp;with&nbsp;<BR>
the&nbsp;efun&nbsp;get_all_alarms().&nbsp;The&nbsp;latter&nbsp;function&nbsp;is&nbsp;mostly&nbsp;used&nbsp;when&nbsp;you&nbsp;either&nbsp;haven't&nbsp;bothered&nbsp;to&nbsp;save&nbsp;the&nbsp;alarm&nbsp;ids,&nbsp;or&nbsp;when&nbsp;you&nbsp;want&nbsp;<BR>
to&nbsp;display&nbsp;info&nbsp;about&nbsp;the&nbsp;object.&nbsp;The&nbsp;efun&nbsp;set_alarm()&nbsp;allows&nbsp;you&nbsp;both&nbsp;to&nbsp;define&nbsp;a&nbsp;delay&nbsp;until&nbsp;the&nbsp;function&nbsp;is&nbsp;called&nbsp;the&nbsp;first&nbsp;time,&nbsp;and&nbsp;a&nbsp;<BR>
delay&nbsp;between&nbsp;repetitive&nbsp;calls.&nbsp;Every&nbsp;alarm&nbsp;call&nbsp;will&nbsp;start&nbsp;with&nbsp;an&nbsp;eval&nbsp;cost&nbsp;at&nbsp;0.&nbsp;&nbsp;<BR>
&nbsp;<BR>
A&nbsp;small&nbsp;word&nbsp;of&nbsp;caution&nbsp;here...&nbsp;Since&nbsp;the&nbsp;function&nbsp;gets&nbsp;called&nbsp;asynchronously&nbsp;in&nbsp;respect&nbsp;to&nbsp;a&nbsp;user&nbsp;of&nbsp;the&nbsp;object,&nbsp;both&nbsp;this_player()&nbsp;and&nbsp;<BR>
this_interactive()&nbsp;might&nbsp;return&nbsp;undefined&nbsp;values.&nbsp;Sometimes&nbsp;0,&nbsp;sometimes&nbsp;the&nbsp;object&nbsp;you&nbsp;expect,&nbsp;sometimes&nbsp;another&nbsp;value.&nbsp;So,&nbsp;don't&nbsp;<BR>
rely&nbsp;on&nbsp;what&nbsp;they&nbsp;return,&nbsp;instead&nbsp;stick&nbsp;the&nbsp;object&nbsp;you&nbsp;want&nbsp;to&nbsp;use&nbsp;in&nbsp;a&nbsp;variable&nbsp;before&nbsp;starting&nbsp;the&nbsp;sequence&nbsp;and&nbsp;uese&nbsp;that.&nbsp;Remember&nbsp;this&nbsp;<BR>
since&nbsp;some&nbsp;efuns&nbsp;rely&nbsp;on&nbsp;a&nbsp;defined&nbsp;this_player()&nbsp;value.&nbsp;&nbsp;<BR>
&nbsp;<BR>
IMPORTANT!&nbsp;READ&nbsp;THIS&nbsp;CAREFULLY!&nbsp;&nbsp;<BR>
&nbsp;<BR>
It's&nbsp;very&nbsp;easy&nbsp;to&nbsp;fall&nbsp;to&nbsp;the&nbsp;temptation&nbsp;to&nbsp;split&nbsp;a&nbsp;heavy&nbsp;job&nbsp;into&nbsp;several&nbsp;alarm&nbsp;calls&nbsp;with&nbsp;fast&nbsp;repetition&nbsp;rates.&nbsp;However,&nbsp;this&nbsp;is&nbsp;NOT&nbsp;the&nbsp;intended&nbsp;<BR>
use&nbsp;for&nbsp;this&nbsp;efun.&nbsp;A&nbsp;deadly&nbsp;sin&nbsp;is&nbsp;to&nbsp;have&nbsp;an&nbsp;alarm&nbsp;function&nbsp;that&nbsp;generates&nbsp;repeating&nbsp;alarms&nbsp;within&nbsp;a&nbsp;repeating&nbsp;alarm.&nbsp;The&nbsp;amount&nbsp;of&nbsp;alarms&nbsp;<BR>
will&nbsp;then&nbsp;grow&nbsp;exponentially&nbsp;and&nbsp;the&nbsp;ENTIRE&nbsp;GAME&nbsp;will&nbsp;stop&nbsp;almost&nbsp;immediately.&nbsp;This&nbsp;is&nbsp;so&nbsp;incredibly&nbsp;stupid&nbsp;as&nbsp;to&nbsp;be&nbsp;a&nbsp;demoting&nbsp;offense,&nbsp;so&nbsp;<BR>
make&nbsp;sure&nbsp;you&nbsp;do&nbsp;things&nbsp;RIGHT&nbsp;the&nbsp;first&nbsp;time.&nbsp;In&nbsp;general,&nbsp;delays&nbsp;between&nbsp;repeating&nbsp;alarms&nbsp;should&nbsp;be&nbsp;greater&nbsp;than&nbsp;one&nbsp;second,&nbsp;preferrably&nbsp;<BR>
two,&nbsp;as&nbsp;well&nbsp;as&nbsp;delays&nbsp;to&nbsp;single&nbsp;alarms.&nbsp;&nbsp;<BR>
&nbsp;<BR>
The&nbsp;alarm&nbsp;functions&nbsp;will&nbsp;be&nbsp;demonstrated&nbsp;more&nbsp;extensively&nbsp;in&nbsp;chapter&nbsp;three.&nbsp;&nbsp;<BR>
&nbsp;<BR>
The&nbsp;inventory&nbsp;and&nbsp;the&nbsp;environment&nbsp;<BR>
&nbsp;<BR>
[move_object,&nbsp;move,&nbsp;enter_inv,&nbsp;enter_env,&nbsp;leave_inv,&nbsp;leave_env,&nbsp;environment,&nbsp;all_inventory,&nbsp;deep_inventory,&nbsp;id,&nbsp;present]&nbsp;&nbsp;<BR>
&nbsp;<BR>
As&nbsp;described&nbsp;earlier,&nbsp;an&nbsp;object&nbsp;defines&nbsp;an&nbsp;inside&nbsp;as&nbsp;well&nbsp;as&nbsp;an&nbsp;outside.&nbsp;The&nbsp;outside,&nbsp;or&nbsp;environment&nbsp;can&nbsp;only&nbsp;be&nbsp;one&nbsp;object,&nbsp;while&nbsp;the&nbsp;inside,&nbsp;<BR>
or&nbsp;inventory,&nbsp;can&nbsp;contain&nbsp;many&nbsp;objects.&nbsp;&nbsp;<BR>
&nbsp;<BR>
A&nbsp;newly&nbsp;cloned&nbsp;object&nbsp;ends&nbsp;up&nbsp;in&nbsp;a&nbsp;sort&nbsp;of&nbsp;limbo,&nbsp;without&nbsp;an&nbsp;environment.&nbsp;In&nbsp;order&nbsp;for&nbsp;an&nbsp;object&nbsp;to&nbsp;actually&nbsp;enter&nbsp;the&nbsp;simulated&nbsp;physical&nbsp;world&nbsp;<BR>
of&nbsp;the&nbsp;game&nbsp;it&nbsp;has&nbsp;to&nbsp;be&nbsp;moved&nbsp;there.&nbsp;However,&nbsp;not&nbsp;all&nbsp;objects&nbsp;can&nbsp;be&nbsp;moved&nbsp;around.&nbsp;In&nbsp;order&nbsp;for&nbsp;the&nbsp;game&nbsp;to&nbsp;work&nbsp;ANY&nbsp;object&nbsp;that&nbsp;wants&nbsp;to&nbsp;<BR>
be&nbsp;inserted&nbsp;somewhere&nbsp;or&nbsp;have&nbsp;objects&nbsp;inserted&nbsp;into&nbsp;it&nbsp;MUST&nbsp;inherit&nbsp;`/std/object.c'&nbsp;somewhere&nbsp;along&nbsp;the&nbsp;way&nbsp;in&nbsp;the&nbsp;inheritance&nbsp;chain.&nbsp;<BR>
Why&nbsp;this&nbsp;limitation?&nbsp;Well,&nbsp;the&nbsp;reason&nbsp;is&nbsp;that&nbsp;the&nbsp;standard&nbsp;object&nbsp;defines&nbsp;a&nbsp;number&nbsp;of&nbsp;handy&nbsp;functions&nbsp;we&nbsp;rely&nbsp;on&nbsp;all&nbsp;objects&nbsp;in&nbsp;the&nbsp;game&nbsp;to&nbsp;<BR>
define.&nbsp;&nbsp;<BR>
&nbsp;<BR>
The&nbsp;most&nbsp;important&nbsp;of&nbsp;these&nbsp;lfuns&nbsp;are:&nbsp;&nbsp;<BR>
&nbsp;<BR>
`move()'&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Move&nbsp;an&nbsp;object&nbsp;to&nbsp;another&nbsp;object&nbsp;and&nbsp;handle&nbsp;weight/volume&nbsp;accounting.&nbsp;Returns&nbsp;success&nbsp;code.&nbsp;This&nbsp;function&nbsp;is&nbsp;responsible&nbsp;for&nbsp;calling&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;following:&nbsp;&nbsp;<BR>
`enter_inv()'&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This&nbsp;function&nbsp;is&nbsp;called&nbsp;in&nbsp;an&nbsp;object&nbsp;when&nbsp;another&nbsp;object&nbsp;moves&nbsp;inside&nbsp;it.&nbsp;&nbsp;<BR>
`leave_inv()'&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This&nbsp;function&nbsp;is&nbsp;called&nbsp;in&nbsp;an&nbsp;object&nbsp;when&nbsp;another&nbsp;object&nbsp;moves&nbsp;out&nbsp;from&nbsp;it.&nbsp;&nbsp;<BR>
`enter_env()'&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This&nbsp;function&nbsp;is&nbsp;called&nbsp;in&nbsp;an&nbsp;object&nbsp;upon&nbsp;entering&nbsp;the&nbsp;environment&nbsp;of&nbsp;another&nbsp;object.&nbsp;&nbsp;<BR>
`leave_env()'&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This&nbsp;function&nbsp;is&nbsp;called&nbsp;in&nbsp;an&nbsp;object&nbsp;upon&nbsp;leaving&nbsp;the&nbsp;environment&nbsp;of&nbsp;another&nbsp;object.&nbsp;&nbsp;<BR>
&nbsp;<BR>
NB!&nbsp;The&nbsp;above&nbsp;ONLY&nbsp;works&nbsp;if&nbsp;you&nbsp;use&nbsp;the&nbsp;lfun&nbsp;move()&nbsp;in&nbsp;the&nbsp;object&nbsp;to&nbsp;move&nbsp;them&nbsp;around.&nbsp;That's&nbsp;why&nbsp;it's&nbsp;so&nbsp;important&nbsp;that&nbsp;you&nbsp;do&nbsp;it&nbsp;this&nbsp;<BR>
way&nbsp;and&nbsp;not&nbsp;by&nbsp;the&nbsp;efun&nbsp;that&nbsp;actually&nbsp;performs&nbsp;the&nbsp;move.&nbsp;&nbsp;<BR>
&nbsp;<BR>
The&nbsp;efun&nbsp;used&nbsp;in&nbsp;the&nbsp;move()&nbsp;lfun&nbsp;is&nbsp;move_object().&nbsp;BUT,&nbsp;remember&nbsp;when&nbsp;doing&nbsp;that&nbsp;none&nbsp;of&nbsp;the&nbsp;object&nbsp;internals&nbsp;like&nbsp;light,&nbsp;weight&nbsp;or&nbsp;<BR>
volume&nbsp;is&nbsp;updated.&nbsp;As&nbsp;previously&nbsp;stated&nbsp;the&nbsp;efun&nbsp;fails&nbsp;if&nbsp;the&nbsp;object&nbsp;you&nbsp;want&nbsp;to&nbsp;move,&nbsp;or&nbsp;move&nbsp;to,&nbsp;doesn't&nbsp;inherit&nbsp;`/std/object.c'.&nbsp;<BR>
Furthermore&nbsp;the&nbsp;efun&nbsp;can&nbsp;only&nbsp;be&nbsp;used&nbsp;from&nbsp;within&nbsp;the&nbsp;object&nbsp;that&nbsp;wants&nbsp;to&nbsp;move,&nbsp;it&nbsp;can't&nbsp;be&nbsp;used&nbsp;to&nbsp;move&nbsp;another&nbsp;object.&nbsp;The&nbsp;same&nbsp;goes&nbsp;for&nbsp;<BR>
the&nbsp;move()&nbsp;lfun,&nbsp;naturally.&nbsp;&nbsp;<BR>
&nbsp;<BR>
In&nbsp;order&nbsp;to&nbsp;get&nbsp;the&nbsp;enclosing&nbsp;object&nbsp;reference&nbsp;you&nbsp;use&nbsp;the&nbsp;efun&nbsp;environment().&nbsp;As&nbsp;I&nbsp;have&nbsp;said&nbsp;before&nbsp;all&nbsp;objects&nbsp;have&nbsp;no&nbsp;environment&nbsp;on&nbsp;<BR>
creation,&nbsp;it's&nbsp;only&nbsp;after&nbsp;they&nbsp;have&nbsp;been&nbsp;moved&nbsp;somewhere&nbsp;that&nbsp;it&nbsp;gets&nbsp;a&nbsp;proper&nbsp;environment.&nbsp;Once&nbsp;an&nbsp;object&nbsp;has&nbsp;been&nbsp;moved&nbsp;into&nbsp;another&nbsp;<BR>
object&nbsp;it&nbsp;can't&nbsp;be&nbsp;moved&nbsp;out&nbsp;into&nbsp;limbo&nbsp;again,&nbsp;i.e.&nbsp;you&nbsp;can't&nbsp;move&nbsp;it&nbsp;to&nbsp;'0'.&nbsp;The&nbsp;objects&nbsp;in&nbsp;the&nbsp;game&nbsp;you&nbsp;can&nbsp;expect&nbsp;not&nbsp;to&nbsp;have&nbsp;an&nbsp;environment&nbsp;<BR>
are&nbsp;either&nbsp;rooms,&nbsp;souls,&nbsp;shadows&nbsp;or&nbsp;daemon&nbsp;objects&nbsp;of&nbsp;one&nbsp;kind&nbsp;or&nbsp;another.&nbsp;&nbsp;<BR>
&nbsp;<BR>
You&nbsp;have&nbsp;two&nbsp;efuns&nbsp;to&nbsp;chose&nbsp;between&nbsp;when&nbsp;it&nbsp;comes&nbsp;to&nbsp;finding&nbsp;what's&nbsp;in&nbsp;the&nbsp;inventory&nbsp;of&nbsp;an&nbsp;object.&nbsp;The&nbsp;efun&nbsp;all_inventory()&nbsp;returns&nbsp;an&nbsp;<BR>
array&nbsp;with&nbsp;all&nbsp;the&nbsp;objects&nbsp;in&nbsp;the&nbsp;inventory&nbsp;of&nbsp;a&nbsp;specified&nbsp;object,&nbsp;while&nbsp;the&nbsp;efun&nbsp;deep_inventory()&nbsp;return&nbsp;an&nbsp;array&nbsp;with&nbsp;all&nbsp;objects&nbsp;<BR>
recursively&nbsp;found&nbsp;in&nbsp;the&nbsp;inventory,&nbsp;i.e.&nbsp;not&nbsp;only&nbsp;the&nbsp;objects&nbsp;you'll&nbsp;find&nbsp;immediately&nbsp;but&nbsp;also&nbsp;the&nbsp;objects&nbsp;in&nbsp;the&nbsp;objects&nbsp;in&nbsp;the&nbsp;inventory,&nbsp;and&nbsp;so&nbsp;<BR>
on.&nbsp;&nbsp;<BR>
&nbsp;<BR>
object&nbsp;*all_inventory(object&nbsp;ob)&nbsp;<BR>
object&nbsp;*deep_inventory(object&nbsp;ob)&nbsp;<BR>
e.g.&nbsp;<BR>
/*&nbsp;<BR>
&nbsp;*&nbsp;This&nbsp;function&nbsp;dumps&nbsp;the&nbsp;inventory&nbsp;of&nbsp;Fatty&nbsp;on&nbsp;the&nbsp;screen,&nbsp;<BR>
&nbsp;*&nbsp;either&nbsp;just&nbsp;what's&nbsp;immediately&nbsp;visible&nbsp;or&nbsp;all&nbsp;depending&nbsp;<BR>
&nbsp;*&nbsp;on&nbsp;a&nbsp;given&nbsp;flag.&nbsp;<BR>
&nbsp;*/&nbsp;<BR>
void&nbsp;<BR>
fatty_say_aaah(int&nbsp;all)&nbsp;<BR>
{&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;object&nbsp;fatty_ob,&nbsp;*oblist;&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!objectp((fatty_ob&nbsp;=&nbsp;find_player(&quot;fatty&quot;))))&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;write(&quot;Sorry,&nbsp;Fatty&nbsp;isn't&nbsp;in&nbsp;the&nbsp;game&nbsp;today.\n&quot;);&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;0;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;oblist&nbsp;=&nbsp;all&nbsp;?&nbsp;deep_inventory(fatty_ob)&nbsp;:&nbsp;all_inventory(fatty_ob);&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;write(&quot;The&nbsp;&quot;&nbsp;+&nbsp;(all&nbsp;?&nbsp;&quot;entire&nbsp;&quot;&nbsp;:&nbsp;&quot;&quot;)&nbsp;+&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;&nbsp;content&nbsp;of&nbsp;Fatty's&nbsp;bloated&nbsp;tummy:\n&quot;);&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;dump_array(oblist);&nbsp;<BR>
}&nbsp;<BR>
&nbsp;<BR>
So...&nbsp;how&nbsp;do&nbsp;you&nbsp;go&nbsp;about&nbsp;to&nbsp;determine&nbsp;if&nbsp;a&nbsp;specific&nbsp;object&nbsp;actually&nbsp;is&nbsp;present&nbsp;in&nbsp;the&nbsp;inventory&nbsp;of&nbsp;another&nbsp;object?&nbsp;Well,&nbsp;the&nbsp;base&nbsp;object&nbsp;<BR>
/std/object.c&nbsp;define&nbsp;both&nbsp;names&nbsp;and&nbsp;descriptions&nbsp;in&nbsp;objects,&nbsp;as&nbsp;described&nbsp;before.&nbsp;It&nbsp;also&nbsp;defines&nbsp;a&nbsp;special&nbsp;function&nbsp;called&nbsp;id()&nbsp;that,&nbsp;given&nbsp;<BR>
a&nbsp;name,&nbsp;checks&nbsp;all&nbsp;given&nbsp;names&nbsp;to&nbsp;an&nbsp;object&nbsp;for&nbsp;a&nbsp;match&nbsp;and&nbsp;returns&nbsp;1&nbsp;if&nbsp;the&nbsp;object&nbsp;has&nbsp;that&nbsp;name.&nbsp;The&nbsp;efun&nbsp;present()&nbsp;takes&nbsp;a&nbsp;name&nbsp;or&nbsp;<BR>
object&nbsp;reference&nbsp;and&nbsp;searches&nbsp;one&nbsp;or&nbsp;more&nbsp;object's&nbsp;inventories&nbsp;for&nbsp;the&nbsp;presence&nbsp;of&nbsp;the&nbsp;named&nbsp;or&nbsp;specified&nbsp;object.&nbsp;If&nbsp;you&nbsp;specify&nbsp;the&nbsp;object&nbsp;to&nbsp;<BR>
search&nbsp;for&nbsp;as&nbsp;a&nbsp;name&nbsp;string&nbsp;it&nbsp;will&nbsp;use&nbsp;the&nbsp;previously&nbsp;mentioned&nbsp;id()&nbsp;function&nbsp;to&nbsp;determine&nbsp;if&nbsp;the&nbsp;object&nbsp;is&nbsp;the&nbsp;right&nbsp;one&nbsp;or&nbsp;not&nbsp;for&nbsp;all&nbsp;objects&nbsp;<BR>
it&nbsp;examines.&nbsp;The&nbsp;execution&nbsp;of&nbsp;the&nbsp;function&nbsp;is&nbsp;aborted&nbsp;as&nbsp;soon&nbsp;as&nbsp;it&nbsp;finds&nbsp;one&nbsp;that&nbsp;fits&nbsp;the&nbsp;description.&nbsp;That&nbsp;means&nbsp;that&nbsp;if&nbsp;there&nbsp;are&nbsp;several&nbsp;<BR>
objects&nbsp;fitting&nbsp;the&nbsp;search&nbsp;pattern&nbsp;you&nbsp;will&nbsp;only&nbsp;get&nbsp;one&nbsp;of&nbsp;them.&nbsp;&nbsp;<BR>
&nbsp;<BR>
object&nbsp;present(object&nbsp;ob|string&nbsp;obref,&nbsp;object&nbsp;*oblist|object&nbsp;ob|void)&nbsp;<BR>
e.g.&nbsp;<BR>
/*&nbsp;<BR>
&nbsp;*&nbsp;Look&nbsp;for&nbsp;donuts&nbsp;in&nbsp;Fatty&nbsp;<BR>
&nbsp;*/&nbsp;<BR>
void&nbsp;<BR>
find_donut()&nbsp;<BR>
{&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;object&nbsp;fatty_ob;&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;fatty_ob&nbsp;=&nbsp;find_player(&quot;fatty&quot;);&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Can't&nbsp;find&nbsp;Fatty!&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!objectp(fatty_ob))&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;write(&quot;Fatty&nbsp;isn't&nbsp;in&nbsp;at&nbsp;the&nbsp;moment,&nbsp;please&nbsp;try&nbsp;later.\n&quot;);&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(present(&quot;donut&quot;,&nbsp;fatty_ob))&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;write(&quot;Yes,&nbsp;Fatty&nbsp;looks&nbsp;happy&nbsp;with&nbsp;life&nbsp;at&nbsp;present&quot;);&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;write(&quot;If&nbsp;I&nbsp;were&nbsp;you,&nbsp;I'd&nbsp;keep&nbsp;out&nbsp;of&nbsp;Fatty's&nbsp;&quot;&nbsp;+&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;reach&nbsp;until&nbsp;he's&nbsp;fed.\n&quot;);&nbsp;<BR>
}&nbsp;<BR>
&nbsp;<BR>
If&nbsp;you&nbsp;don't&nbsp;give&nbsp;any&nbsp;second&nbsp;argument&nbsp;to&nbsp;present,&nbsp;it&nbsp;will&nbsp;look&nbsp;for&nbsp;the&nbsp;specified&nbsp;object&nbsp;in&nbsp;the&nbsp;inventory&nbsp;of&nbsp;this_object(),&nbsp;i.e.&nbsp;the&nbsp;object&nbsp;<BR>
itself.&nbsp;If&nbsp;the&nbsp;second&nbsp;argument&nbsp;is&nbsp;given&nbsp;as&nbsp;an&nbsp;array,&nbsp;the&nbsp;function&nbsp;will&nbsp;look&nbsp;for&nbsp;the&nbsp;specified&nbsp;object&nbsp;in&nbsp;all&nbsp;of&nbsp;the&nbsp;objects&nbsp;in&nbsp;the&nbsp;array.&nbsp;If&nbsp;no&nbsp;fitting&nbsp;<BR>
object&nbsp;is&nbsp;found,&nbsp;0&nbsp;is&nbsp;returned.&nbsp;&nbsp;<BR>
&nbsp;<BR>
String&nbsp;functions&nbsp;<BR>
&nbsp;<BR>
[break_string,&nbsp;capitalize,&nbsp;lower_case,&nbsp;sprintf,&nbsp;strlen,&nbsp;wildmatch]&nbsp;&nbsp;<BR>
&nbsp;<BR>
In&nbsp;a&nbsp;gaming&nbsp;environment&nbsp;based&nbsp;on&nbsp;text,&nbsp;it's&nbsp;natural&nbsp;to&nbsp;expect&nbsp;that&nbsp;we've&nbsp;gone&nbsp;into&nbsp;a&nbsp;bit&nbsp;of&nbsp;trouble&nbsp;in&nbsp;making&nbsp;string&nbsp;handling&nbsp;functions&nbsp;both&nbsp;<BR>
easy&nbsp;to&nbsp;use&nbsp;and&nbsp;versatile.&nbsp;As&nbsp;you&nbsp;already&nbsp;know,&nbsp;strings&nbsp;can&nbsp;be&nbsp;added&nbsp;together&nbsp;using&nbsp;the&nbsp;+&nbsp;operator,&nbsp;even&nbsp;mixing&nbsp;in&nbsp;integers&nbsp;without&nbsp;any&nbsp;<BR>
special&nbsp;considerations.&nbsp;Floats&nbsp;and&nbsp;object&nbsp;pointers&nbsp;have&nbsp;to&nbsp;be&nbsp;converted&nbsp;however,&nbsp;floats&nbsp;with&nbsp;the&nbsp;special&nbsp;ftoa()&nbsp;efun&nbsp;(described&nbsp;later)&nbsp;and&nbsp;<BR>
object&nbsp;pointers&nbsp;with&nbsp;the&nbsp;file_name()&nbsp;efun&nbsp;that&nbsp;I&nbsp;described&nbsp;earlier.&nbsp;&nbsp;<BR>
&nbsp;<BR>
One&nbsp;of&nbsp;the&nbsp;most&nbsp;interesting&nbsp;properties&nbsp;of&nbsp;strings,&nbsp;apart&nbsp;from&nbsp;what&nbsp;they&nbsp;contain,&nbsp;is&nbsp;the&nbsp;length.&nbsp;You&nbsp;find&nbsp;that&nbsp;with&nbsp;the&nbsp;efun&nbsp;strlen().&nbsp;Since&nbsp;it&nbsp;<BR>
accepts&nbsp;ints&nbsp;as&nbsp;well&nbsp;(returning&nbsp;0&nbsp;for&nbsp;them)&nbsp;you&nbsp;can&nbsp;use&nbsp;it&nbsp;to&nbsp;test&nbsp;uninitialized&nbsp;string&nbsp;variables&nbsp;as&nbsp;well.&nbsp;&nbsp;<BR>
&nbsp;<BR>
int&nbsp;strlen(string&nbsp;str)&nbsp;<BR>
e.g.&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;string&nbsp;str&nbsp;=&nbsp;&quot;Fatty&nbsp;is&nbsp;a&nbsp;bloated&nbsp;blimp&quot;;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;write(&quot;The&nbsp;length&nbsp;of&nbsp;the&nbsp;string&nbsp;'&quot;&nbsp;+&nbsp;str&nbsp;+&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;'&nbsp;is&nbsp;&quot;&nbsp;+&nbsp;strlen(str)&nbsp;+&nbsp;&quot;&nbsp;characters.\n&quot;);&nbsp;<BR>
&nbsp;<BR>
Often&nbsp;you&nbsp;will&nbsp;want&nbsp;to&nbsp;capitalize&nbsp;names&nbsp;and&nbsp;sentences&nbsp;for&nbsp;output&nbsp;to&nbsp;the&nbsp;screen.&nbsp;You&nbsp;do&nbsp;that&nbsp;with&nbsp;the&nbsp;efun&nbsp;capitalize(),&nbsp;it&nbsp;will&nbsp;only&nbsp;turn&nbsp;the&nbsp;<BR>
first&nbsp;character&nbsp;in&nbsp;the&nbsp;string&nbsp;to&nbsp;upper&nbsp;case.&nbsp;The&nbsp;converse&nbsp;of&nbsp;this&nbsp;function&nbsp;is&nbsp;the&nbsp;efun&nbsp;lower_case(),&nbsp;however,&nbsp;it&nbsp;turns&nbsp;the&nbsp;entire&nbsp;string&nbsp;into&nbsp;<BR>
lowercase&nbsp;and&nbsp;not&nbsp;only&nbsp;the&nbsp;first&nbsp;character.&nbsp;&nbsp;<BR>
&nbsp;<BR>
string&nbsp;capitalize(string&nbsp;str)&nbsp;<BR>
string&nbsp;lower_case(string&nbsp;str)&nbsp;<BR>
e.g.&nbsp;<BR>
void&nbsp;<BR>
//&nbsp;Present&nbsp;a&nbsp;given&nbsp;name&nbsp;on&nbsp;the&nbsp;output,&nbsp;formatted&nbsp;properly&nbsp;<BR>
present_nice_name(string&nbsp;name)&nbsp;<BR>
{&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;string&nbsp;new_name;&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Assume&nbsp;name&nbsp;=&nbsp;&quot;fAttY&quot;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;new_name&nbsp;=&nbsp;lower_case(name);&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Name&nbsp;is&nbsp;now&nbsp;=&nbsp;&quot;fatty&quot;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;new_name&nbsp;=&nbsp;captialize(name);&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;write(&quot;The&nbsp;name&nbsp;is:&nbsp;&quot;&nbsp;+&nbsp;name&nbsp;+&nbsp;&quot;\n&quot;);&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;The&nbsp;result&nbsp;is:&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The&nbsp;name&nbsp;is:&nbsp;Fatty&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/&nbsp;<BR>
}&nbsp;<BR>
&nbsp;<BR>
Sometimes&nbsp;it's&nbsp;desirable&nbsp;to&nbsp;break&nbsp;up&nbsp;a&nbsp;string&nbsp;in&nbsp;smaller&nbsp;pieces,&nbsp;just&nbsp;to&nbsp;present&nbsp;a&nbsp;nicer&nbsp;output.&nbsp;The&nbsp;efun&nbsp;break_string()&nbsp;will&nbsp;do&nbsp;that&nbsp;for&nbsp;you.&nbsp;<BR>
It&nbsp;can&nbsp;even&nbsp;pad&nbsp;spaces&nbsp;in&nbsp;front&nbsp;of&nbsp;the&nbsp;broken&nbsp;strings&nbsp;if&nbsp;you&nbsp;want&nbsp;that.&nbsp;What&nbsp;it&nbsp;does&nbsp;is&nbsp;simply&nbsp;to&nbsp;insert&nbsp;newlines&nbsp;after&nbsp;whole&nbsp;words&nbsp;where&nbsp;you&nbsp;<BR>
have&nbsp;indicated&nbsp;you&nbsp;want&nbsp;to&nbsp;break&nbsp;it&nbsp;up.&nbsp;The&nbsp;third&nbsp;argument&nbsp;specifying&nbsp;either&nbsp;space&nbsp;pad&nbsp;length&nbsp;or&nbsp;a&nbsp;string&nbsp;to&nbsp;pad&nbsp;with,&nbsp;is&nbsp;optional.&nbsp;&nbsp;<BR>
&nbsp;<BR>
string&nbsp;break_string(string&nbsp;str,&nbsp;int&nbsp;brlen,&nbsp;int&nbsp;indlen|string&nbsp;indstr|void)&nbsp;<BR>
e.g.&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;string&nbsp;str&nbsp;=&nbsp;&quot;This&nbsp;is&nbsp;the&nbsp;string&nbsp;I&nbsp;want&nbsp;to&nbsp;present&nbsp;in&nbsp;different&nbsp;ways.&quot;;&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;write(break_string(str,&nbsp;20)&nbsp;+&nbsp;&quot;\n&quot;);&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;write(break_string(str,&nbsp;20,&nbsp;5)&nbsp;+&nbsp;&quot;\n&quot;);&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;write(break_string(str,&nbsp;20,&nbsp;&quot;Fatty&nbsp;says:&nbsp;&quot;)&nbsp;+&nbsp;&quot;\n&quot;);&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;The&nbsp;result&nbsp;is:&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This&nbsp;is&nbsp;the&nbsp;string&nbsp;I&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;want&nbsp;to&nbsp;present&nbsp;in&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;different&nbsp;ways.&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This&nbsp;is&nbsp;the&nbsp;string&nbsp;I&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;want&nbsp;to&nbsp;present&nbsp;in&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;different&nbsp;ways.&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Fatty&nbsp;says:&nbsp;This&nbsp;is&nbsp;the&nbsp;string&nbsp;I&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Fatty&nbsp;says:&nbsp;want&nbsp;to&nbsp;present&nbsp;in&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Fatty&nbsp;says:&nbsp;different&nbsp;ways.&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/&nbsp;<BR>
&nbsp;<BR>
You&nbsp;will&nbsp;very&nbsp;often&nbsp;want&nbsp;to&nbsp;present&nbsp;information&nbsp;stored&nbsp;in&nbsp;variables.&nbsp;As&nbsp;shown&nbsp;you&nbsp;can&nbsp;do&nbsp;that&nbsp;by&nbsp;converting&nbsp;the&nbsp;contents&nbsp;to&nbsp;strings&nbsp;and&nbsp;then&nbsp;<BR>
&nbsp;just&nbsp;print&nbsp;the&nbsp;strings.&nbsp;Integers&nbsp;don't&nbsp;even&nbsp;have&nbsp;to&nbsp;be&nbsp;converted,&nbsp;you&nbsp;just&nbsp;add&nbsp;them&nbsp;on&nbsp;with&nbsp;the&nbsp;+-operator.&nbsp;However,&nbsp;what&nbsp;you&nbsp;get&nbsp;then&nbsp;is&nbsp;<BR>
something&nbsp;that's&nbsp;not&nbsp;very&nbsp;well&nbsp;formatted,&nbsp;you'll&nbsp;have&nbsp;to&nbsp;do&nbsp;that&nbsp;yourself.&nbsp;Particulary&nbsp;if&nbsp;you&nbsp;try&nbsp;to&nbsp;produce&nbsp;tables&nbsp;this&nbsp;is&nbsp;a&nbsp;nuisance,&nbsp;having&nbsp;to&nbsp;<BR>
determine&nbsp;the&nbsp;length&nbsp;of&nbsp;strings&nbsp;and&nbsp;add&nbsp;on&nbsp;a&nbsp;certain&nbsp;amount&nbsp;of&nbsp;spaces&nbsp;depending&nbsp;on&nbsp;this&nbsp;length&nbsp;and&nbsp;so&nbsp;on.&nbsp;Instead&nbsp;of&nbsp;doing&nbsp;this&nbsp;you&nbsp;can&nbsp;use&nbsp;<BR>
the&nbsp;efun&nbsp;sprintf().&nbsp;&nbsp;<BR>
&nbsp;<BR>
What&nbsp;sprintf()&nbsp;does&nbsp;is&nbsp;simply&nbsp;to&nbsp;take&nbsp;a&nbsp;format-string&nbsp;that&nbsp;describes&nbsp;how&nbsp;you&nbsp;want&nbsp;the&nbsp;resulting&nbsp;string&nbsp;to&nbsp;look&nbsp;and&nbsp;put&nbsp;in&nbsp;the&nbsp;contents&nbsp;of&nbsp;<BR>
the&nbsp;given&nbsp;variables&nbsp;according&nbsp;to&nbsp;your&nbsp;specifications.&nbsp;The&nbsp;result&nbsp;is&nbsp;a&nbsp;string&nbsp;that&nbsp;you&nbsp;then&nbsp;can&nbsp;present&nbsp;on&nbsp;the&nbsp;screen&nbsp;with&nbsp;write()&nbsp;for&nbsp;example.&nbsp;&nbsp;<BR>
&nbsp;<BR>
All&nbsp;characters&nbsp;in&nbsp;the&nbsp;format&nbsp;string&nbsp;will&nbsp;be&nbsp;copied&nbsp;to&nbsp;the&nbsp;resulting&nbsp;string&nbsp;with&nbsp;exceptions&nbsp;of&nbsp;the&nbsp;special&nbsp;pattern&nbsp;%&lt;width&nbsp;spec&gt;&lt;type&nbsp;spec&gt;.&nbsp;The&nbsp;<BR>
width&nbsp;specifier&nbsp;can&nbsp;contain&nbsp;a&nbsp;field&nbsp;width&nbsp;parameter,&nbsp;simply&nbsp;an&nbsp;integer&nbsp;that&nbsp;specifies&nbsp;the&nbsp;width&nbsp;of&nbsp;the&nbsp;box&nbsp;you&nbsp;want&nbsp;to&nbsp;put&nbsp;it&nbsp;in&nbsp;and&nbsp;if&nbsp;you&nbsp;want&nbsp;<BR>
it&nbsp;left-&nbsp;or&nbsp;right-aligned.&nbsp;A&nbsp;positive&nbsp;number&nbsp;denotes&nbsp;right-alined&nbsp;insertion&nbsp;and&nbsp;negative&nbsp;number&nbsp;left-aligned.&nbsp;If&nbsp;you&nbsp;omit&nbsp;the&nbsp;width&nbsp;specifier&nbsp;<BR>
the&nbsp;variable&nbsp;will&nbsp;be&nbsp;inserted&nbsp;in&nbsp;a&nbsp;box&nbsp;exactly&nbsp;the&nbsp;width&nbsp;of&nbsp;its&nbsp;contents.&nbsp;The&nbsp;type&nbsp;specifier&nbsp;is&nbsp;one&nbsp;or&nbsp;more&nbsp;characters&nbsp;defining&nbsp;what&nbsp;kind&nbsp;of&nbsp;<BR>
variable&nbsp;you&nbsp;want&nbsp;to&nbsp;have&nbsp;inserted.&nbsp;&nbsp;<BR>
&nbsp;<BR>
`d'&nbsp;&nbsp;<BR>
`i'&nbsp;The&nbsp;integer&nbsp;argument&nbsp;is&nbsp;printed&nbsp;in&nbsp;decimal.&nbsp;&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;string&nbsp;str;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;a;&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;=&nbsp;7;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str&nbsp;=&nbsp;sprintf(&quot;test:&nbsp;&gt;%-3d%i&lt;&quot;,&nbsp;1,&nbsp;a);&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;write(str&nbsp;+&nbsp;&quot;\n&quot;);&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;The&nbsp;result&nbsp;is:&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;test:&nbsp;&gt;1&nbsp;&nbsp;7&lt;&nbsp;<BR>
&nbsp;<BR>
`s'&nbsp;The&nbsp;argument&nbsp;is&nbsp;a&nbsp;string.&nbsp;&nbsp;<BR>
`c'&nbsp;The&nbsp;integer&nbsp;arg&nbsp;is&nbsp;to&nbsp;be&nbsp;printed&nbsp;as&nbsp;a&nbsp;character.&nbsp;&nbsp;<BR>
`o'&nbsp;The&nbsp;integer&nbsp;arg&nbsp;is&nbsp;printed&nbsp;in&nbsp;octal.&nbsp;&nbsp;<BR>
`x'&nbsp;The&nbsp;integer&nbsp;arg&nbsp;is&nbsp;printed&nbsp;in&nbsp;hex.&nbsp;&nbsp;<BR>
`X'&nbsp;The&nbsp;integer&nbsp;arg&nbsp;is&nbsp;printed&nbsp;in&nbsp;hex&nbsp;(in&nbsp;capitals).&nbsp;&nbsp;<BR>
`O'&nbsp;The&nbsp;argument&nbsp;is&nbsp;an&nbsp;LPC&nbsp;datatype.&nbsp;This&nbsp;is&nbsp;an&nbsp;excellent&nbsp;function&nbsp;for&nbsp;debug&nbsp;purposes&nbsp;since&nbsp;you&nbsp;can&nbsp;print&nbsp;ANY&nbsp;kind&nbsp;of&nbsp;variable&nbsp;using&nbsp;this&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;specifier.&nbsp;e.g.&nbsp;&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;write(sprintf(&quot;1:%d&nbsp;2:%s&nbsp;3:%c&nbsp;4:%o\n5:%x&nbsp;6:%X&nbsp;7:%O\n&quot;,&nbsp;5,&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;hupp&nbsp;happ&quot;,&nbsp;85,&nbsp;584,&nbsp;32434,&nbsp;85852,&nbsp;strlen));&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;The&nbsp;result&nbsp;is:&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;1:5&nbsp;2:hupp&nbsp;happ&nbsp;3:U&nbsp;4:1110&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;5:7eb2&nbsp;6:14F5C&nbsp;7:&lt;&lt;FUNCTION&nbsp;&amp;strlen()&gt;&gt;&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This&nbsp;specifier&nbsp;is&nbsp;also&nbsp;the&nbsp;only&nbsp;one&nbsp;you&nbsp;can&nbsp;use&nbsp;for&nbsp;denoting&nbsp;floats&nbsp;right&nbsp;now.&nbsp;&nbsp;<BR>
&nbsp;<BR>
Now,&nbsp;these&nbsp;were&nbsp;all&nbsp;the&nbsp;available&nbsp;type&nbsp;specifiers&nbsp;with&nbsp;a&nbsp;few&nbsp;width&nbsp;specifiers&nbsp;given&nbsp;as&nbsp;examples.&nbsp;However,&nbsp;there's&nbsp;a&nbsp;lot&nbsp;more&nbsp;of&nbsp;them.&nbsp;&nbsp;<BR>
&nbsp;<BR>
`'&nbsp;''&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The&nbsp;integer&nbsp;argument&nbsp;is&nbsp;padded&nbsp;with&nbsp;a&nbsp;space&nbsp;if&nbsp;it&nbsp;is&nbsp;positive.&nbsp;This&nbsp;way&nbsp;you&nbsp;can&nbsp;write&nbsp;neat&nbsp;tables&nbsp;with&nbsp;both&nbsp;positive&nbsp;and&nbsp;negative&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;numbers&nbsp;without&nbsp;having&nbsp;to&nbsp;take&nbsp;special&nbsp;measure&nbsp;to&nbsp;handle&nbsp;the&nbsp;minus-sign.&nbsp;&nbsp;<BR>
`+'&nbsp;Positive&nbsp;integer&nbsp;arguments&nbsp;are&nbsp;padded&nbsp;with&nbsp;a&nbsp;plus&nbsp;sign.&nbsp;&nbsp;<BR>
`'X''&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The&nbsp;character(s)&nbsp;within&nbsp;the&nbsp;quotes&nbsp;is&nbsp;used&nbsp;to&nbsp;pad&nbsp;the&nbsp;argument&nbsp;to&nbsp;the&nbsp;field&nbsp;size.&nbsp;&nbsp;<BR>
`|'&nbsp;The&nbsp;argument&nbsp;will&nbsp;here&nbsp;be&nbsp;centered&nbsp;within&nbsp;the&nbsp;field&nbsp;size.&nbsp;&nbsp;<BR>
`#'&nbsp;This&nbsp;is&nbsp;table&nbsp;mode.&nbsp;The&nbsp;result&nbsp;will&nbsp;be&nbsp;a&nbsp;list&nbsp;of&nbsp;\n-separated&nbsp;words&nbsp;in&nbsp;a&nbsp;table&nbsp;within&nbsp;the&nbsp;field&nbsp;size.&nbsp;This&nbsp;naturally&nbsp;only&nbsp;is&nbsp;meaningful&nbsp;with&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strings.&nbsp;&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;write((sprintf(&quot;&gt;%19|s&lt;\n&quot;,&nbsp;&quot;Fatty&nbsp;the&nbsp;blimp&quot;)));&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;The&nbsp;result&nbsp;is:&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&gt;&nbsp;&nbsp;Fatty&nbsp;the&nbsp;blimp&nbsp;&nbsp;&lt;&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
`='&nbsp;This&nbsp;specifier&nbsp;is&nbsp;only&nbsp;valid&nbsp;for&nbsp;strings.&nbsp;It&nbsp;outputs&nbsp;the&nbsp;result&nbsp;in&nbsp;columns&nbsp;if&nbsp;the&nbsp;arguments&nbsp;are&nbsp;wider&nbsp;than&nbsp;their&nbsp;field&nbsp;size.&nbsp;&nbsp;<BR>
`*'&nbsp;Specifies&nbsp;to&nbsp;sprintf&nbsp;to&nbsp;use&nbsp;the&nbsp;corresponding&nbsp;argument&nbsp;as&nbsp;field&nbsp;size.&nbsp;If&nbsp;you&nbsp;combine&nbsp;this&nbsp;with&nbsp;table&nbsp;mode&nbsp;you&nbsp;will&nbsp;get&nbsp;neat&nbsp;tables&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatted&nbsp;after&nbsp;the&nbsp;biggest&nbsp;argument.&nbsp;&nbsp;<BR>
`@'&nbsp;The&nbsp;argument&nbsp;is&nbsp;an&nbsp;array.&nbsp;You&nbsp;must&nbsp;naturally&nbsp;combine&nbsp;with&nbsp;with&nbsp;a&nbsp;type&nbsp;specifier&nbsp;denoting&nbsp;the&nbsp;specific&nbsp;type&nbsp;in&nbsp;the&nbsp;array.&nbsp;&nbsp;<BR>
&nbsp;<BR>
Very&nbsp;often&nbsp;you&nbsp;want&nbsp;to&nbsp;find&nbsp;out&nbsp;if&nbsp;a&nbsp;certain&nbsp;substring&nbsp;is&nbsp;part&nbsp;of&nbsp;a&nbsp;greater&nbsp;string.&nbsp;You're&nbsp;not&nbsp;interested&nbsp;in&nbsp;exactly&nbsp;where&nbsp;the&nbsp;string&nbsp;is,&nbsp;just&nbsp;that&nbsp;it&nbsp;<BR>
is&nbsp;there.&nbsp;For&nbsp;that&nbsp;purpose&nbsp;you&nbsp;want&nbsp;something&nbsp;that&nbsp;closly&nbsp;resembles&nbsp;the&nbsp;UNIX&nbsp;shell&nbsp;approach&nbsp;to&nbsp;string&nbsp;matching.&nbsp;The&nbsp;efun&nbsp;wildmatch()&nbsp;will&nbsp;<BR>
do&nbsp;this&nbsp;for&nbsp;you.&nbsp;It&nbsp;simply&nbsp;return&nbsp;1&nbsp;if&nbsp;a&nbsp;specified&nbsp;substring&nbsp;is&nbsp;part&nbsp;of&nbsp;a&nbsp;specified&nbsp;main&nbsp;string,&nbsp;and&nbsp;0&nbsp;otherwise.&nbsp;The&nbsp;substring&nbsp;can&nbsp;contain&nbsp;the&nbsp;<BR>
simple&nbsp;UNIX&nbsp;pattern&nbsp;matching&nbsp;symbols.&nbsp;&nbsp;<BR>
&nbsp;<BR>
@bullet{*}&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;matches&nbsp;any&nbsp;number&nbsp;of&nbsp;any&nbsp;characters&nbsp;&nbsp;<BR>
@bullet{?}&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Matches&nbsp;any&nbsp;single&nbsp;character&nbsp;&nbsp;<BR>
@bullet{[xyz]}&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Matches&nbsp;any&nbsp;characters&nbsp;in&nbsp;xyz&nbsp;&nbsp;<BR>
@bullet{[^xyz]}&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Matches&nbsp;any&nbsp;characters&nbsp;not&nbsp;in&nbsp;xyz&nbsp;&nbsp;<BR>
@bullet{\c}&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Matches&nbsp;c&nbsp;even&nbsp;if&nbsp;it&nbsp;is&nbsp;special&nbsp;&nbsp;<BR>
&nbsp;<BR>
int&nbsp;wildmatch(string&nbsp;pattern,&nbsp;string&nbsp;str);&nbsp;<BR>
e.g.&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Anything&nbsp;ending&nbsp;with&nbsp;.foo&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;wildmatch(&quot;*.foo&quot;,&nbsp;&quot;bar.foo&quot;)&nbsp;==&nbsp;1&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Anything&nbsp;starting&nbsp;with&nbsp;a,&nbsp;b&nbsp;or&nbsp;c,&nbsp;containing&nbsp;at&nbsp;least&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;one&nbsp;more&nbsp;character&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;wildmatch(&quot;[abc]?*&quot;,&nbsp;&quot;axy&quot;)&nbsp;==&nbsp;1&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;wildmatch(&quot;[abc]?*&quot;,&nbsp;&quot;dxy&quot;)&nbsp;==&nbsp;0&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;wildmatch(&quot;[abc]?*&quot;,&nbsp;&quot;a&quot;)&nbsp;==&nbsp;0&nbsp;<BR>
&nbsp;<BR>
--&nbsp;<BR>
※&nbsp;來源:•BBS&nbsp;水木清華站&nbsp;bbs.net.tsinghua.edu.cn•[FROM:&nbsp;klab.ishii.utsu]&nbsp;<BR>
<A HREF="00000015.htm">上一篇</A>
<A HREF='javascript:history.go(-1)'>返回上一頁</A>
<A HREF="index.htm">回到目錄</A>
<A HREF="#top">回到頁首</A>
<A HREF="00000017.htm">下一篇</A>
</H1></CENTER>
<CENTER><H1>BBS水木清華站︰精華區</H1></CENTER>
</BODY></HTML>