<HTML>
<HEAD>
<TITLE>BBS水木清華站︰精華區</TITLE>
</HEAD>
<BODY>
<CENTER><H1>BBS水木清華站︰精華區</H1></CENTER>
<A Name="top"></a>
發信人:&nbsp;jameson&nbsp;(阿其),&nbsp;信區:&nbsp;Mud_Builder&nbsp;<BR>
標&nbsp;&nbsp;題:&nbsp;LPC&nbsp;Manual&nbsp;-&nbsp;LPC&nbsp;basics&nbsp;(6)&nbsp;<BR>
發信站:&nbsp;BBS&nbsp;水木清華站&nbsp;(Fri&nbsp;May&nbsp;23&nbsp;18:11:32&nbsp;1997)&nbsp;<BR>
&nbsp;<BR>
The&nbsp;preprocessor&nbsp;<BR>
&nbsp;<BR>
The&nbsp;preprocessor&nbsp;is&nbsp;not&nbsp;a&nbsp;part&nbsp;of&nbsp;the&nbsp;LPC&nbsp;language&nbsp;proper.&nbsp;It's&nbsp;a&nbsp;special&nbsp;process&nbsp;that&nbsp;is&nbsp;run&nbsp;before&nbsp;the&nbsp;<BR>
actual&nbsp;compilation&nbsp;of&nbsp;the&nbsp;program&nbsp;occurs.&nbsp;Basically&nbsp;it&nbsp;can&nbsp;be&nbsp;seen&nbsp;as&nbsp;a&nbsp;very&nbsp;smart&nbsp;string&nbsp;substitutor;&nbsp;<BR>
Specified&nbsp;strings&nbsp;in&nbsp;the&nbsp;code&nbsp;is&nbsp;replaced&nbsp;by&nbsp;other&nbsp;strings.&nbsp;&nbsp;<BR>
&nbsp;<BR>
All&nbsp;preprocessor&nbsp;directives&nbsp;are&nbsp;given&nbsp;as&nbsp;strings&nbsp;starting&nbsp;with&nbsp;the&nbsp;character&nbsp;`#'&nbsp;on&nbsp;the&nbsp;first&nbsp;column&nbsp;of&nbsp;<BR>
the&nbsp;line.&nbsp;You&nbsp;can&nbsp;put&nbsp;them&nbsp;anywhere,&nbsp;but&nbsp;as&nbsp;you'll&nbsp;be&nbsp;told&nbsp;later&nbsp;most&nbsp;of&nbsp;them&nbsp;do&nbsp;belong&nbsp;in&nbsp;the&nbsp;<BR>
beginning&nbsp;of&nbsp;the&nbsp;code.&nbsp;&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#include:&nbsp;The&nbsp;#include&nbsp;statement&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#define:&nbsp;The&nbsp;#define&nbsp;and&nbsp;undef&nbsp;statement&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#if&nbsp;etc:&nbsp;The&nbsp;#if,&nbsp;#ifdef,&nbsp;#ifndef,&nbsp;#else&nbsp;and&nbsp;#elseif&nbsp;statements&nbsp;&nbsp;<BR>
&nbsp;<BR>
The&nbsp;#include&nbsp;statement&nbsp;<BR>
&nbsp;<BR>
This&nbsp;is&nbsp;by&nbsp;far&nbsp;the&nbsp;most&nbsp;used&nbsp;preprocessor&nbsp;command.&nbsp;It&nbsp;simply&nbsp;tells&nbsp;the&nbsp;preprocessor&nbsp;to&nbsp;replace&nbsp;that&nbsp;<BR>
line&nbsp;with&nbsp;the&nbsp;contents&nbsp;of&nbsp;an&nbsp;entire&nbsp;other&nbsp;file&nbsp;before&nbsp;going&nbsp;any&nbsp;further.&nbsp;&nbsp;<BR>
&nbsp;<BR>
Data&nbsp;you&nbsp;put&nbsp;in&nbsp;include-files&nbsp;is&nbsp;usually&nbsp;data&nbsp;that&nbsp;won't&nbsp;ever&nbsp;change&nbsp;and&nbsp;that&nbsp;you&nbsp;want&nbsp;to&nbsp;put&nbsp;into&nbsp;<BR>
several&nbsp;files.&nbsp;Instead&nbsp;of&nbsp;having&nbsp;to&nbsp;write&nbsp;those&nbsp;same&nbsp;lines&nbsp;over&nbsp;and&nbsp;over&nbsp;with&nbsp;the&nbsp;cumulative&nbsp;chance&nbsp;of&nbsp;<BR>
putting&nbsp;in&nbsp;copying&nbsp;errors&nbsp;as&nbsp;you&nbsp;go,&nbsp;you&nbsp;simply&nbsp;collect&nbsp;that&nbsp;data&nbsp;into&nbsp;one&nbsp;or&nbsp;more&nbsp;files&nbsp;and&nbsp;include&nbsp;them&nbsp;<BR>
into&nbsp;the&nbsp;program&nbsp;files&nbsp;as&nbsp;necessary.&nbsp;&nbsp;<BR>
&nbsp;<BR>
The&nbsp;syntax&nbsp;is&nbsp;very&nbsp;easy:&nbsp;&nbsp;<BR>
&nbsp;<BR>
#include&nbsp;&lt;standard_file&gt;&nbsp;<BR>
#include&nbsp;&quot;special_file&quot;&nbsp;<BR>
&nbsp;<BR>
NB!&nbsp;Note&nbsp;the&nbsp;absence&nbsp;of&nbsp;a&nbsp;;&nbsp;after&nbsp;the&nbsp;line!&nbsp;&nbsp;<BR>
&nbsp;<BR>
The&nbsp;two&nbsp;different&nbsp;ways&nbsp;you&nbsp;write&nbsp;this&nbsp;depend&nbsp;on&nbsp;where&nbsp;the&nbsp;file&nbsp;you&nbsp;want&nbsp;to&nbsp;include&nbsp;exists.&nbsp;There's&nbsp;a&nbsp;<BR>
number&nbsp;of&nbsp;standard&nbsp;include&nbsp;files&nbsp;in&nbsp;the&nbsp;game,&nbsp;spread&nbsp;around&nbsp;in&nbsp;a&nbsp;number&nbsp;of&nbsp;different&nbsp;directories.&nbsp;Rather&nbsp;<BR>
than&nbsp;having&nbsp;to&nbsp;remember&nbsp;exactly&nbsp;where&nbsp;they&nbsp;are,&nbsp;you&nbsp;can&nbsp;just&nbsp;give&nbsp;the&nbsp;name&nbsp;of&nbsp;the&nbsp;file&nbsp;you&nbsp;want&nbsp;to&nbsp;<BR>
include&nbsp;then.&nbsp;&nbsp;<BR>
&nbsp;<BR>
#include&nbsp;&lt;stdproperties.h&gt;&nbsp;<BR>
#include&nbsp;&lt;adverbs.h&gt;&nbsp;<BR>
&nbsp;<BR>
If&nbsp;you&nbsp;want&nbsp;to&nbsp;include&nbsp;files&nbsp;that&nbsp;aren't&nbsp;part&nbsp;of&nbsp;the&nbsp;standard&nbsp;setup,&nbsp;for&nbsp;example&nbsp;files&nbsp;of&nbsp;your&nbsp;own,&nbsp;you&nbsp;<BR>
have&nbsp;to&nbsp;specify&nbsp;where&nbsp;they&nbsp;are.&nbsp;You&nbsp;do&nbsp;that&nbsp;either&nbsp;relative&nbsp;to&nbsp;the&nbsp;position&nbsp;of&nbsp;the&nbsp;file&nbsp;that&nbsp;uses&nbsp;it&nbsp;or&nbsp;by&nbsp;<BR>
an&nbsp;absolute&nbsp;path.&nbsp;&nbsp;<BR>
&nbsp;<BR>
#include&nbsp;&quot;/d/Genesis/login/login.h&quot;&nbsp;<BR>
#include&nbsp;&quot;my_defs.h&quot;&nbsp;<BR>
#include&nbsp;&quot;/sys/adverbs.h&quot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Same&nbsp;as&nbsp;the&nbsp;shorter&nbsp;one&nbsp;above&nbsp;<BR>
&nbsp;<BR>
When&nbsp;you&nbsp;include&nbsp;standard&nbsp;files,&nbsp;always&nbsp;use&nbsp;the&nbsp;&lt;&gt;-path&nbsp;notation.&nbsp;The&nbsp;reason&nbsp;isn't&nbsp;only&nbsp;that&nbsp;it&nbsp;<BR>
becomes&nbsp;shorter&nbsp;and&nbsp;easier&nbsp;to&nbsp;distingues&nbsp;but&nbsp;also&nbsp;that&nbsp;if&nbsp;the&nbsp;files&nbsp;move&nbsp;around&nbsp;your&nbsp;program&nbsp;will&nbsp;stop&nbsp;<BR>
working.&nbsp;If&nbsp;you&nbsp;use&nbsp;the&nbsp;&lt;&gt;-notation&nbsp;they&nbsp;will&nbsp;always&nbsp;be&nbsp;found&nbsp;anyway.&nbsp;&nbsp;<BR>
&nbsp;<BR>
Include&nbsp;files&nbsp;can&nbsp;have&nbsp;any&nbsp;name,&nbsp;but&nbsp;as&nbsp;a&nbsp;rule&nbsp;they&nbsp;are&nbsp;given&nbsp;the&nbsp;'.h'&nbsp;suffix&nbsp;to&nbsp;clearly&nbsp;distinguish&nbsp;them&nbsp;<BR>
as&nbsp;include&nbsp;files.&nbsp;&nbsp;<BR>
&nbsp;<BR>
It&nbsp;is&nbsp;even&nbsp;possible&nbsp;to&nbsp;include&nbsp;c-files,&nbsp;i.e.&nbsp;to&nbsp;include&nbsp;entire&nbsp;files&nbsp;full&nbsp;of&nbsp;code.&nbsp;However,&nbsp;doing&nbsp;that&nbsp;is&nbsp;<BR>
very&nbsp;bad&nbsp;form.&nbsp;Do&nbsp;not&nbsp;do&nbsp;that&nbsp;EVER!&nbsp;Why?&nbsp;Well,&nbsp;for&nbsp;one&nbsp;thing&nbsp;error&nbsp;handling&nbsp;usually&nbsp;has&nbsp;a&nbsp;bad&nbsp;time&nbsp;<BR>
tracing&nbsp;errors&nbsp;in&nbsp;included&nbsp;files,&nbsp;the&nbsp;line&nbsp;numbers&nbsp;gets&nbsp;wrong.&nbsp;Also,&nbsp;since&nbsp;you&nbsp;include&nbsp;the&nbsp;uncompiled&nbsp;<BR>
code&nbsp;into&nbsp;several&nbsp;different&nbsp;objets,&nbsp;you&nbsp;will&nbsp;waste&nbsp;memory&nbsp;and&nbsp;CPU&nbsp;since&nbsp;these&nbsp;identical&nbsp;included&nbsp;parts&nbsp;<BR>
has&nbsp;to&nbsp;be&nbsp;compiled&nbsp;and&nbsp;stored&nbsp;separately&nbsp;for&nbsp;each&nbsp;object&nbsp;that&nbsp;uses&nbsp;them.&nbsp;Apart&nbsp;from&nbsp;all&nbsp;this&nbsp;just&nbsp;<BR>
reading&nbsp;the&nbsp;code&nbsp;will&nbsp;be&nbsp;a&nbsp;chore&nbsp;better&nbsp;not&nbsp;even&nbsp;contemplated.&nbsp;&nbsp;<BR>
&nbsp;<BR>
What&nbsp;has&nbsp;the&nbsp;extension&nbsp;of&nbsp;the&nbsp;file&nbsp;name&nbsp;really&nbsp;to&nbsp;do&nbsp;with&nbsp;the&nbsp;contents&nbsp;then?&nbsp;Well...&nbsp;actually&nbsp;nothing&nbsp;at&nbsp;<BR>
all.&nbsp;However,&nbsp;the&nbsp;convention&nbsp;is&nbsp;to&nbsp;keep&nbsp;code,&nbsp;functions&nbsp;that&nbsp;are&nbsp;to&nbsp;be&nbsp;executed,&nbsp;in&nbsp;c-files&nbsp;and&nbsp;<BR>
definitions&nbsp;in&nbsp;h-files.&nbsp;Usually&nbsp;the&nbsp;mudlib&nbsp;reflects&nbsp;on&nbsp;this&nbsp;convention&nbsp;and&nbsp;might&nbsp;not&nbsp;recognize&nbsp;anything&nbsp;<BR>
but&nbsp;c-files&nbsp;as&nbsp;code&nbsp;sources.&nbsp;&nbsp;<BR>
&nbsp;<BR>
The&nbsp;#define&nbsp;statement&nbsp;<BR>
&nbsp;<BR>
This&nbsp;is&nbsp;a&nbsp;very&nbsp;powerful&nbsp;macro&nbsp;or&nbsp;substitute&nbsp;preprocessor&nbsp;command&nbsp;that&nbsp;can&nbsp;be&nbsp;abused&nbsp;endlessly.&nbsp;<BR>
You&nbsp;are&nbsp;wise&nbsp;if&nbsp;you&nbsp;use&nbsp;it&nbsp;with&nbsp;caution&nbsp;and&nbsp;only&nbsp;for&nbsp;simple&nbsp;tasks.&nbsp;&nbsp;<BR>
&nbsp;<BR>
The&nbsp;syntax&nbsp;is&nbsp;as&nbsp;follows:&nbsp;&nbsp;<BR>
&nbsp;<BR>
#define&nbsp;&lt;pattern&gt;&nbsp;&lt;substitute&nbsp;pattern&gt;&nbsp;<BR>
#undef&nbsp;&lt;pattern&gt;&nbsp;<BR>
&nbsp;<BR>
Any&nbsp;text&nbsp;in&nbsp;the&nbsp;file&nbsp;that&nbsp;matches&nbsp;&lt;pattern&gt;&nbsp;will&nbsp;be&nbsp;substituted&nbsp;for&nbsp;&lt;substitute&nbsp;pattern&gt;&nbsp;<BR>
before&nbsp;compilation&nbsp;occurs.&nbsp;A&nbsp;#define&nbsp;is&nbsp;valid&nbsp;from&nbsp;the&nbsp;line&nbsp;it&nbsp;is&nbsp;found&nbsp;on&nbsp;until&nbsp;the&nbsp;end&nbsp;of&nbsp;the&nbsp;file&nbsp;or&nbsp;an&nbsp;<BR>
#undef&nbsp;command&nbsp;that&nbsp;removes&nbsp;it.&nbsp;&nbsp;<BR>
&nbsp;<BR>
Although&nbsp;defines&nbsp;can&nbsp;be&nbsp;written&nbsp;just&nbsp;as&nbsp;any&nbsp;kind&nbsp;of&nbsp;text,&nbsp;it&nbsp;is&nbsp;the&nbsp;custom&nbsp;(do&nbsp;this!)&nbsp;to&nbsp;use&nbsp;only&nbsp;capitals&nbsp;<BR>
when&nbsp;writing&nbsp;them.&nbsp;This&nbsp;is&nbsp;so&nbsp;that&nbsp;they&nbsp;will&nbsp;be&nbsp;easily&nbsp;distinguishable&nbsp;for&nbsp;what&nbsp;they&nbsp;are&nbsp;since&nbsp;no&nbsp;one&nbsp;<BR>
(not&nbsp;you&nbsp;either!)&nbsp;ever&nbsp;writes&nbsp;function&nbsp;or&nbsp;variable&nbsp;names&nbsp;with&nbsp;capitals.&nbsp;&nbsp;<BR>
&nbsp;<BR>
Place&nbsp;all&nbsp;defines&nbsp;in&nbsp;the&nbsp;beginning&nbsp;of&nbsp;the&nbsp;file,&nbsp;or&nbsp;the&nbsp;poor&nbsp;chum&nbsp;who&nbsp;next&nbsp;tries&nbsp;to&nbsp;look&nbsp;at&nbsp;your&nbsp;code&nbsp;will&nbsp;<BR>
have&nbsp;the&nbsp;devil's&nbsp;own&nbsp;time&nbsp;of&nbsp;locating&nbsp;them.&nbsp;If&nbsp;it's&nbsp;someone&nbsp;you&nbsp;asked&nbsp;for&nbsp;help&nbsp;(since&nbsp;your&nbsp;badly&nbsp;<BR>
written&nbsp;code&nbsp;most&nbsp;likely&nbsp;won't&nbsp;work)&nbsp;he&nbsp;probably&nbsp;will&nbsp;tell&nbsp;you&nbsp;to&nbsp;stick&nbsp;the&nbsp;file&nbsp;someplace&nbsp;very&nbsp;<BR>
unhygienic&nbsp;and&nbsp;come&nbsp;back&nbsp;later&nbsp;when&nbsp;you've&nbsp;learned&nbsp;to&nbsp;write&nbsp;properly.&nbsp;&nbsp;<BR>
&nbsp;<BR>
Simple&nbsp;defines&nbsp;are&nbsp;for&nbsp;example&nbsp;paths,&nbsp;names&nbsp;and&nbsp;above&nbsp;all&nbsp;constants&nbsp;of&nbsp;any&nbsp;kind&nbsp;that&nbsp;you&nbsp;don't&nbsp;want&nbsp;<BR>
to&nbsp;write&nbsp;over&nbsp;and&nbsp;over.&nbsp;&nbsp;<BR>
&nbsp;<BR>
#define&nbsp;MAX_LOGIN&nbsp;&nbsp;100&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;Max&nbsp;logged&nbsp;on&nbsp;players&nbsp;*/&nbsp;<BR>
#define&nbsp;LOGIN_OB&nbsp;&nbsp;&nbsp;&quot;/std/login&quot;&nbsp;/*&nbsp;The&nbsp;login&nbsp;object&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/&nbsp;<BR>
#define&nbsp;GREET_TEXT&nbsp;&quot;Welcome!&quot;&nbsp;&nbsp;&nbsp;/*&nbsp;The&nbsp;login&nbsp;message&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/&nbsp;<BR>
&nbsp;<BR>
Wherever&nbsp;the&nbsp;pattern&nbsp;strings&nbsp;above&nbsp;occur,&nbsp;they&nbsp;will&nbsp;be&nbsp;replaced&nbsp;by&nbsp;whatever&nbsp;is&nbsp;followed&nbsp;by&nbsp;the&nbsp;<BR>
pattern&nbsp;until&nbsp;the&nbsp;end&nbsp;of&nbsp;the&nbsp;line.&nbsp;That&nbsp;includes&nbsp;the&nbsp;comments&nbsp;above,&nbsp;but&nbsp;they&nbsp;are&nbsp;removed&nbsp;anyway&nbsp;<BR>
later.&nbsp;&nbsp;<BR>
&nbsp;<BR>
tell_object(player,&nbsp;GREET_TEXT&nbsp;+&nbsp;&quot;\n&quot;);&nbsp;<BR>
&nbsp;<BR>
A&nbsp;comment&nbsp;on&nbsp;the&nbsp;//&nbsp;form&nbsp;is&nbsp;not&nbsp;a&nbsp;good&nbsp;thing&nbsp;since&nbsp;it&nbsp;doesn't&nbsp;end&nbsp;until&nbsp;the&nbsp;end&nbsp;of&nbsp;the&nbsp;line.&nbsp;&nbsp;<BR>
&nbsp;<BR>
#define&nbsp;GREET_TEXT&nbsp;&nbsp;&nbsp;&nbsp;&quot;Welcome!&quot;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;The&nbsp;login&nbsp;message&nbsp;<BR>
&nbsp;<BR>
...will&nbsp;be&nbsp;translated&nbsp;into&nbsp;the&nbsp;previous&nbsp;example&nbsp;as:&nbsp;&nbsp;<BR>
&nbsp;<BR>
tell_object(player,&nbsp;&nbsp;&nbsp;&nbsp;&quot;Welcome!&quot;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;The&nbsp;login&nbsp;message&nbsp;+&nbsp;&quot;\n&quot;);&nbsp;<BR>
&nbsp;<BR>
...which&nbsp;will&nbsp;have&nbsp;the&nbsp;effect&nbsp;of&nbsp;commenting&nbsp;away&nbsp;everything&nbsp;after&nbsp;the&nbsp;//,&nbsp;all&nbsp;the&nbsp;way&nbsp;until&nbsp;the&nbsp;end&nbsp;of&nbsp;<BR>
the&nbsp;line.&nbsp;&nbsp;<BR>
&nbsp;<BR>
If&nbsp;a&nbsp;macro&nbsp;extends&nbsp;beyond&nbsp;the&nbsp;end&nbsp;of&nbsp;the&nbsp;line&nbsp;you&nbsp;can&nbsp;terminate&nbsp;the&nbsp;lines&nbsp;with&nbsp;a&nbsp;\&nbsp;which&nbsp;signifies&nbsp;that&nbsp;<BR>
it&nbsp;continues&nbsp;on&nbsp;the&nbsp;next&nbsp;line.&nbsp;However,&nbsp;you&nbsp;must&nbsp;break&nbsp;the&nbsp;string&nbsp;right&nbsp;after&nbsp;the&nbsp;\,&nbsp;there&nbsp;must&nbsp;NOT&nbsp;be&nbsp;<BR>
any&nbsp;spaces&nbsp;or&nbsp;other&nbsp;characters&nbsp;there,&nbsp;just&nbsp;the&nbsp;linebreak.&nbsp;&nbsp;<BR>
&nbsp;<BR>
#define&nbsp;LONG_DEFINE&nbsp;&nbsp;&quot;beginning&nbsp;of&nbsp;string&nbsp;\&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;and&nbsp;end&nbsp;of&nbsp;the&nbsp;same&quot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>
&nbsp;<BR>
Function-like&nbsp;defines&nbsp;are&nbsp;fairly&nbsp;common&nbsp;and&nbsp;often&nbsp;abused.&nbsp;The&nbsp;only&nbsp;really&nbsp;important&nbsp;rule&nbsp;is&nbsp;that&nbsp;any&nbsp;<BR>
argument&nbsp;to&nbsp;the&nbsp;macro&nbsp;must&nbsp;be&nbsp;written&nbsp;so&nbsp;that&nbsp;they&nbsp;are&nbsp;used&nbsp;enclosed&nbsp;in&nbsp;parenthesis.&nbsp;If&nbsp;you&nbsp;don't&nbsp;do&nbsp;<BR>
that&nbsp;you&nbsp;can&nbsp;end&nbsp;up&nbsp;with&nbsp;some&nbsp;very&nbsp;strange&nbsp;results.&nbsp;&nbsp;<BR>
&nbsp;<BR>
1:&nbsp;#define&nbsp;MUL_IT(a,&nbsp;b)&nbsp;a&nbsp;*&nbsp;b&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;Wrong&nbsp;*/&nbsp;<BR>
2:&nbsp;#define&nbsp;MUL_IT(a,&nbsp;b)&nbsp;(a&nbsp;*&nbsp;b)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;Not&nbsp;enough&nbsp;*/&nbsp;<BR>
3:&nbsp;#define&nbsp;MUL_IT(a,&nbsp;b)&nbsp;((a)&nbsp;*&nbsp;(b))&nbsp;&nbsp;/*&nbsp;Correct&nbsp;*/&nbsp;<BR>
&nbsp;<BR>
What's&nbsp;the&nbsp;big&nbsp;difference&nbsp;you&nbsp;may&nbsp;ask?&nbsp;Well,&nbsp;look&nbsp;at&nbsp;this&nbsp;example:&nbsp;&nbsp;<BR>
&nbsp;<BR>
result&nbsp;=&nbsp;MUL_IT(2&nbsp;+&nbsp;3,&nbsp;4&nbsp;*&nbsp;5)&nbsp;/&nbsp;5;&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;Expanded&nbsp;this&nbsp;becomes:&nbsp;<BR>
&nbsp;<BR>
1:&nbsp;result&nbsp;=&nbsp;2&nbsp;+&nbsp;3&nbsp;*&nbsp;4&nbsp;*&nbsp;5&nbsp;/&nbsp;5;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;=&nbsp;14,&nbsp;Wrong&nbsp;<BR>
2:&nbsp;result&nbsp;=&nbsp;(2&nbsp;+&nbsp;3&nbsp;*&nbsp;4&nbsp;*&nbsp;5)&nbsp;/&nbsp;5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;=&nbsp;12,&nbsp;Just&nbsp;as&nbsp;wrong&nbsp;<BR>
3:&nbsp;result&nbsp;=&nbsp;((2&nbsp;+&nbsp;3)&nbsp;*&nbsp;(4&nbsp;*&nbsp;5))&nbsp;/&nbsp;5&nbsp;&nbsp;//&nbsp;=&nbsp;20,&nbsp;Correct!&nbsp;<BR>
&nbsp;<BR>
Abuse&nbsp;of&nbsp;defines&nbsp;usually&nbsp;involves&nbsp;badly&nbsp;formulated&nbsp;macros,&nbsp;complicated&nbsp;macros&nbsp;used&nbsp;inside&nbsp;other&nbsp;<BR>
macros&nbsp;(making&nbsp;the&nbsp;code&nbsp;almost&nbsp;impossible&nbsp;to&nbsp;understand)&nbsp;or&nbsp;humungous&nbsp;arrays&nbsp;or&nbsp;mappings&nbsp;in&nbsp;<BR>
defines&nbsp;that&nbsp;are&nbsp;used&nbsp;often.&nbsp;The&nbsp;basic&nbsp;rule&nbsp;is&nbsp;to&nbsp;keep&nbsp;macros&nbsp;short&nbsp;and&nbsp;fairly&nbsp;simple.&nbsp;Do&nbsp;that&nbsp;and&nbsp;you'll&nbsp;<BR>
never&nbsp;have&nbsp;any&nbsp;problems.&nbsp;&nbsp;<BR>
&nbsp;<BR>
The&nbsp;#if,&nbsp;#ifdef,&nbsp;#ifndef,&nbsp;#else&nbsp;and&nbsp;#elseif&nbsp;statements&nbsp;<BR>
&nbsp;<BR>
These&nbsp;are&nbsp;all&nbsp;preprocessor&nbsp;directives&nbsp;aimed&nbsp;at&nbsp;selecting&nbsp;certain&nbsp;parts&nbsp;of&nbsp;code&nbsp;and&nbsp;removing&nbsp;other&nbsp;<BR>
depending&nbsp;on&nbsp;the&nbsp;state&nbsp;of&nbsp;a&nbsp;preprocessor&nbsp;variable.&nbsp;&nbsp;<BR>
&nbsp;<BR>
The&nbsp;#if&nbsp;statement&nbsp;looks&nbsp;very&nbsp;much&nbsp;like&nbsp;a&nbsp;normal&nbsp;if&nbsp;statement,&nbsp;just&nbsp;written&nbsp;a&nbsp;bit&nbsp;differently.&nbsp;&nbsp;<BR>
&nbsp;<BR>
Assume&nbsp;you&nbsp;may&nbsp;have&nbsp;the&nbsp;following&nbsp;define&nbsp;somewhere:&nbsp;&nbsp;<BR>
&nbsp;<BR>
#define&nbsp;CODE_VAR&nbsp;&nbsp;2&nbsp;<BR>
&nbsp;<BR>
or&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>
#define&nbsp;CODE_VAR&nbsp;&nbsp;3&nbsp;<BR>
&nbsp;<BR>
Then&nbsp;you&nbsp;can&nbsp;write&nbsp;&nbsp;<BR>
&nbsp;<BR>
#if&nbsp;CODE_VAR&nbsp;==&nbsp;2&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;code&nbsp;that&nbsp;will&nbsp;be&nbsp;kept&nbsp;only&nbsp;if&nbsp;CODE_VAR&nbsp;==&nbsp;2&gt;&nbsp;<BR>
#else&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;code&nbsp;that&nbsp;will&nbsp;be&nbsp;kept&nbsp;only&nbsp;if&nbsp;CODE_VAR&nbsp;!=&nbsp;2&gt;&nbsp;<BR>
#endif&nbsp;<BR>
&nbsp;<BR>
You&nbsp;don't&nbsp;have&nbsp;to&nbsp;have&nbsp;the&nbsp;#else&nbsp;statement&nbsp;there&nbsp;at&nbsp;all&nbsp;if&nbsp;you&nbsp;don't&nbsp;want&nbsp;to.&nbsp;&nbsp;<BR>
&nbsp;<BR>
It's&nbsp;sufficient&nbsp;to&nbsp;have&nbsp;the&nbsp;following&nbsp;statement&nbsp;to&nbsp;'define'&nbsp;a&nbsp;preprocessor&nbsp;pattern&nbsp;as&nbsp;existing:&nbsp;&nbsp;<BR>
&nbsp;<BR>
#define&nbsp;CODE_VAR&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;This&nbsp;defines&nbsp;the&nbsp;existance&nbsp;of&nbsp;CODE_VAR&nbsp;*/&nbsp;<BR>
&nbsp;<BR>
Then&nbsp;you&nbsp;can&nbsp;write&nbsp;like&nbsp;this:&nbsp;&nbsp;<BR>
&nbsp;<BR>
#ifdef&nbsp;CODE_VAR&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;code&nbsp;that&nbsp;will&nbsp;be&nbsp;kept&nbsp;only&nbsp;if&nbsp;CODE_VAR&nbsp;is&nbsp;defined&gt;&nbsp;<BR>
#else&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;code&nbsp;that&nbsp;will&nbsp;be&nbsp;kept&nbsp;only&nbsp;if&nbsp;CODE_VAR&nbsp;isn't&nbsp;defined&gt;&nbsp;<BR>
#endif&nbsp;<BR>
&nbsp;<BR>
or&nbsp;&nbsp;<BR>
&nbsp;<BR>
#ifndef&nbsp;CODE_VAR&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;code&nbsp;that&nbsp;will&nbsp;be&nbsp;kept&nbsp;only&nbsp;if&nbsp;CODE_VAR&nbsp;isn't&nbsp;defined&gt;&nbsp;<BR>
#else&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;code&nbsp;that&nbsp;will&nbsp;be&nbsp;kept&nbsp;only&nbsp;if&nbsp;CODE_VAR&nbsp;is&nbsp;defined&gt;&nbsp;<BR>
#endif&nbsp;<BR>
&nbsp;<BR>
Again,&nbsp;the&nbsp;#else&nbsp;part&nbsp;is&nbsp;optional.&nbsp;&nbsp;<BR>
&nbsp;<BR>
The&nbsp;#if/#ifdef/#ifndef&nbsp;preprocessor&nbsp;commands&nbsp;are&nbsp;almost&nbsp;only&nbsp;used&nbsp;to&nbsp;add&nbsp;debug&nbsp;code&nbsp;that&nbsp;<BR>
you&nbsp;don't&nbsp;want&nbsp;to&nbsp;have&nbsp;activated&nbsp;all&nbsp;of&nbsp;the&nbsp;time,&nbsp;or&nbsp;code&nbsp;that&nbsp;will&nbsp;work&nbsp;differently&nbsp;depending&nbsp;on&nbsp;other&nbsp;<BR>
very&nbsp;rarely&nbsp;changing&nbsp;parameters.&nbsp;Since&nbsp;the&nbsp;conditions&nbsp;have&nbsp;to&nbsp;be&nbsp;hard-coded&nbsp;in&nbsp;the&nbsp;file&nbsp;and&nbsp;can't&nbsp;<BR>
change&nbsp;during&nbsp;the&nbsp;course&nbsp;of&nbsp;the&nbsp;use&nbsp;of&nbsp;the&nbsp;object&nbsp;this&nbsp;is&nbsp;something&nbsp;you&nbsp;very&nbsp;rarely&nbsp;do.&nbsp;&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
--&nbsp;<BR>
※&nbsp;來源:•BBS&nbsp;水木清華站&nbsp;bbs.net.tsinghua.edu.cn•[FROM:&nbsp;klab.ishii.utsu]&nbsp;<BR>
<A HREF="00000009.htm">上一篇</A>
<A HREF='javascript:history.go(-1)'>返回上一頁</A>
<A HREF="index.htm">回到目錄</A>
<A HREF="#top">回到頁首</A>
<A HREF="00000011.htm">下一篇</A>
</H1></CENTER>
<CENTER><H1>BBS水木清華站︰精華區</H1></CENTER>
</BODY></HTML>