<HTML>
<HEAD>
<TITLE>BBS水木清華站︰精華區</TITLE>
</HEAD>
<BODY>
<CENTER><H1>BBS水木清華站︰精華區</H1></CENTER>
<A Name="top"></a>
發信人:&nbsp;jameson&nbsp;(阿其),&nbsp;信區:&nbsp;Mud_Builder&nbsp;<BR>
標&nbsp;&nbsp;題:&nbsp;LPC&nbsp;Manual&nbsp;-&nbsp;Essential&nbsp;LPC&nbsp;and&nbsp;MUDLIB&nbsp;(9)&nbsp;<BR>
發信站:&nbsp;BBS&nbsp;水木清華站&nbsp;(Fri&nbsp;May&nbsp;23&nbsp;22:58:36&nbsp;1997)&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
File&nbsp;handling&nbsp;<BR>
&nbsp;<BR>
[save_object,&nbsp;restore_object,&nbsp;save_map,&nbsp;restore_map,&nbsp;write_bytes,&nbsp;read_bytes,&nbsp;write_file,&nbsp;read_file,&nbsp;file_size,&nbsp;file_time,&nbsp;rename,&nbsp;rm,&nbsp;ed]&nbsp;&nbsp;<BR>
&nbsp;<BR>
Using&nbsp;files&nbsp;for&nbsp;storage&nbsp;of&nbsp;data&nbsp;is&nbsp;very&nbsp;important.&nbsp;Followingly&nbsp;there&nbsp;are&nbsp;a&nbsp;number&nbsp;of&nbsp;functions&nbsp;available&nbsp;to&nbsp;aid&nbsp;you&nbsp;with&nbsp;this.&nbsp;However,&nbsp;let&nbsp;me&nbsp;<BR>
start&nbsp;with&nbsp;a&nbsp;little&nbsp;sermon&nbsp;on&nbsp;the&nbsp;subject&nbsp;of&nbsp;CPU&nbsp;usage:&nbsp;&nbsp;<BR>
&nbsp;<BR>
Reading&nbsp;and&nbsp;writing&nbsp;to&nbsp;files&nbsp;is&nbsp;very&nbsp;CPU&nbsp;intensive,&nbsp;perhaps&nbsp;not&nbsp;in&nbsp;the&nbsp;respect&nbsp;that&nbsp;the&nbsp;CPU&nbsp;actually&nbsp;has&nbsp;a&nbsp;lot&nbsp;to&nbsp;do&nbsp;while&nbsp;it&nbsp;happens&nbsp;but&nbsp;that&nbsp;it&nbsp;<BR>
is&nbsp;unable&nbsp;to&nbsp;do&nbsp;anything&nbsp;else&nbsp;at&nbsp;the&nbsp;same&nbsp;time.&nbsp;In&nbsp;other&nbsp;words,&nbsp;reading&nbsp;and&nbsp;writing&nbsp;large&nbsp;portions&nbsp;of&nbsp;data&nbsp;often&nbsp;will&nbsp;slow&nbsp;the&nbsp;game&nbsp;down&nbsp;<BR>
significantly.&nbsp;To&nbsp;impose&nbsp;a&nbsp;small&nbsp;limit&nbsp;on&nbsp;excessive&nbsp;usage&nbsp;of&nbsp;memory,&nbsp;disk&nbsp;and&nbsp;CPU,&nbsp;it's&nbsp;impossible&nbsp;to&nbsp;handle&nbsp;more&nbsp;than&nbsp;ca&nbsp;50&nbsp;kb&nbsp;of&nbsp;data&nbsp;at&nbsp;<BR>
one&nbsp;time.&nbsp;Files&nbsp;may&nbsp;be&nbsp;bigger,&nbsp;but&nbsp;you&nbsp;can't&nbsp;write&nbsp;or&nbsp;read&nbsp;bigger&nbsp;chunks&nbsp;than&nbsp;that.&nbsp;This&nbsp;means&nbsp;you&nbsp;have&nbsp;to&nbsp;split&nbsp;up&nbsp;work&nbsp;on&nbsp;big&nbsp;files&nbsp;into&nbsp;<BR>
portions&nbsp;to&nbsp;be&nbsp;executed&nbsp;sequentially,&nbsp;preferrably&nbsp;with&nbsp;a&nbsp;pause&nbsp;between&nbsp;each&nbsp;execution&nbsp;to&nbsp;give&nbsp;the&nbsp;rest&nbsp;of&nbsp;the&nbsp;game&nbsp;time&nbsp;to&nbsp;do&nbsp;something.&nbsp;So,&nbsp;<BR>
please&nbsp;keep&nbsp;in&nbsp;mind&nbsp;that&nbsp;this&nbsp;limit&nbsp;isn't&nbsp;there&nbsp;to&nbsp;annoy&nbsp;you,&nbsp;to&nbsp;be&nbsp;sidestepped&nbsp;by&nbsp;nifty&nbsp;code,&nbsp;but&nbsp;as&nbsp;a&nbsp;reminder&nbsp;that&nbsp;you&nbsp;are&nbsp;hogging&nbsp;the&nbsp;<BR>
resources&nbsp;and&nbsp;should&nbsp;let&nbsp;others&nbsp;do&nbsp;something&nbsp;as&nbsp;well.&nbsp;Amen.&nbsp;&nbsp;<BR>
&nbsp;<BR>
Let's&nbsp;start&nbsp;with&nbsp;the&nbsp;very&nbsp;basic&nbsp;conept&nbsp;of&nbsp;storing&nbsp;and&nbsp;restoring&nbsp;objects.&nbsp;What&nbsp;you&nbsp;want&nbsp;to&nbsp;do&nbsp;usually&nbsp;is&nbsp;to&nbsp;store&nbsp;the&nbsp;global&nbsp;variables&nbsp;to&nbsp;file,&nbsp;<BR>
pending&nbsp;later&nbsp;restoration.&nbsp;For&nbsp;this&nbsp;purpose&nbsp;you&nbsp;use&nbsp;the&nbsp;efuns&nbsp;save_object()&nbsp;and&nbsp;restore_object().&nbsp;They&nbsp;both&nbsp;take&nbsp;a&nbsp;filepath&nbsp;as&nbsp;<BR>
argument&nbsp;and&nbsp;naturally&nbsp;have&nbsp;to&nbsp;specify&nbsp;a&nbsp;file&nbsp;which&nbsp;the&nbsp;object&nbsp;in&nbsp;question&nbsp;is&nbsp;privileged&nbsp;to&nbsp;write&nbsp;or&nbsp;read,&nbsp;respectively.&nbsp;The&nbsp;resulting&nbsp;savefile&nbsp;will&nbsp;<BR>
have&nbsp;a&nbsp;name&nbsp;ending&nbsp;in&nbsp;'.o',&nbsp;and&nbsp;you&nbsp;must&nbsp;remember&nbsp;to&nbsp;specify&nbsp;this&nbsp;extension&nbsp;to&nbsp;restore_object().&nbsp;This&nbsp;is&nbsp;optional&nbsp;with&nbsp;save_object()&nbsp;<BR>
since&nbsp;it's&nbsp;added&nbsp;automatically&nbsp;if&nbsp;you&nbsp;forget&nbsp;it.&nbsp;restore_object()&nbsp;returns&nbsp;the&nbsp;integer&nbsp;1&nbsp;on&nbsp;successful&nbsp;reading&nbsp;of&nbsp;a&nbsp;file,&nbsp;and&nbsp;0&nbsp;otherwise.&nbsp;The&nbsp;<BR>
contents&nbsp;of&nbsp;the&nbsp;saved&nbsp;file&nbsp;are&nbsp;a&nbsp;list&nbsp;of&nbsp;all&nbsp;global&nbsp;variables&nbsp;with&nbsp;their&nbsp;contents&nbsp;on&nbsp;the&nbsp;same&nbsp;line&nbsp;separaterd&nbsp;by&nbsp;a&nbsp;space.&nbsp;The&nbsp;storage&nbsp;format&nbsp;of&nbsp;the&nbsp;<BR>
string&nbsp;is&nbsp;the&nbsp;same&nbsp;as&nbsp;with&nbsp;val2str()&nbsp;mentioned&nbsp;earlier&nbsp;for&nbsp;the&nbsp;content&nbsp;of&nbsp;a&nbsp;single&nbsp;variable.&nbsp;naturally&nbsp;save_object()&nbsp;will&nbsp;store&nbsp;the&nbsp;names&nbsp;<BR>
of&nbsp;the&nbsp;variables&nbsp;as&nbsp;well&nbsp;in&nbsp;front&nbsp;of&nbsp;the&nbsp;data&nbsp;it&nbsp;contains.&nbsp;&nbsp;<BR>
&nbsp;<BR>
An&nbsp;important&nbsp;concept&nbsp;to&nbsp;remember&nbsp;is&nbsp;that&nbsp;data&nbsp;files&nbsp;stored&nbsp;with&nbsp;save_object()&nbsp;are&nbsp;text&nbsp;files,&nbsp;and&nbsp;hence&nbsp;editable&nbsp;with&nbsp;the&nbsp;internal&nbsp;ed()&nbsp;<BR>
editor.&nbsp;However,&nbsp;the&nbsp;lines&nbsp;might&nbsp;become&nbsp;very&nbsp;long&nbsp;if&nbsp;you&nbsp;store&nbsp;large&nbsp;arrays&nbsp;for&nbsp;exampe.&nbsp;ed()&nbsp;will&nbsp;then&nbsp;truncate&nbsp;the&nbsp;lines&nbsp;at&nbsp;the&nbsp;maximum&nbsp;<BR>
length,&nbsp;and&nbsp;if&nbsp;you&nbsp;then&nbsp;store&nbsp;the&nbsp;contents&nbsp;back&nbsp;to&nbsp;file&nbsp;you&nbsp;will&nbsp;in&nbsp;fact&nbsp;destroy&nbsp;part&nbsp;of&nbsp;the&nbsp;data,&nbsp;making&nbsp;it&nbsp;impossible&nbsp;to&nbsp;read&nbsp;back.&nbsp;This&nbsp;<BR>
unfortunately&nbsp;is&nbsp;a&nbsp;very&nbsp;common&nbsp;mistakes&nbsp;with&nbsp;new&nbsp;archwizards&nbsp;who&nbsp;want&nbsp;to&nbsp;hack&nbsp;the&nbsp;KEEPERSAVE.o&nbsp;file&nbsp;manually,&nbsp;instead&nbsp;of&nbsp;going&nbsp;<BR>
through&nbsp;the&nbsp;commands&nbsp;supplied&nbsp;for&nbsp;that&nbsp;purpose.&nbsp;&nbsp;<BR>
&nbsp;<BR>
Mappings&nbsp;are&nbsp;the&nbsp;most&nbsp;convenient&nbsp;data&nbsp;type&nbsp;to&nbsp;be&nbsp;used&nbsp;with&nbsp;saving&nbsp;variables.&nbsp;Just&nbsp;store&nbsp;the&nbsp;data&nbsp;you&nbsp;want&nbsp;in&nbsp;a&nbsp;mapping&nbsp;with&nbsp;a&nbsp;string&nbsp;<BR>
describing&nbsp;it&nbsp;as&nbsp;index,&nbsp;then&nbsp;store&nbsp;the&nbsp;mapping&nbsp;with&nbsp;the&nbsp;efun&nbsp;save_map()&nbsp;for&nbsp;later&nbsp;restoration&nbsp;with&nbsp;restore_map().&nbsp;The&nbsp;advantage&nbsp;with&nbsp;this&nbsp;<BR>
method&nbsp;over&nbsp;save/restore_object()&nbsp;is&nbsp;that&nbsp;you&nbsp;aren't&nbsp;limited&nbsp;to&nbsp;global&nbsp;non-static&nbsp;variables&nbsp;but&nbsp;can&nbsp;store&nbsp;whatever&nbsp;you&nbsp;like.&nbsp;The&nbsp;<BR>
drawback&nbsp;is&nbsp;that&nbsp;retrieving&nbsp;data&nbsp;is&nbsp;a&nbsp;bit&nbsp;more&nbsp;complicated.&nbsp;&nbsp;<BR>
&nbsp;<BR>
void&nbsp;save_object(string&nbsp;savepath);&nbsp;<BR>
int&nbsp;restore_object(string&nbsp;readpath);&nbsp;<BR>
void&nbsp;save_map(mapping&nbsp;mapp,&nbsp;string&nbsp;savepath);&nbsp;<BR>
mapping&nbsp;restore_map(string&nbsp;readpath);&nbsp;<BR>
e.g.&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Assume&nbsp;these&nbsp;global&nbsp;variable&nbsp;definitions:&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;string&nbsp;name,&nbsp;*desc;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;int&nbsp;flip;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;mapping&nbsp;data_map,&nbsp;smap;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Assume&nbsp;we&nbsp;are&nbsp;interested&nbsp;in&nbsp;storing&nbsp;name,&nbsp;desc,&nbsp;flip&nbsp;and&nbsp;data_map&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Set&nbsp;object&nbsp;inherent&nbsp;privileges&nbsp;by&nbsp;giving&nbsp;it&nbsp;the&nbsp;euid&nbsp;of&nbsp;the&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;creator&nbsp;of&nbsp;the&nbsp;file&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;setuid();&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;seteuid(getuid());&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Method&nbsp;1&nbsp;save&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;save_object(&quot;myfile&quot;);&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Method&nbsp;1&nbsp;restore&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(restore_object(&quot;myfile&quot;))&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;write(&quot;Yes!\n&quot;);&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;write(&quot;Naaaah..\n&quot;);&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Method&nbsp;2&nbsp;save&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;smap&nbsp;=&nbsp;([&nbsp;&quot;name&quot;&nbsp;:&nbsp;name,&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;desc&quot;&nbsp;:&nbsp;desc,&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;flip&quot;&nbsp;:&nbsp;flip,&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;dmap&quot;&nbsp;:&nbsp;data_map&nbsp;]);&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;save_map(smap,&nbsp;&quot;myfile&quot;);&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Method&nbsp;2&nbsp;restore&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;smap&nbsp;=&nbsp;restore_map(&quot;myfile&quot;);&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(m_sizeof(smap))&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name&nbsp;=&nbsp;smap[&quot;name&quot;];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Restore&nbsp;name&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;desc&nbsp;=&nbsp;smap[&quot;desc&quot;];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Restore&nbsp;desc&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;flip&nbsp;=&nbsp;smap[&quot;flip&quot;];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Restore&nbsp;flip&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data_map&nbsp;=&nbsp;smap[&quot;dmap&quot;];&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Restore&nbsp;data_map&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;write(&quot;Yes!\n&quot;);&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;write(&quot;Naaaah..\n&quot;);&nbsp;<BR>
&nbsp;<BR>
A&nbsp;fact&nbsp;to&nbsp;be&nbsp;remembered&nbsp;is&nbsp;that&nbsp;the&nbsp;save&nbsp;format&nbsp;used&nbsp;internally&nbsp;by&nbsp;save_object()&nbsp;and&nbsp;save_map()&nbsp;is&nbsp;the&nbsp;same,&nbsp;which&nbsp;makes&nbsp;it&nbsp;both&nbsp;<BR>
possible&nbsp;and&nbsp;sometimes&nbsp;very&nbsp;useful&nbsp;to&nbsp;restore&nbsp;data&nbsp;from&nbsp;objects&nbsp;that&nbsp;have&nbsp;saved&nbsp;their&nbsp;contents&nbsp;with&nbsp;save_object()&nbsp;by&nbsp;using&nbsp;<BR>
restore_map()&nbsp;and&nbsp;then&nbsp;just&nbsp;picking&nbsp;out&nbsp;the&nbsp;pieces&nbsp;you&nbsp;want&nbsp;from&nbsp;the&nbsp;resulting&nbsp;mapping.&nbsp;Assume&nbsp;that&nbsp;you&nbsp;only&nbsp;would&nbsp;have&nbsp;been&nbsp;<BR>
interested&nbsp;in&nbsp;restoring&nbsp;the&nbsp;variable&nbsp;'desc'&nbsp;in&nbsp;the&nbsp;example&nbsp;above,&nbsp;then&nbsp;you&nbsp;never&nbsp;would&nbsp;have&nbsp;bothered&nbsp;with&nbsp;the&nbsp;other&nbsp;statements&nbsp;in&nbsp;the&nbsp;Method&nbsp;<BR>
2&nbsp;restore.&nbsp;Beware&nbsp;that&nbsp;using&nbsp;restore_object()&nbsp;on&nbsp;a&nbsp;savefile&nbsp;stored&nbsp;with&nbsp;save_map()&nbsp;requires&nbsp;the&nbsp;indices&nbsp;used&nbsp;in&nbsp;the&nbsp;original&nbsp;mapping&nbsp;to&nbsp;<BR>
have&nbsp;the&nbsp;same&nbsp;name&nbsp;as&nbsp;the&nbsp;global&nbsp;variables&nbsp;intended&nbsp;to&nbsp;receive&nbsp;the&nbsp;data,&nbsp;something&nbsp;that&nbsp;doesn't&nbsp;have&nbsp;to&nbsp;be&nbsp;true,&nbsp;as&nbsp;exemplified&nbsp;above.&nbsp;<BR>
Restoring&nbsp;the&nbsp;Method&nbsp;2&nbsp;savefile&nbsp;with&nbsp;Method&nbsp;1&nbsp;restore&nbsp;will&nbsp;not&nbsp;result&nbsp;in&nbsp;an&nbsp;error,&nbsp;but&nbsp;it&nbsp;will&nbsp;fail&nbsp;to&nbsp;restore&nbsp;the&nbsp;variable&nbsp;'data_map'.&nbsp;&nbsp;<BR>
&nbsp;<BR>
Well,&nbsp;these&nbsp;are&nbsp;all&nbsp;methods&nbsp;for&nbsp;storing&nbsp;data&nbsp;in&nbsp;variables.&nbsp;Very&nbsp;often&nbsp;you&nbsp;want&nbsp;to&nbsp;store&nbsp;free-form&nbsp;data&nbsp;however,&nbsp;and&nbsp;not&nbsp;just&nbsp;data&nbsp;in&nbsp;variables.&nbsp;<BR>
For&nbsp;this&nbsp;purpose&nbsp;you&nbsp;can&nbsp;use&nbsp;the&nbsp;efuns&nbsp;write_bytes()&nbsp;and&nbsp;read_bytes(),&nbsp;or&nbsp;write_file()&nbsp;and&nbsp;read_file().&nbsp;Basically&nbsp;both&nbsp;pairs&nbsp;of&nbsp;<BR>
functions&nbsp;do&nbsp;the&nbsp;same&nbsp;thing,&nbsp;i.e.&nbsp;save&nbsp;or&nbsp;read&nbsp;a&nbsp;string&nbsp;of&nbsp;certain&nbsp;length&nbsp;from&nbsp;file.&nbsp;The&nbsp;only&nbsp;difference&nbsp;is&nbsp;that&nbsp;write_bytes()&nbsp;can&nbsp;be&nbsp;used&nbsp;to&nbsp;<BR>
overwrite&nbsp;a&nbsp;portion&nbsp;of&nbsp;a&nbsp;file,&nbsp;while&nbsp;write_file()&nbsp;only&nbsp;can&nbsp;append&nbsp;to&nbsp;a&nbsp;file.&nbsp;Also,&nbsp;read_bytes()&nbsp;acts&nbsp;on&nbsp;exact&nbsp;bytes,&nbsp;while&nbsp;read_file()&nbsp;<BR>
acts&nbsp;on&nbsp;lines&nbsp;separated&nbsp;by&nbsp;newlines.&nbsp;Both&nbsp;write&nbsp;functions&nbsp;return&nbsp;1&nbsp;on&nbsp;success&nbsp;and&nbsp;0&nbsp;on&nbsp;failure.&nbsp;Both&nbsp;read&nbsp;functions&nbsp;return&nbsp;a&nbsp;string&nbsp;with&nbsp;the&nbsp;<BR>
result&nbsp;of&nbsp;the&nbsp;read&nbsp;operation&nbsp;on&nbsp;success,&nbsp;on&nbsp;failure&nbsp;they&nbsp;return&nbsp;0,&nbsp;so&nbsp;check&nbsp;the&nbsp;result&nbsp;with&nbsp;stringp()&nbsp;to&nbsp;make&nbsp;sure&nbsp;it&nbsp;has&nbsp;succeeded.&nbsp;&nbsp;<BR>
&nbsp;<BR>
int&nbsp;write_bytes(string&nbsp;path,&nbsp;int&nbsp;pos,&nbsp;string&nbsp;text);&nbsp;<BR>
string&nbsp;read_bytes(string&nbsp;path,&nbsp;void|int&nbsp;pos,&nbsp;void|int&nbsp;num);&nbsp;<BR>
int&nbsp;write_file(string&nbsp;path,&nbsp;string&nbsp;text);&nbsp;<BR>
string&nbsp;read_file(string&nbsp;path,&nbsp;void|int&nbsp;pos,&nbsp;void|int&nbsp;num);&nbsp;<BR>
&nbsp;<BR>
You&nbsp;can&nbsp;get&nbsp;information&nbsp;about&nbsp;a&nbsp;file&nbsp;as&nbsp;well.&nbsp;You&nbsp;get&nbsp;the&nbsp;size&nbsp;of&nbsp;the&nbsp;contents&nbsp;with&nbsp;the&nbsp;efun&nbsp;file_size(),&nbsp;but&nbsp;it&nbsp;can&nbsp;also&nbsp;be&nbsp;used&nbsp;to&nbsp;check&nbsp;the&nbsp;<BR>
type&nbsp;and&nbsp;existence&nbsp;of&nbsp;a&nbsp;file.&nbsp;If&nbsp;the&nbsp;returned&nbsp;number&nbsp;is&nbsp;positive,&nbsp;it&nbsp;is&nbsp;a&nbsp;file&nbsp;and&nbsp;the&nbsp;number&nbsp;represents&nbsp;the&nbsp;size&nbsp;in&nbsp;bytes&nbsp;of&nbsp;the&nbsp;contents,&nbsp;if&nbsp;the&nbsp;file&nbsp;<BR>
doesn't&nbsp;exist,&nbsp;it&nbsp;returns&nbsp;-1&nbsp;and&nbsp;if&nbsp;the&nbsp;file&nbsp;actually&nbsp;is&nbsp;a&nbsp;directory&nbsp;it&nbsp;returns&nbsp;-2.&nbsp;To&nbsp;get&nbsp;the&nbsp;time&nbsp;of&nbsp;last&nbsp;modification&nbsp;you&nbsp;use&nbsp;the&nbsp;efun&nbsp;<BR>
file_time().&nbsp;&nbsp;<BR>
&nbsp;<BR>
int&nbsp;file_size(string&nbsp;path);&nbsp;<BR>
int&nbsp;file_time(string&nbsp;path);&nbsp;<BR>
e.g.&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;file_info(string&nbsp;path)&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;type,&nbsp;tm;&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type&nbsp;=&nbsp;file_size(path);&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tm&nbsp;=&nbsp;file_time(path);&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;write(&quot;The&nbsp;file&nbsp;'&quot;&nbsp;+&nbsp;path&nbsp;+&nbsp;&quot;'&nbsp;&quot;);&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;switch&nbsp;(type)&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;-1:&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;write(&quot;doesn't&nbsp;exist.\n&quot;);&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;-2:&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;write(&quot;is&nbsp;a&nbsp;directory,&nbsp;last&nbsp;modified&nbsp;&quot;&nbsp;+&nbsp;ctime(tm)&nbsp;+&nbsp;&quot;.\n&quot;);&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;default:&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;write(&quot;is&nbsp;&quot;&nbsp;+&nbsp;type&nbsp;+&nbsp;&quot;&nbsp;bytes&nbsp;in&nbsp;size,&nbsp;last&nbsp;modified&nbsp;&quot;&nbsp;+&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctime(tm)&nbsp;+&nbsp;&quot;.\n&quot;);&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<BR>
&nbsp;<BR>
If&nbsp;you&nbsp;want&nbsp;to&nbsp;rename&nbsp;or&nbsp;move&nbsp;a&nbsp;file&nbsp;you&nbsp;can&nbsp;use&nbsp;the&nbsp;efun&nbsp;rename().&nbsp;Beware&nbsp;that&nbsp;this&nbsp;operation&nbsp;actually&nbsp;first&nbsp;copies&nbsp;the&nbsp;file&nbsp;and&nbsp;then&nbsp;<BR>
removes&nbsp;the&nbsp;old&nbsp;one.&nbsp;It&nbsp;can&nbsp;also&nbsp;be&nbsp;used&nbsp;to&nbsp;move&nbsp;directories.&nbsp;If&nbsp;you&nbsp;wish&nbsp;to&nbsp;remove&nbsp;a&nbsp;file&nbsp;entirely,&nbsp;you&nbsp;use&nbsp;the&nbsp;efun&nbsp;rm().&nbsp;The&nbsp;efun&nbsp;rm()&nbsp;<BR>
returns&nbsp;1&nbsp;on&nbsp;success&nbsp;and&nbsp;0&nbsp;on&nbsp;failure,&nbsp;however&nbsp;beware&nbsp;that&nbsp;rename()&nbsp;works&nbsp;just&nbsp;the&nbsp;opposit&nbsp;way&nbsp;around,&nbsp;it&nbsp;return&nbsp;1&nbsp;on&nbsp;failure&nbsp;and&nbsp;0&nbsp;if&nbsp;all&nbsp;is&nbsp;<BR>
well.&nbsp;&nbsp;<BR>
&nbsp;<BR>
int&nbsp;rename(string&nbsp;oldpath,&nbsp;string&nbsp;newpath);&nbsp;<BR>
int&nbsp;rm(string&nbsp;path);&nbsp;<BR>
e.g.&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(rm(&quot;myfile&quot;))&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;write(&quot;Ok,&nbsp;removed.\n&quot;);&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;write(&quot;Sorry,&nbsp;no&nbsp;go.\n&quot;);&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(rename(&quot;myfile&quot;,&nbsp;&quot;yourfile&quot;))&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;write(&quot;Nope,&nbsp;still&nbsp;the&nbsp;same...\n&quot;);&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;write(&quot;Ok!\n&quot;);&nbsp;<BR>
&nbsp;<BR>
The&nbsp;internal&nbsp;editor&nbsp;'ed'&nbsp;is&nbsp;actually&nbsp;an&nbsp;efun&nbsp;that&nbsp;operates&nbsp;on&nbsp;a&nbsp;file.&nbsp;You&nbsp;can&nbsp;use&nbsp;it&nbsp;for&nbsp;whatever&nbsp;purpose&nbsp;you&nbsp;like,&nbsp;but&nbsp;keep&nbsp;in&nbsp;mind&nbsp;that&nbsp;most&nbsp;<BR>
people&nbsp;don't&nbsp;really&nbsp;know&nbsp;how&nbsp;to&nbsp;use&nbsp;it.&nbsp;Also&nbsp;remember&nbsp;that&nbsp;the&nbsp;efun&nbsp;ed()&nbsp;can&nbsp;be&nbsp;used&nbsp;to&nbsp;create&nbsp;new&nbsp;files&nbsp;and&nbsp;edit&nbsp;old&nbsp;as&nbsp;per&nbsp;the&nbsp;privileges&nbsp;<BR>
defined&nbsp;by&nbsp;the&nbsp;object.&nbsp;You&nbsp;can&nbsp;provide&nbsp;a&nbsp;function&nbsp;pointer&nbsp;to&nbsp;a&nbsp;function&nbsp;that&nbsp;will&nbsp;be&nbsp;called&nbsp;on&nbsp;termination&nbsp;of&nbsp;the&nbsp;efun.&nbsp;If&nbsp;you&nbsp;don't&nbsp;provide&nbsp;a&nbsp;<BR>
filepath,&nbsp;the&nbsp;user&nbsp;will&nbsp;be&nbsp;expected&nbsp;to&nbsp;give&nbsp;the&nbsp;path&nbsp;and&nbsp;name&nbsp;of&nbsp;the&nbsp;file&nbsp;from&nbsp;within&nbsp;the&nbsp;editor.&nbsp;&nbsp;<BR>
&nbsp;<BR>
void&nbsp;ed(void|string&nbsp;path,&nbsp;void|function&nbsp;exit_func);&nbsp;<BR>
&nbsp;<BR>
Directory&nbsp;handling&nbsp;<BR>
&nbsp;<BR>
[mkdir,&nbsp;rename,&nbsp;rmdir,&nbsp;get_dir]&nbsp;&nbsp;<BR>
&nbsp;<BR>
Creating,&nbsp;renaming&nbsp;and&nbsp;removing&nbsp;directories&nbsp;are&nbsp;handled&nbsp;by&nbsp;the&nbsp;efuns&nbsp;mkdir(),&nbsp;rename()&nbsp;and&nbsp;rmdir().&nbsp;You&nbsp;need&nbsp;write&nbsp;permissions&nbsp;in&nbsp;the&nbsp;<BR>
directory&nbsp;you&nbsp;are&nbsp;doing&nbsp;this,&nbsp;of&nbsp;course.&nbsp;mkdir()&nbsp;and&nbsp;rmdir()&nbsp;return&nbsp;1&nbsp;on&nbsp;success&nbsp;and&nbsp;0&nbsp;on&nbsp;failure.&nbsp;rename(),&nbsp;as&nbsp;already&nbsp;pointed&nbsp;out,&nbsp;<BR>
works&nbsp;the&nbsp;other&nbsp;way&nbsp;around&nbsp;and&nbsp;returns&nbsp;1&nbsp;on&nbsp;failure,&nbsp;0&nbsp;on&nbsp;success.&nbsp;rmdir()&nbsp;only&nbsp;works&nbsp;if&nbsp;the&nbsp;directory&nbsp;you&nbsp;want&nbsp;to&nbsp;remove&nbsp;is&nbsp;empty,&nbsp;i.e.&nbsp;<BR>
contains&nbsp;no&nbsp;other&nbsp;files&nbsp;or&nbsp;directories.&nbsp;&nbsp;<BR>
&nbsp;<BR>
int&nbsp;mkdir(string&nbsp;path);&nbsp;<BR>
int&nbsp;rename(string&nbsp;oldpath,&nbsp;string&nbsp;newpath);&nbsp;<BR>
int&nbsp;rmdir(string&nbsp;path);&nbsp;<BR>
&nbsp;<BR>
For&nbsp;listing&nbsp;the&nbsp;contents&nbsp;of&nbsp;a&nbsp;directory,&nbsp;you&nbsp;can&nbsp;use&nbsp;the&nbsp;efun&nbsp;get_dir().&nbsp;It&nbsp;simply&nbsp;returns&nbsp;an&nbsp;array&nbsp;with&nbsp;the&nbsp;names&nbsp;of&nbsp;all&nbsp;files&nbsp;in&nbsp;the&nbsp;specified&nbsp;<BR>
directory,&nbsp;or&nbsp;an&nbsp;empty&nbsp;array&nbsp;on&nbsp;failure.&nbsp;&nbsp;<BR>
&nbsp;<BR>
string&nbsp;*get_dir(string&nbsp;path);&nbsp;<BR>
e.g.&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;string&nbsp;*dir_contents;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;i,&nbsp;sz;&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;dir_contents&nbsp;=&nbsp;get_dir(&quot;/d/Domain/fatty&quot;);&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(i&nbsp;=&nbsp;0,&nbsp;sz&nbsp;=&nbsp;sizeof(dir_contents)&nbsp;;&nbsp;i&nbsp;&lt;&nbsp;sz&nbsp;;&nbsp;i++)&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;See&nbsp;the&nbsp;code&nbsp;for&nbsp;file_info&nbsp;in&nbsp;a&nbsp;previous&nbsp;example&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file_info(dir_contents[i]);&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<BR>
&nbsp;<BR>
Screen&nbsp;input/output&nbsp;<BR>
&nbsp;<BR>
[write,&nbsp;write_socket,&nbsp;cat,&nbsp;tail,&nbsp;input_to]&nbsp;&nbsp;<BR>
&nbsp;<BR>
By&nbsp;now&nbsp;you're&nbsp;fairly&nbsp;familiar&nbsp;with&nbsp;the&nbsp;efun&nbsp;write(),&nbsp;it&nbsp;simply&nbsp;outputs&nbsp;data&nbsp;to&nbsp;whoever&nbsp;is&nbsp;registered&nbsp;as&nbsp;listening,&nbsp;it&nbsp;might&nbsp;be&nbsp;a&nbsp;player&nbsp;or&nbsp;it&nbsp;<BR>
might&nbsp;be&nbsp;an&nbsp;object.&nbsp;Usually&nbsp;this&nbsp;function&nbsp;suffices,&nbsp;you&nbsp;have&nbsp;full&nbsp;control&nbsp;of&nbsp;what&nbsp;you&nbsp;want&nbsp;to&nbsp;write&nbsp;and&nbsp;who&nbsp;you&nbsp;want&nbsp;to&nbsp;write&nbsp;it&nbsp;to.&nbsp;However,&nbsp;<BR>
there&nbsp;exists&nbsp;one&nbsp;function&nbsp;that&nbsp;sometimes&nbsp;is&nbsp;necessary,&nbsp;namely&nbsp;write_sockect()&nbsp;that&nbsp;only&nbsp;writes&nbsp;to&nbsp;the&nbsp;interactive&nbsp;user.&nbsp;If&nbsp;none&nbsp;exists,&nbsp;it&nbsp;<BR>
writes&nbsp;to&nbsp;the&nbsp;central&nbsp;error&nbsp;log&nbsp;instead.&nbsp;It&nbsp;works&nbsp;analogous&nbsp;to&nbsp;write()&nbsp;in&nbsp;all&nbsp;other&nbsp;aspects.&nbsp;Coding&nbsp;ordinary&nbsp;objects&nbsp;you&nbsp;will&nbsp;never&nbsp;need&nbsp;to&nbsp;use&nbsp;<BR>
this&nbsp;one,&nbsp;it's&nbsp;mostly&nbsp;or&nbsp;perhaps&nbsp;I&nbsp;should&nbsp;say&nbsp;only,&nbsp;used&nbsp;for&nbsp;certain&nbsp;mudlib&nbsp;objects,&nbsp;particularly&nbsp;to&nbsp;do&nbsp;with&nbsp;logging&nbsp;in&nbsp;players.&nbsp;&nbsp;<BR>
&nbsp;<BR>
Writing&nbsp;is&nbsp;nice,&nbsp;but&nbsp;sometimes&nbsp;you&nbsp;want&nbsp;to&nbsp;relate&nbsp;whole&nbsp;parts&nbsp;of&nbsp;files&nbsp;quickly.&nbsp;Then&nbsp;you&nbsp;should&nbsp;use&nbsp;the&nbsp;efun&nbsp;cat().&nbsp;It&nbsp;will&nbsp;print&nbsp;a&nbsp;specified&nbsp;<BR>
portion&nbsp;of&nbsp;a&nbsp;file&nbsp;directly&nbsp;on&nbsp;the&nbsp;screen&nbsp;quickly&nbsp;and&nbsp;easily.&nbsp;There&nbsp;even&nbsp;exists&nbsp;a&nbsp;special&nbsp;efun&nbsp;called&nbsp;tail()&nbsp;for&nbsp;listing&nbsp;only&nbsp;about&nbsp;the&nbsp;last&nbsp;1080&nbsp;<BR>
bytes&nbsp;of&nbsp;a&nbsp;file&nbsp;in&nbsp;the&nbsp;same&nbsp;manner.&nbsp;cat()&nbsp;makes&nbsp;sure&nbsp;that&nbsp;it&nbsp;starts&nbsp;reading&nbsp;from&nbsp;a&nbsp;new&nbsp;line&nbsp;and&nbsp;returns&nbsp;the&nbsp;number&nbsp;of&nbsp;lines&nbsp;actually&nbsp;read.&nbsp;<BR>
tail()&nbsp;returns&nbsp;1&nbsp;on&nbsp;success&nbsp;and&nbsp;0&nbsp;on&nbsp;failure.&nbsp;&nbsp;<BR>
&nbsp;<BR>
int&nbsp;cat(string&nbsp;path,&nbsp;int&nbsp;start,&nbsp;int&nbsp;len);&nbsp;<BR>
int&nbsp;tail(string&nbsp;path);&nbsp;<BR>
e.g.&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;List&nbsp;80&nbsp;lines&nbsp;in&nbsp;the&nbsp;file&nbsp;TESTFILE,&nbsp;20&nbsp;lines&nbsp;down&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;cat(&quot;TESTFILE&quot;,&nbsp;20,&nbsp;80)&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;List&nbsp;the&nbsp;ending&nbsp;of&nbsp;the&nbsp;same&nbsp;file&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;tail(&quot;TESTFILE);&nbsp;<BR>
&nbsp;<BR>
A&nbsp;small&nbsp;warning,&nbsp;if&nbsp;you&nbsp;use&nbsp;cat()&nbsp;on&nbsp;long&nbsp;files&nbsp;you&nbsp;might&nbsp;get&nbsp;an&nbsp;eval-cost&nbsp;error.&nbsp;This&nbsp;is&nbsp;fairly&nbsp;common&nbsp;when&nbsp;you&nbsp;have&nbsp;logs&nbsp;or&nbsp;instructions&nbsp;<BR>
you&nbsp;want&nbsp;to&nbsp;display,&nbsp;and&nbsp;forget&nbsp;to&nbsp;cut&nbsp;them&nbsp;up&nbsp;into&nbsp;smaller&nbsp;parts.&nbsp;&nbsp;<BR>
&nbsp;<BR>
Most&nbsp;input&nbsp;to&nbsp;LPC&nbsp;programs&nbsp;comes&nbsp;as&nbsp;arguments&nbsp;to&nbsp;commands.&nbsp;However,&nbsp;at&nbsp;times&nbsp;you&nbsp;need&nbsp;to&nbsp;actually&nbsp;ask&nbsp;the&nbsp;player&nbsp;for&nbsp;input&nbsp;and&nbsp;he&nbsp;needs&nbsp;<BR>
to&nbsp;answer.&nbsp;This&nbsp;poses&nbsp;a&nbsp;special&nbsp;problem&nbsp;since&nbsp;object&nbsp;execution&nbsp;in&nbsp;the&nbsp;gamedriver&nbsp;is&nbsp;sequential;&nbsp;if&nbsp;you&nbsp;stop&nbsp;to&nbsp;wait&nbsp;for&nbsp;an&nbsp;answer,&nbsp;all&nbsp;of&nbsp;the&nbsp;<BR>
game&nbsp;will&nbsp;stop&nbsp;along&nbsp;with&nbsp;you&nbsp;while&nbsp;the&nbsp;player&nbsp;makes&nbsp;up&nbsp;his&nbsp;mind&nbsp;(if&nbsp;ever)&nbsp;and&nbsp;types.&nbsp;This&nbsp;obviously&nbsp;won't&nbsp;do.&nbsp;Instead&nbsp;you&nbsp;can&nbsp;use&nbsp;the&nbsp;special&nbsp;<BR>
efun&nbsp;input_to()&nbsp;which&nbsp;allows&nbsp;you&nbsp;to&nbsp;specify&nbsp;a&nbsp;function&nbsp;which&nbsp;then&nbsp;will&nbsp;be&nbsp;called&nbsp;with&nbsp;whatever&nbsp;the&nbsp;player&nbsp;types&nbsp;as&nbsp;argument,&nbsp;after&nbsp;the&nbsp;<BR>
completion&nbsp;of&nbsp;the&nbsp;current&nbsp;function.&nbsp;This&nbsp;sounds&nbsp;complicated&nbsp;but&nbsp;is&nbsp;not,&nbsp;just&nbsp;look&nbsp;at&nbsp;this&nbsp;example:&nbsp;&nbsp;<BR>
&nbsp;<BR>
void&nbsp;input_to(function&nbsp;func,&nbsp;void|int&nbsp;noecho);&nbsp;<BR>
e.g.&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;interrogate_fun()&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;write(&quot;Please&nbsp;state&nbsp;your&nbsp;name:&nbsp;&quot;);&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;input_to(func_2);&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;func_2(string&nbsp;n_inp)&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;string&nbsp;name;&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!strlen(n_inp))&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;interrogate_fun();&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name&nbsp;=&nbsp;n_inp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;write(&quot;\nState&nbsp;your&nbsp;sex&nbsp;(male&nbsp;or&nbsp;female):&nbsp;&quot;);&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;input_to(&amp;func_3(,&nbsp;name));&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;func_3(string&nbsp;s_inp,&nbsp;string&nbsp;name)&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;string&nbsp;sex;&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(s_inp&nbsp;!=&nbsp;&quot;male&quot;&nbsp;&amp;&amp;&nbsp;s_inp&nbsp;!=&nbsp;&quot;female&quot;)&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;write(&quot;\nState&nbsp;your&nbsp;sex&nbsp;(male&nbsp;or&nbsp;female):&nbsp;&quot;);&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;input_to(&amp;func_3(,name));&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<BR>
&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sex&nbsp;=&nbsp;s_inp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;write(&quot;\nState&nbsp;your&nbsp;occupation:&nbsp;&quot;);&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;input_to(&amp;func_4(,&nbsp;name,&nbsp;sex));&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;func_4(string&nbsp;o_inp,&nbsp;string&nbsp;name,&nbsp;string&nbsp;sex)&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;string&nbsp;occupation;&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!strlen(o_inp))&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;interrogate_fun();&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;occupation&nbsp;=&nbsp;o_inp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;write(&quot;\nYour&nbsp;name&nbsp;is&nbsp;&quot;&nbsp;+&nbsp;name&nbsp;+&nbsp;&quot;,\n&quot;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+&nbsp;&quot;you&nbsp;are&nbsp;a&nbsp;&quot;&nbsp;+&nbsp;sex&nbsp;+&nbsp;&quot;&nbsp;&quot;&nbsp;+&nbsp;occupation&nbsp;+&nbsp;&quot;.\n&quot;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+&nbsp;&quot;\nThank&nbsp;you&nbsp;for&nbsp;your&nbsp;cooperation!\n&quot;);&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<BR>
&nbsp;<BR>
If&nbsp;you&nbsp;specify&nbsp;the&nbsp;second&nbsp;argument&nbsp;to&nbsp;input_to()&nbsp;as&nbsp;1,&nbsp;whatever&nbsp;the&nbsp;player&nbsp;types&nbsp;will&nbsp;not&nbsp;be&nbsp;echoed&nbsp;on&nbsp;his&nbsp;screen.&nbsp;This&nbsp;is&nbsp;what&nbsp;you&nbsp;want&nbsp;to&nbsp;<BR>
do&nbsp;for&nbsp;passwords&nbsp;and&nbsp;other&nbsp;sensitive&nbsp;information.&nbsp;&nbsp;<BR>
&nbsp;<BR>
--&nbsp;<BR>
※&nbsp;來源:•BBS&nbsp;水木清華站&nbsp;bbs.net.tsinghua.edu.cn•[FROM:&nbsp;klab.ishii.utsu]&nbsp;<BR>
<A HREF="00000017.htm">上一篇</A>
<A HREF='javascript:history.go(-1)'>返回上一頁</A>
<A HREF="index.htm">回到目錄</A>
<A HREF="#top">回到頁首</A>
<A HREF="00000019.htm">下一篇</A>
</H1></CENTER>
<CENTER><H1>BBS水木清華站︰精華區</H1></CENTER>
</BODY></HTML>