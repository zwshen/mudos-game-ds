<HTML>
<HEAD>
<TITLE>BBS水木清華站︰精華區</TITLE>
</HEAD>
<BODY>
<CENTER><H1>BBS水木清華站︰精華區</H1></CENTER>
<A Name="top"></a>
發信人:&nbsp;Ranma&nbsp;(亂馬~~~~~~~無聊中),&nbsp;信區:&nbsp;Mud_Builder&nbsp;<BR>
標&nbsp;&nbsp;題:&nbsp;Lpc&nbsp;programmer易犯錯誤&nbsp;<BR>
發信站:&nbsp;BBS&nbsp;水木清華站&nbsp;(Mon&nbsp;Oct&nbsp;20&nbsp;09:52:39&nbsp;1997)&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;Here's&nbsp;a&nbsp;summary&nbsp;of&nbsp;the&nbsp;biggest&nbsp;differencies&nbsp;between&nbsp;C&nbsp;and&nbsp;Lpc.&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;o&nbsp;Files&nbsp;are&nbsp;never&nbsp;compiled,&nbsp;the&nbsp;source&nbsp;files&nbsp;are&nbsp;read&nbsp;directly&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;into&nbsp;the&nbsp;driver.&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;o&nbsp;There&nbsp;are&nbsp;no&nbsp;such&nbsp;thing&nbsp;as&nbsp;pointers.&nbsp;Read&nbsp;em&nbsp;and&nbsp;weap.&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;o&nbsp;you&nbsp;don't&nbsp;need&nbsp;a&nbsp;main().&nbsp;In&nbsp;lpc&nbsp;functions&nbsp;are&nbsp;called&nbsp;directly&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;from&nbsp;the&nbsp;driver&nbsp;or&nbsp;when&nbsp;a&nbsp;command&nbsp;is&nbsp;typed.&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;o&nbsp;there&nbsp;are&nbsp;many&nbsp;routines&nbsp;and&nbsp;functions&nbsp;that&nbsp;are&nbsp;hidden&nbsp;in&nbsp;the&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parser,&nbsp;equivalent&nbsp;to&nbsp;the&nbsp;kernal&nbsp;in&nbsp;UNIX,&nbsp;are&nbsp;basic&nbsp;system&nbsp;calls.&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;o&nbsp;strings&nbsp;are&nbsp;not&nbsp;arrays&nbsp;the&nbsp;way&nbsp;they&nbsp;are&nbsp;in&nbsp;C&nbsp;the&nbsp;are&nbsp;much&nbsp;closer&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;to&nbsp;the&nbsp;strs&nbsp;of&nbsp;BASIC&nbsp;(you&nbsp;remember&nbsp;being&nbsp;forced&nbsp;to&nbsp;learn&nbsp;that&nbsp;trash&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;in&nbsp;High&nbsp;School&nbsp;right?).&nbsp;&nbsp;String&nbsp;functions&nbsp;are&nbsp;implied&nbsp;i.e.&nbsp;you&nbsp;may&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;us&nbsp;the&nbsp;'+'&nbsp;operator&nbsp;to&nbsp;combine&nbsp;strings&nbsp;such&nbsp;that:&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ack=foo+bar;&nbsp;is&nbsp;equivelen&nbsp;to:&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strcpy(ack,foo);&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strcat(ack,bar);&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Also&nbsp;ack[foo]&nbsp;does&nbsp;not&nbsp;refer&nbsp;to&nbsp;a&nbsp;character,&nbsp;it&nbsp;just&nbsp;return&nbsp;the&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;integer&nbsp;value&nbsp;of&nbsp;the&nbsp;char&nbsp;foo.&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;o&nbsp;lpc&nbsp;does&nbsp;not&nbsp;use&nbsp;typing.&nbsp;&nbsp;this&nbsp;means&nbsp;that&nbsp;you&nbsp;can&nbsp;do&nbsp;nonsense&nbsp;like&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this:&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;do_it()&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;i;&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i=&quot;ack&quot;;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;i;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This&nbsp;is&nbsp;of&nbsp;course&nbsp;not&nbsp;recommendable&nbsp;and&nbsp;the&nbsp;compiler&nbsp;will&nbsp;warn&nbsp;you&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;you&nbsp;use&nbsp;#pragma&nbsp;strinct_types&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;o&nbsp;the&nbsp;object&nbsp;orientedness&nbsp;of&nbsp;lpc&nbsp;is&nbsp;mostly&nbsp;a&nbsp;illusion&nbsp;all&nbsp;your&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;doing&nbsp;is&nbsp;modifing&nbsp;shared&nbsp;parameters,&nbsp;so&nbsp;don't&nbsp;expect&nbsp;C++&nbsp;kinds&nbsp;of&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stuff&nbsp;to&nbsp;work&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;o&nbsp;++,&nbsp;--,&nbsp;+=,&nbsp;-=,&nbsp;*=,&nbsp;and&nbsp;/=&nbsp;can&nbsp;behave&nbsp;in&nbsp;strange&nbsp;ways,&nbsp;don't&nbsp;use&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;them&nbsp;in&nbsp;very&nbsp;complicated&nbsp;combinations.&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;o&nbsp;All&nbsp;low-&nbsp;to&nbsp;high-level&nbsp;lpc&nbsp;objects&nbsp;are&nbsp;not&nbsp;held&nbsp;togethor&nbsp;like&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;tradtional&nbsp;program&nbsp;it&nbsp;is&nbsp;closer&nbsp;to&nbsp;writing&nbsp;a&nbsp;module&nbsp;for&nbsp;a&nbsp;large&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;program&nbsp;and&nbsp;using&nbsp;a&nbsp;incremental&nbsp;compilor&nbsp;apon&nbsp;each&nbsp;module&nbsp;independant&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;of&nbsp;all&nbsp;other&nbsp;modules&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;o&nbsp;Lpc&nbsp;is&nbsp;tokinised&nbsp;and&nbsp;interpreted,&nbsp;not&nbsp;compiled.&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;o&nbsp;-&gt;&nbsp;is&nbsp;not&nbsp;used&nbsp;for&nbsp;membership,&nbsp;in&nbsp;fact&nbsp;there&nbsp;are&nbsp;no&nbsp;such&nbsp;thing&nbsp;as&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;structs&nbsp;in&nbsp;lpc.&nbsp;<BR>
&nbsp;<BR>
︰<I>::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::&nbsp;</I><BR>
&nbsp;<BR>
In&nbsp;article&nbsp;&lt;<A HREF="mailto:1991Sep21.170218.5667@bronze.ucs.indiana.edu>">1991Sep21.170218.5667@bronze.ucs.indiana.edu></A>&nbsp;<A HREF="mailto:kellehe@silver.ucs.ini">kellehe@silver.ucs.ini</A>&nbsp;<BR>
ana.edu&nbsp;(Mike&nbsp;Kelleher)&nbsp;writes:&nbsp;<BR>
＞<I>&nbsp;</I><BR>
＞<I>Most&nbsp;silly&nbsp;3.0&nbsp;questions,&nbsp;I&nbsp;hope&nbsp;there&nbsp;getting&nbsp;more&nbsp;intelligent&nbsp;as&nbsp;we&nbsp;go&nbsp;</I><BR>
＞<I>allong.&nbsp;Does&nbsp;anybody&nbsp;have&nbsp;a&nbsp;suggestions&nbsp;as&nbsp;a&nbsp;whole&nbsp;for&nbsp;secuirty&nbsp;measures&nbsp;in&nbsp;</I><BR>
＞<I>3.0?&nbsp;There&nbsp;are&nbsp;several&nbsp;calls&nbsp;like&nbsp;Get_rootid&nbsp;that&nbsp;really&nbsp;bother&nbsp;me.&nbsp;</I><BR>
＞<I>anyone&nbsp;got&nbsp;some&nbsp;suggestions?&nbsp;</I><BR>
&nbsp;<BR>
The&nbsp;name&nbsp;'root'&nbsp;has&nbsp;nothing&nbsp;to&nbsp;do&nbsp;with&nbsp;the&nbsp;login&nbsp;name&nbsp;'root'&nbsp;on&nbsp;unix&nbsp;<BR>
systems.&nbsp;The&nbsp;only&nbsp;common&nbsp;thing&nbsp;is&nbsp;the&nbsp;spelling.&nbsp;<BR>
&nbsp;<BR>
The&nbsp;3.0&nbsp;has&nbsp;a&nbsp;new&nbsp;security&nbsp;system,&nbsp;which&nbsp;is&nbsp;not&nbsp;used&nbsp;if&nbsp;-o&nbsp;is&nbsp;specified&nbsp;!&nbsp;<BR>
&nbsp;<BR>
The&nbsp;new&nbsp;security&nbsp;system&nbsp;has&nbsp;been&nbsp;inspired&nbsp;by&nbsp;the&nbsp;Unix&nbsp;way&nbsp;of&nbsp;handling&nbsp;<BR>
user&nbsp;id&nbsp;(uid)&nbsp;and&nbsp;effective&nbsp;user&nbsp;id&nbsp;(euid),&nbsp;but&nbsp;is&nbsp;not&nbsp;exactly&nbsp;the&nbsp;same.&nbsp;<BR>
&nbsp;<BR>
Every&nbsp;object&nbsp;will&nbsp;have&nbsp;a&nbsp;uid&nbsp;and&nbsp;a&nbsp;euid.&nbsp;&nbsp;It&nbsp;is&nbsp;the&nbsp;euid&nbsp;that&nbsp;governs&nbsp;what&nbsp;<BR>
permissions&nbsp;the&nbsp;object&nbsp;will&nbsp;have.&nbsp;The&nbsp;euid&nbsp;can&nbsp;be&nbsp;changed.&nbsp;<BR>
&nbsp;<BR>
The&nbsp;game&nbsp;driver&nbsp;only&nbsp;maintains&nbsp;these&nbsp;two&nbsp;values,&nbsp;represented&nbsp;as&nbsp;strings.&nbsp;It&nbsp;<BR>
is&nbsp;the&nbsp;master.c&nbsp;that&nbsp;defines&nbsp;what&nbsp;they&nbsp;mean.&nbsp;The&nbsp;values&nbsp;can&nbsp;be&nbsp;any&nbsp;string,&nbsp;<BR>
but&nbsp;one&nbsp;good&nbsp;way&nbsp;is&nbsp;to&nbsp;use&nbsp;the&nbsp;name&nbsp;of&nbsp;the&nbsp;wizard.&nbsp;<BR>
&nbsp;<BR>
When&nbsp;an&nbsp;object&nbsp;wants&nbsp;to&nbsp;access&nbsp;a&nbsp;file,&nbsp;valid_read&nbsp;(or&nbsp;valid_write)&nbsp;will&nbsp;<BR>
be&nbsp;called&nbsp;in&nbsp;master.c,&nbsp;which&nbsp;will&nbsp;make&nbsp;a&nbsp;decision&nbsp;depending&nbsp;on&nbsp;the&nbsp;path&nbsp;<BR>
name&nbsp;of&nbsp;the&nbsp;file&nbsp;and&nbsp;the&nbsp;euid.&nbsp;The&nbsp;2.4.5&nbsp;game&nbsp;driver&nbsp;called&nbsp;the&nbsp;valid_read&nbsp;in&nbsp;<BR>
player.c,&nbsp;which&nbsp;was&nbsp;quite&nbsp;bad&nbsp;when&nbsp;there&nbsp;were&nbsp;no&nbsp;&quot;current&nbsp;player&quot;.&nbsp;<BR>
&nbsp;<BR>
The&nbsp;euid&nbsp;can&nbsp;be&nbsp;changed&nbsp;to&nbsp;only&nbsp;some&nbsp;other&nbsp;values&nbsp;by&nbsp;the&nbsp;object,&nbsp;but&nbsp;always&nbsp;<BR>
to&nbsp;the&nbsp;value&nbsp;of&nbsp;the&nbsp;uid.&nbsp;This&nbsp;is&nbsp;also&nbsp;defined&nbsp;by&nbsp;the&nbsp;master.c&nbsp;object.&nbsp;<BR>
&nbsp;<BR>
There&nbsp;is&nbsp;no&nbsp;set-uid&nbsp;as&nbsp;in&nbsp;Unix,&nbsp;but&nbsp;there&nbsp;is&nbsp;a&nbsp;possibility&nbsp;to&nbsp;transfer&nbsp;<BR>
your&nbsp;euid&nbsp;to&nbsp;another&nbsp;objects&nbsp;uid.&nbsp;If&nbsp;object&nbsp;A&nbsp;do&nbsp;seteuid(0),&nbsp;then&nbsp;any&nbsp;<BR>
object&nbsp;B&nbsp;can&nbsp;do&nbsp;export_uid(A)&nbsp;which&nbsp;will&nbsp;set&nbsp;the&nbsp;uid&nbsp;of&nbsp;A&nbsp;to&nbsp;the&nbsp;euid&nbsp;<BR>
of&nbsp;B.&nbsp;<BR>
&nbsp;<BR>
There&nbsp;are&nbsp;some&nbsp;special&nbsp;rules&nbsp;(which&nbsp;I&nbsp;won't&nbsp;list&nbsp;here)&nbsp;which&nbsp;define&nbsp;what&nbsp;<BR>
happens&nbsp;when&nbsp;an&nbsp;object&nbsp;makes&nbsp;another&nbsp;object&nbsp;become&nbsp;loaded.&nbsp;These&nbsp;rules&nbsp;are&nbsp;<BR>
currently&nbsp;hard-coded&nbsp;in&nbsp;the&nbsp;game&nbsp;driver,&nbsp;but&nbsp;will&nbsp;probably&nbsp;also&nbsp;be&nbsp;transfered&nbsp;<BR>
to&nbsp;master.c.&nbsp;In&nbsp;general,&nbsp;a&nbsp;loaded&nbsp;object&nbsp;either&nbsp;gets&nbsp;the&nbsp;same&nbsp;uid&nbsp;as&nbsp;the&nbsp;euid&nbsp;<BR>
of&nbsp;the&nbsp;loader,&nbsp;or&nbsp;0&nbsp;(means&nbsp;no&nbsp;permission).&nbsp;<BR>
&nbsp;<BR>
This&nbsp;new&nbsp;security&nbsp;system&nbsp;is&nbsp;in&nbsp;many&nbsp;ways&nbsp;compatible&nbsp;with&nbsp;the&nbsp;old&nbsp;system.&nbsp;The&nbsp;<BR>
big&nbsp;difference&nbsp;is&nbsp;that&nbsp;when&nbsp;a&nbsp;wizard&nbsp;A&nbsp;makes&nbsp;a&nbsp;room&nbsp;be&nbsp;loaded&nbsp;that&nbsp;was&nbsp;defined&nbsp;<BR>
by&nbsp;wizard&nbsp;B,&nbsp;then&nbsp;you&nbsp;don't&nbsp;want&nbsp;that&nbsp;room&nbsp;to&nbsp;have&nbsp;uid&nbsp;A.&nbsp;Instead,&nbsp;it&nbsp;will&nbsp;<BR>
have&nbsp;0,&nbsp;which&nbsp;means&nbsp;that&nbsp;it&nbsp;must&nbsp;set&nbsp;the&nbsp;euid&nbsp;to&nbsp;something&nbsp;to&nbsp;be&nbsp;able&nbsp;to&nbsp;<BR>
do&nbsp;any&nbsp;file&nbsp;access.&nbsp;This&nbsp;might&nbsp;seem&nbsp;arduos,&nbsp;but&nbsp;as&nbsp;all&nbsp;new&nbsp;mudlib&nbsp;systems&nbsp;<BR>
are&nbsp;defined&nbsp;in&nbsp;a&nbsp;hierarchical&nbsp;way,&nbsp;a&nbsp;single&nbsp;line&nbsp;in&nbsp;a&nbsp;single&nbsp;file&nbsp;will&nbsp;<BR>
(should&nbsp;:-)&nbsp;do&nbsp;it.&nbsp;<BR>
&nbsp;<BR>
There&nbsp;are&nbsp;some&nbsp;interesting&nbsp;problems&nbsp;resulting&nbsp;from&nbsp;this.&nbsp;For&nbsp;example,&nbsp;a&nbsp;<BR>
player.c&nbsp;object&nbsp;can't&nbsp;call&nbsp;save_object()&nbsp;without&nbsp;preparations&nbsp;because&nbsp;it&nbsp;<BR>
doesn't&nbsp;normally&nbsp;have&nbsp;permission&nbsp;to&nbsp;modifiy&nbsp;player&nbsp;save&nbsp;files.&nbsp;<BR>
&nbsp;<BR>
This&nbsp;is&nbsp;solved&nbsp;by&nbsp;talking&nbsp;with&nbsp;the&nbsp;master.c.&nbsp;The&nbsp;player&nbsp;object&nbsp;first&nbsp;sets&nbsp;its&nbsp;<BR>
euid&nbsp;to&nbsp;0,&nbsp;then&nbsp;calls&nbsp;a&nbsp;special&nbsp;request&nbsp;function&nbsp;in&nbsp;master.c&nbsp;which&nbsp;will&nbsp;<BR>
give&nbsp;the&nbsp;player&nbsp;object&nbsp;the&nbsp;&quot;root&quot;&nbsp;uid.&nbsp;Now,&nbsp;the&nbsp;object&nbsp;can&nbsp;do&nbsp;the&nbsp;save,&nbsp;<BR>
set&nbsp;back&nbsp;to&nbsp;euid&nbsp;0&nbsp;and&nbsp;return&nbsp;control&nbsp;to&nbsp;master.c.&nbsp;Of&nbsp;course,&nbsp;the&nbsp;master.c&nbsp;<BR>
will&nbsp;validate&nbsp;that&nbsp;it&nbsp;is&nbsp;actually&nbsp;the&nbsp;player&nbsp;object,&nbsp;not&nbsp;something&nbsp;<BR>
made&nbsp;by&nbsp;a&nbsp;wizard.&nbsp;<BR>
&nbsp;<BR>
Even&nbsp;if&nbsp;an&nbsp;object&nbsp;has&nbsp;euid&nbsp;&quot;root&quot;,&nbsp;it&nbsp;can't&nbsp;access&nbsp;files&nbsp;outside&nbsp;the&nbsp;<BR>
mudlib&nbsp;directory.&nbsp;This&nbsp;is&nbsp;never&nbsp;ever&nbsp;supposed&nbsp;to&nbsp;be&nbsp;possible.&nbsp;<BR>
&nbsp;<BR>
The&nbsp;wizlist&nbsp;modifications&nbsp;are&nbsp;now&nbsp;based&nbsp;on&nbsp;the&nbsp;uid&nbsp;of&nbsp;the&nbsp;object.&nbsp;That&nbsp;means&nbsp;<BR>
that&nbsp;&quot;root&quot;&nbsp;can&nbsp;show&nbsp;up,&nbsp;as&nbsp;well&nbsp;as&nbsp;&quot;backbone&quot;.&nbsp;<BR>
&nbsp;<BR>
Lars&nbsp;Pensj|&nbsp;<BR>
<A HREF="mailto:lars@cd.chalmers.se">lars@cd.chalmers.se</A>&nbsp;<BR>
&nbsp;<BR>
︰<I>::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::&nbsp;</I><BR>
&nbsp;<BR>
Types&nbsp;declarations&nbsp;<BR>
&nbsp;<BR>
Types&nbsp;can&nbsp;be&nbsp;used&nbsp;at&nbsp;four&nbsp;places:&nbsp;Declaring&nbsp;type&nbsp;of&nbsp;global&nbsp;&nbsp;vari-&nbsp;<BR>
ables.&nbsp;&nbsp;Declaring&nbsp;type&nbsp;of&nbsp;functions.&nbsp;&nbsp;Declaring&nbsp;type&nbsp;of&nbsp;arguments&nbsp;<BR>
to&nbsp;functions.&nbsp;&nbsp;Declaring&nbsp;type&nbsp;of&nbsp;local&nbsp;&nbsp;variables&nbsp;&nbsp;to&nbsp;&nbsp;functions.&nbsp;<BR>
Normally,&nbsp;&nbsp;the&nbsp;type&nbsp;information&nbsp;is&nbsp;completely&nbsp;ignored,&nbsp;and&nbsp;can&nbsp;be&nbsp;<BR>
regarded&nbsp;purely&nbsp;sa&nbsp;documentation.&nbsp;&nbsp;However,&nbsp;when&nbsp;the&nbsp;&nbsp;basic&nbsp;&nbsp;type&nbsp;<BR>
of&nbsp;&nbsp;a&nbsp;function&nbsp;is&nbsp;declared,&nbsp;then&nbsp;a&nbsp;more&nbsp;strict&nbsp;type&nbsp;checking&nbsp;will&nbsp;<BR>
be&nbsp;enforced.&nbsp;&nbsp;That&nbsp;means&nbsp;that&nbsp;the&nbsp;type&nbsp;of&nbsp;all&nbsp;arguments&nbsp;&nbsp;must&nbsp;&nbsp;be&nbsp;<BR>
defined.&nbsp;&nbsp;&nbsp;And,&nbsp;the&nbsp;variables&nbsp;can&nbsp;only&nbsp;be&nbsp;used&nbsp;to&nbsp;store&nbsp;values&nbsp;of&nbsp;<BR>
the&nbsp;declared&nbsp;type.&nbsp;&nbsp;The&nbsp;function&nbsp;is&nbsp;defined&nbsp;to&nbsp;return&nbsp;&nbsp;an&nbsp;&nbsp;unkown&nbsp;<BR>
type,&nbsp;&nbsp;as&nbsp;&nbsp;the&nbsp;compiler&nbsp;can't&nbsp;know&nbsp;the&nbsp;type.&nbsp;&nbsp;This&nbsp;value&nbsp;must&nbsp;al-&nbsp;<BR>
ways&nbsp;be&nbsp;casted&nbsp;(when&nbsp;strict&nbsp;type&nbsp;checking&nbsp;is&nbsp;enabled).&nbsp;&nbsp;Casting&nbsp;a&nbsp;<BR>
type&nbsp;is&nbsp;done&nbsp;by&nbsp;putting&nbsp;the&nbsp;type&nbsp;name&nbsp;inside&nbsp;a&nbsp;pair&nbsp;of&nbsp;'('&nbsp;and&nbsp;An&nbsp;<BR>
example&nbsp;when&nbsp;querying&nbsp;the&nbsp;short&nbsp;description&nbsp;of&nbsp;an&nbsp;object:&nbsp;<BR>
(string)call_other(ob,&nbsp;&quot;short&quot;);&nbsp;<BR>
There&nbsp;are&nbsp;two&nbsp;kinds&nbsp;of&nbsp;types.&nbsp;&nbsp;Basic&nbsp;types,&nbsp;&nbsp;and&nbsp;&nbsp;special&nbsp;&nbsp;types.&nbsp;<BR>
There&nbsp;&nbsp;can&nbsp;&nbsp;be&nbsp;&nbsp;at&nbsp;most&nbsp;one&nbsp;basic&nbsp;type,&nbsp;but&nbsp;any&nbsp;number&nbsp;of&nbsp;special&nbsp;<BR>
types.&nbsp;&nbsp;The&nbsp;strict&nbsp;type&nbsp;checking&nbsp;is&nbsp;only&nbsp;used&nbsp;&nbsp;by&nbsp;&nbsp;the&nbsp;&nbsp;compiler,&nbsp;<BR>
not&nbsp;&nbsp;by&nbsp;&nbsp;the&nbsp;&nbsp;runtime.&nbsp;&nbsp;Hence,&nbsp;it&nbsp;is&nbsp;actually&nbsp;possible&nbsp;to&nbsp;store&nbsp;a&nbsp;<BR>
number&nbsp;in&nbsp;a&nbsp;string&nbsp;variable&nbsp;even&nbsp;when&nbsp;strict&nbsp;type&nbsp;checking&nbsp;is&nbsp;en-&nbsp;<BR>
abled.&nbsp;<BR>
&nbsp;<BR>
Why&nbsp;use&nbsp;strict&nbsp;type&nbsp;checking&nbsp;?&nbsp;&nbsp;It&nbsp;is&nbsp;really&nbsp;recommended,&nbsp;because&nbsp;<BR>
the&nbsp;&nbsp;compiler&nbsp;&nbsp;will&nbsp;&nbsp;find&nbsp;many&nbsp;errors&nbsp;at&nbsp;compile&nbsp;time,&nbsp;which&nbsp;will&nbsp;<BR>
save&nbsp;a&nbsp;lot&nbsp;of&nbsp;hard&nbsp;work.&nbsp;&nbsp;It&nbsp;is&nbsp;in&nbsp;general&nbsp;much&nbsp;harder&nbsp;&nbsp;to&nbsp;&nbsp;trace&nbsp;<BR>
an&nbsp;&nbsp;error&nbsp;&nbsp;occuring&nbsp;at&nbsp;run&nbsp;time.&nbsp;&nbsp;I&nbsp;recommend,&nbsp;that&nbsp;when&nbsp;a&nbsp;wizard&nbsp;<BR>
is&nbsp;having&nbsp;problem&nbsp;with&nbsp;an&nbsp;object&nbsp;and&nbsp;wants&nbsp;help,&nbsp;&nbsp;that&nbsp;&nbsp;he&nbsp;&nbsp;first&nbsp;<BR>
must&nbsp;make&nbsp;all&nbsp;functions&nbsp;have&nbsp;declared&nbsp;types.&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
Basic&nbsp;types&nbsp;<BR>
&nbsp;<BR>
An&nbsp;integer&nbsp;32&nbsp;bit&nbsp;number.&nbsp;&nbsp;&nbsp;Pointer&nbsp;&nbsp;to&nbsp;&nbsp;an&nbsp;&nbsp;object.&nbsp;&nbsp;&nbsp;An&nbsp;&nbsp;object&nbsp;<BR>
pointer&nbsp;&nbsp;can&nbsp;mainly&nbsp;be&nbsp;used&nbsp;for&nbsp;two&nbsp;things.&nbsp;&nbsp;Either&nbsp;giving&nbsp;as&nbsp;ar-&nbsp;<BR>
gument&nbsp;to&nbsp;functions,&nbsp;or&nbsp;used&nbsp;for&nbsp;&nbsp;calling&nbsp;&nbsp;functions&nbsp;&nbsp;defined&nbsp;&nbsp;by&nbsp;<BR>
that&nbsp;object&nbsp;with&nbsp;its&nbsp;specific&nbsp;instance&nbsp;of&nbsp;variables.&nbsp;&nbsp;An&nbsp;unlimit-&nbsp;<BR>
ed&nbsp;string&nbsp;of&nbsp;characters.&nbsp;&nbsp;A&nbsp;lot&nbsp;&nbsp;of&nbsp;&nbsp;operators&nbsp;&nbsp;are&nbsp;&nbsp;allowed&nbsp;&nbsp;for&nbsp;<BR>
strings,&nbsp;like&nbsp;and&nbsp;etc.&nbsp;&nbsp;This&nbsp;type&nbsp;is&nbsp;special,&nbsp;in&nbsp;that&nbsp;it&nbsp;is&nbsp;valid&nbsp;<BR>
to&nbsp;use&nbsp;in&nbsp;any&nbsp;context.&nbsp;&nbsp;Thus,&nbsp;if&nbsp;everything&nbsp;was&nbsp;declared&nbsp;then&nbsp;the&nbsp;<BR>
compiler&nbsp;&nbsp;would&nbsp;&nbsp;never&nbsp;complain.&nbsp;&nbsp;This&nbsp;is&nbsp;of&nbsp;course&nbsp;not&nbsp;the&nbsp;idea.&nbsp;<BR>
It&nbsp;is&nbsp;really&nbsp;only&nbsp;supposed&nbsp;to&nbsp;be&nbsp;used&nbsp;when&nbsp;a&nbsp;variable&nbsp;&nbsp;really&nbsp;&nbsp;is&nbsp;<BR>
going&nbsp;&nbsp;to&nbsp;&nbsp;contain&nbsp;different&nbsp;types&nbsp;of&nbsp;values.&nbsp;&nbsp;This&nbsp;be&nbsp;avoided&nbsp;if&nbsp;<BR>
possible.&nbsp;&nbsp;It&nbsp;is&nbsp;good&nbsp;coding&nbsp;practice,&nbsp;to&nbsp;allow&nbsp;&nbsp;a&nbsp;&nbsp;function&nbsp;&nbsp;for&nbsp;<BR>
example&nbsp;&nbsp;to&nbsp;return&nbsp;different&nbsp;types.&nbsp;&nbsp;This&nbsp;type&nbsp;is&nbsp;only&nbsp;usable&nbsp;for&nbsp;<BR>
functions.&nbsp;&nbsp;It&nbsp;means&nbsp;that&nbsp;the&nbsp;function&nbsp;will&nbsp;not&nbsp;return&nbsp;any&nbsp;value.&nbsp;<BR>
The&nbsp;compiler&nbsp;will&nbsp;complain&nbsp;(when&nbsp;type&nbsp;checking&nbsp;is&nbsp;enabled)&nbsp;if&nbsp;the&nbsp;<BR>
return&nbsp;value&nbsp;is&nbsp;used.&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
Arrays&nbsp;<BR>
&nbsp;<BR>
Arrays&nbsp;are&nbsp;declared&nbsp;using&nbsp;a&nbsp;'*'&nbsp;with&nbsp;a&nbsp;basic&nbsp;type.&nbsp;&nbsp;For&nbsp;&nbsp;example,&nbsp;<BR>
declaring&nbsp;&nbsp;an&nbsp;array&nbsp;of&nbsp;numbers:&nbsp;&quot;int&nbsp;*arr;&quot;.&nbsp;&nbsp;Use&nbsp;the&nbsp;type&nbsp;if&nbsp;you&nbsp;<BR>
want&nbsp;an&nbsp;array&nbsp;of&nbsp;arrays,&nbsp;or&nbsp;a&nbsp;mixed&nbsp;combination&nbsp;of&nbsp;types.&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
Special&nbsp;types&nbsp;<BR>
&nbsp;<BR>
There&nbsp;are&nbsp;some&nbsp;special&nbsp;types,&nbsp;which&nbsp;can&nbsp;be&nbsp;given&nbsp;before&nbsp;the&nbsp;basic&nbsp;<BR>
type.&nbsp;&nbsp;These&nbsp;special&nbsp;types&nbsp;can&nbsp;also&nbsp;be&nbsp;combined.&nbsp;&nbsp;When&nbsp;using&nbsp;spe-&nbsp;<BR>
cial&nbsp;type&nbsp;before&nbsp;an&nbsp;statement,&nbsp;all&nbsp;symbols&nbsp;defined&nbsp;by&nbsp;inheritance&nbsp;<BR>
will&nbsp;&nbsp;also&nbsp;get&nbsp;the&nbsp;special&nbsp;type&nbsp;The&nbsp;only&nbsp;special&nbsp;case&nbsp;is&nbsp;symbols,&nbsp;<BR>
which&nbsp;can&nbsp;not&nbsp;be&nbsp;redefined&nbsp;as&nbsp;in&nbsp;a&nbsp;statement.&nbsp;&nbsp;Can&nbsp;be&nbsp;&nbsp;given&nbsp;&nbsp;for&nbsp;<BR>
both&nbsp;&nbsp;functions&nbsp;&nbsp;and&nbsp;variables.&nbsp;&nbsp;Functions&nbsp;that&nbsp;are&nbsp;in&nbsp;object&nbsp;can&nbsp;<BR>
not&nbsp;be&nbsp;called&nbsp;through&nbsp;from&nbsp;another&nbsp;object.&nbsp;&nbsp;And,&nbsp;they&nbsp;are&nbsp;not&nbsp;ac-&nbsp;<BR>
cessible&nbsp;&nbsp;to&nbsp;&nbsp;any&nbsp;&nbsp;object&nbsp;that&nbsp;inherits&nbsp;This&nbsp;special&nbsp;type&nbsp;behaves&nbsp;<BR>
different&nbsp;for&nbsp;variables&nbsp;and&nbsp;functions.&nbsp;&nbsp;&nbsp;It&nbsp;&nbsp;is&nbsp;&nbsp;similar&nbsp;&nbsp;to&nbsp;&nbsp;for&nbsp;<BR>
functions,&nbsp;&nbsp;in&nbsp;&nbsp;that&nbsp;&nbsp;they&nbsp;&nbsp;can&nbsp;not&nbsp;be&nbsp;called&nbsp;from&nbsp;other&nbsp;objects.&nbsp;<BR>
variables&nbsp;will&nbsp;be&nbsp;neither&nbsp;saved&nbsp;nor&nbsp;restored&nbsp;when&nbsp;&nbsp;calling&nbsp;&nbsp;or&nbsp;&nbsp;A&nbsp;<BR>
function&nbsp;defined&nbsp;as&nbsp;will&nbsp;always&nbsp;be&nbsp;accessible&nbsp;from&nbsp;other&nbsp;objects,&nbsp;<BR>
even&nbsp;if&nbsp;is&nbsp;used.&nbsp;&nbsp;All&nbsp;symbols&nbsp;defined&nbsp;as&nbsp;can&nbsp;not&nbsp;be&nbsp;redefined&nbsp;&nbsp;by&nbsp;<BR>
inheritance.&nbsp;&nbsp;They&nbsp;can&nbsp;still&nbsp;be&nbsp;used&nbsp;and&nbsp;accessed&nbsp;as&nbsp;usual.&nbsp;<BR>
&nbsp;<BR>
︰<I>::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::&nbsp;</I><BR>
&nbsp;<BR>
--&nbsp;<BR>
小樓一夜聽秋雨&nbsp;<BR>
--&nbsp;<BR>
佇倚危樓風細細&nbsp;望極春愁&nbsp;黯黯生天際&nbsp;&nbsp;草色煙光殘照裡&nbsp;無言誰會憑欄意[0&nbsp;<BR>
擬把疏狂圖一醉&nbsp;對酒當歌&nbsp;強樂還無味&nbsp;&nbsp;衣帶漸寬終不悔&nbsp;為伊消得人憔悴&nbsp;<BR>
&nbsp;<BR>
※&nbsp;來源:•BBS&nbsp;水木清華站&nbsp;bbs.net.tsinghua.edu.cn•[FROM:&nbsp;166.111.5.25]&nbsp;<BR>
<A HREF="00000003.htm">上一篇</A>
<A HREF='javascript:history.go(-1)'>返回上一頁</A>
<A HREF="index.htm">回到目錄</A>
<A HREF="#top">回到頁首</A>
<A HREF="00000005.htm">下一篇</A>
</H1></CENTER>
<CENTER><H1>BBS水木清華站︰精華區</H1></CENTER>
</BODY></HTML>