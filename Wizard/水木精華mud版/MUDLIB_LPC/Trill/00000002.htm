<HTML>
<HEAD>
<TITLE>BBS水木清華站︰精華區</TITLE>
</HEAD>
<BODY>
<CENTER><H1>BBS水木清華站︰精華區</H1></CENTER>
<A Name="top"></a>
發信人:&nbsp;nerd&nbsp;(快樂的感覺永遠一樣),&nbsp;信區:&nbsp;Mud_Builder&nbsp;<BR>
標&nbsp;&nbsp;題:&nbsp;Lpc的數據類型(1)&nbsp;<BR>
發信站:&nbsp;BBS&nbsp;水木清華站&nbsp;(Wed&nbsp;Apr&nbsp;&nbsp;8&nbsp;09:32:43&nbsp;1998)&nbsp;<BR>
&nbsp;<BR>
發信人:&nbsp;maht&nbsp;(Trill),&nbsp;信區:&nbsp;creator&nbsp;<BR>
標&nbsp;&nbsp;題:&nbsp;Lpc的數據類型(1)&nbsp;<BR>
發信站:&nbsp;天地創造&nbsp;(Tue&nbsp;Oct&nbsp;14&nbsp;19:00:27&nbsp;1997),&nbsp;轉信&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第二章&nbsp;Lpc的數據類型。&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第一節&nbsp;序言&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;Lpc的Object是由零個或更多一些的被一個或一個以上函數操縱&nbsp;<BR>
控制的變量組成的。在代碼中函數排列的順序是不影響Object的特&nbsp;<BR>
性，但是影響代碼的可讀性。當你寫的那個Object被第一次調用時，&nbsp;<BR>
Driver將你寫的代碼裝入內存。當每一個Object被調入內存時，所&nbsp;<BR>
有的變量是沒有值的。create()這個函數被調用來初始化Object的&nbsp;<BR>
值。create()這個函數在Object裝入內存後立即被調用。在你讀本&nbsp;<BR>
文時可能對編程一無所知，你可能不知道什麼是函數以及它是怎麼&nbsp;<BR>
調用的；或許你有了一些編程的經驗，你可能對一個新創建的Object&nbsp;<BR>
的函數相互調用過程是怎樣開始感到迷惑。在這些困惑得到解決之&nbsp;<BR>
前，你更有必要了解的是這些函數操縱控制的到底是什麼東西。所&nbsp;<BR>
以你最好先來讀讀這一章：Lpc的數據類型。可以這麼說，幾乎90％&nbsp;<BR>
的錯誤（包括丟失{}和()）是由於錯誤的使用Lpc的數據類型。我認&nbsp;<BR>
為真正理解這一章能幫助你更容易的編程。&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第二節&nbsp;讓計算機理解你&nbsp;<BR>
2.1&nbsp;計算機語言&nbsp;<BR>
&nbsp;&nbsp;眾所周知的計算機懂得的語言實際上由“0”和“1”組成的機器&nbsp;<BR>
碼。計算機根本不懂得人類的自然語言，實際上它也不懂得我們使&nbsp;<BR>
用的高級語言，比如BASIC，C，C++，Pascal等等。這些高級語言&nbsp;<BR>
能讓我們更容易的實現我們的想法。但是這些高級語言最終都要被&nbsp;<BR>
翻譯成“0”和“1”組成的計算機語言。&nbsp;<BR>
&nbsp;&nbsp;有兩種方法能把高級語言翻譯成計算機語言：編譯和解釋。編譯&nbsp;<BR>
類的在程序寫完之後用一個編譯器將其翻譯成計算機語言。編譯在&nbsp;<BR>
程序執行之前就完成了。解釋類的翻譯的過程在程序執行時進行。&nbsp;<BR>
由於解釋類的語言程序是邊執行邊解釋，所以一般都要比編譯編譯&nbsp;<BR>
執行的慢。&nbsp;<BR>
&nbsp;&nbsp;不管是哪種語言，他們最終都要被翻譯成0和1。但是變量，那些&nbsp;<BR>
你存在內存裡面的變量，卻不可能只是0和1。&nbsp;<BR>
所以你必須有一種你&nbsp;<BR>
使用的那種編程語言裡面的方法來告訴計算機這些0和1應該被當做&nbsp;<BR>
整數還是字符，或者是字符串，或者別的什麼東西。這樣就必須使&nbsp;<BR>
用到數據類型。&nbsp;<BR>
&nbsp;<BR>
2.2&nbsp;數據類型&nbsp;<BR>
&nbsp;&nbsp;一個簡單的例子：你現在有了一個變量，你把它叫做‘x’並且&nbsp;<BR>
賦予它一個十進制整數值65。在Lpc你可以這樣的語句來做這件事：&nbsp;<BR>
&nbsp;<BR>
------&nbsp;<BR>
x&nbsp;=&nbsp;65;&nbsp;<BR>
------&nbsp;<BR>
&nbsp;<BR>
接著你可以做像下面這樣的事：&nbsp;<BR>
&nbsp;<BR>
-----&nbsp;<BR>
write(x&nbsp;+&nbsp;&quot;\n&quot;);&nbsp;<BR>
y&nbsp;=&nbsp;x&nbsp;+&nbsp;5;&nbsp;<BR>
-----&nbsp;<BR>
第一行把65和字母&quot;a&quot;輸出到屏幕上&nbsp;<BR>
第二行把70這個值賦於變量y&nbsp;<BR>
對計算機來說有個問題:它不知道你所說的&nbsp;x&nbsp;=&nbsp;65;中的65什麼意思.&nbsp;<BR>
你認為是65,但是計算機可能認為是:&nbsp;<BR>
00000000000000000000000001000001&nbsp;<BR>
但是,對計算機來說,字母'A'也是被當做:&nbsp;<BR>
00000000000000000000000001000001&nbsp;<BR>
所以,當你想讓計算機明白&nbsp;write(&nbsp;x&nbsp;+&nbsp;&quot;\n&quot;&nbsp;);,&nbsp;它必須有一種方法&nbsp;<BR>
知道你想看到的是65而不是'A'.&nbsp;<BR>
&nbsp;&nbsp;計算機就是通過數據類型來區分65和'A'.&nbsp;一種數據類型簡單的說就&nbsp;<BR>
是在內存的某處,&nbsp;那裡代表了或者說指向某個給定的變量,&nbsp;這些內存&nbsp;<BR>
儲存的數據是什麼類型的.&nbsp;每個LPC的變量都必須有它對應的變量類型.&nbsp;<BR>
在上面給的例子,&nbsp;本應在那些代碼之前有下面一行:&nbsp;<BR>
&nbsp;<BR>
-----&nbsp;<BR>
int&nbsp;x;&nbsp;<BR>
----&nbsp;<BR>
&nbsp;<BR>
這一行告訴Driver&nbsp;x應該指向什麼類型的值,&nbsp;它應該被當做數據類型'int'&nbsp;<BR>
來使用.&nbsp;'int'&nbsp;是一個32位的整數.&nbsp;到這裡,&nbsp;你應該有數據類型的基本&nbsp;<BR>
印像,&nbsp;以及為什麼必須有數據類型.&nbsp;他們可以讓Driver知道計算機存在&nbsp;<BR>
內存裡面的'0'和'1'到底是什麼東西.&nbsp;<BR>
2.3&nbsp;Lpc的數據類型&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;所有的LpMud的Driver都會有以下的數據類型：&nbsp;<BR>
&nbsp;<BR>
void,&nbsp;int,&nbsp;string,&nbsp;object,&nbsp;mixed,&nbsp;int&nbsp;*,&nbsp;string&nbsp;*,&nbsp;<BR>
object&nbsp;*,&nbsp;mixed&nbsp;*&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;大多數的Driver都會有下面這些重要的數據類型：&nbsp;<BR>
&nbsp;<BR>
float,&nbsp;mapping,&nbsp;float&nbsp;*,&nbsp;mapping&nbsp;*&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;有一些Driver同時還支持下面這些數據類型：&nbsp;<BR>
&nbsp;<BR>
function,&nbsp;struct,&nbsp;class,&nbsp;char&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;特別的有MudOS支持的數據類型：(以v22pre8為例)&nbsp;<BR>
&nbsp;<BR>
void,&nbsp;int,&nbsp;string,&nbsp;object,&nbsp;float,&nbsp;mapping,&nbsp;function,&nbsp;<BR>
class,&nbsp;mixed,&nbsp;int&nbsp;*,&nbsp;string&nbsp;*,&nbsp;object&nbsp;*,&nbsp;float&nbsp;*,&nbsp;<BR>
mapping&nbsp;*,&nbsp;function&nbsp;*,&nbsp;class&nbsp;*,&nbsp;mixed&nbsp;*&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(待續)&nbsp;<BR>
&nbsp;<BR>
--&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;回頭望&nbsp;&nbsp;每個人都看這世事無常&nbsp;&nbsp;&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;向前闖&nbsp;&nbsp;一顆心比誰都還要堅強&nbsp;&nbsp;&nbsp;<BR>
&nbsp;<BR>
※&nbsp;來源:•BBS&nbsp;水木清華站&nbsp;bbs.net.tsinghua.edu.cn•[FROM:&nbsp;166.111.5.42]&nbsp;<BR>
<A HREF="00000001.htm">上一篇</A>
<A HREF='javascript:history.go(-1)'>返回上一頁</A>
<A HREF="index.htm">回到目錄</A>
<A HREF="#top">回到頁首</A>
<A HREF="00000003.htm">下一篇</A>
</H1></CENTER>
<CENTER><H1>BBS水木清華站︰精華區</H1></CENTER>
</BODY></HTML>