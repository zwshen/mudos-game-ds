<HTML>
<HEAD>
<TITLE>BBS水木清華站︰精華區</TITLE>
</HEAD>
<BODY>
<CENTER><H1>BBS水木清華站︰精華區</H1></CENTER>
<A Name="top"></a>
發信人:&nbsp;nerd&nbsp;(快樂的感覺永遠一樣),&nbsp;信區:&nbsp;Mud_Builder&nbsp;<BR>
標&nbsp;&nbsp;題:&nbsp;Lpc程序和編程環境&nbsp;<BR>
發信站:&nbsp;BBS&nbsp;水木清華站&nbsp;(Wed&nbsp;Apr&nbsp;&nbsp;8&nbsp;09:26:38&nbsp;1998)&nbsp;<BR>
&nbsp;<BR>
發信人:&nbsp;maht&nbsp;(Trill),&nbsp;信區:&nbsp;creator&nbsp;<BR>
標&nbsp;&nbsp;題:&nbsp;Lpc程序和編程環境&nbsp;<BR>
發信站:&nbsp;天地創造&nbsp;(Tue&nbsp;Oct&nbsp;&nbsp;7&nbsp;21:07:59&nbsp;1997),&nbsp;轉信&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第一章&nbsp;Lpc程序和編程環境&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第一節，編程環境&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;通常我們所見到的Mud大多是LpMud。LpMuds使用Unix的指令和&nbsp;<BR>
文件結構。如果你對Unix有所了解，那麼LpMud中的一些指令和它的&nbsp;<BR>
文件結構與普通的Unix基本一樣。如果你從未使用過Unix，那麼它&nbsp;<BR>
Dos不同的是在文件的路徑用&quot;/&quot;，而不是Dos的&quot;\&quot;.&nbsp;<BR>
一個典型的LpMud的文件是這樣的:&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;/clone/player/player.c&nbsp;<BR>
&quot;/clone/player/&quot;是路徑，player.c是文件名。&nbsp;<BR>
在多數的LpMud中，下面這些的基本的Unix指令是可以使用的：&nbsp;<BR>
pwd,&nbsp;cd,&nbsp;ls,&nbsp;rm,&nbsp;mv,&nbsp;cp,&nbsp;mkdir,&nbsp;rmdir,&nbsp;more,&nbsp;tail,&nbsp;cat,&nbsp;ed&nbsp;<BR>
如果從未使用過Unix，那麼下面這張表也許是有用的。&nbsp;<BR>
pwd:&nbsp;顯示當前目錄&nbsp;<BR>
cd:&nbsp;改換你當前的工作目錄，和Dos的cd一樣。&nbsp;<BR>
ls:&nbsp;列出指定目錄下的所有文件，如果沒有指定任何目錄，那就列&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;出當前目錄底下的文件。和Dos的dir一樣。&nbsp;<BR>
rm:&nbsp;刪除一個文件&nbsp;和Dos的rmdir一樣&nbsp;<BR>
mv:&nbsp;從命名一個文件&nbsp;和Dos的move一樣&nbsp;<BR>
cp:&nbsp;復制一個文件&nbsp;和Dos的copy一樣&nbsp;<BR>
mkdir:&nbsp;創建一個目錄&nbsp;<BR>
rmdir:&nbsp;刪除一個目錄&nbsp;<BR>
more:&nbsp;按頁顯示一個文件在你的當前屏幕。&nbsp;<BR>
cat:&nbsp;顯示整個文件。和Dos的type一樣。&nbsp;<BR>
tail:&nbsp;現在一個文件的結尾幾行。&nbsp;<BR>
ed:&nbsp;允許你使用Mud自帶的編輯器，編輯一個文件。&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第二節&nbsp;Lpc程序&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
2.1&nbsp;Lpc程序。&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Lpc的程序看起來和一般的C區別不斷大，語法基本一樣，但是&nbsp;<BR>
Lpc和一般的語言有著根本的不同，Lpc程序是編寫一個一個的&quot;Object&quot;。&nbsp;<BR>
這有什麼區別呢？一般的程序是在執行過程中，通常有一個明顯的&nbsp;<BR>
開始和和結束。程序從一個地方開始，然後順序執行下去，到了結&nbsp;<BR>
束的地方就中斷了。Lpc的Object不是這樣的。&nbsp;<BR>
&nbsp;&nbsp;&nbsp;所謂的不同的Mud，實際上是一些不同的Lpc的Object在一個Driver&nbsp;<BR>
的上的各種不同的表現。也就說，Lpc的Object是運行在一個Driver&nbsp;<BR>
上的。這些Object組成了LpMud的豐富多彩的世界。Driver幾乎不參&nbsp;<BR>
與創建你所接觸到的世界，它所完成的工作只是讓那些Lpc的Object&nbsp;<BR>
活動起來。Lpc的Object可能沒有明顯的開始和結束的標誌，它可能&nbsp;<BR>
永遠在工作。&nbsp;&nbsp;和一般的程序一樣，Lpc“程序”也是由一個或多個&nbsp;<BR>
文件組成。一個Lpc的Object是按如下方式被執行的：Driver把和這&nbsp;<BR>
個Object相關的文件讀入內存，然後解釋執行。但是要記住的是，&nbsp;<BR>
讀入內存，並不是說，它就開始按順序執行。&nbsp;<BR>
&nbsp;<BR>
2.2&nbsp;Driver和Mudlib關係&nbsp;<BR>
&nbsp;&nbsp;在有些遊戲中，整個遊戲包括Driver和遊戲世界都用C寫好，這樣&nbsp;<BR>
能快一些，但是遊戲的擴充性很差，巫師們不可能在遊戲進行中添&nbsp;<BR>
加任何東西。LpMud則相反。Driver理論上應該和玩家所接觸的世界&nbsp;<BR>
幾乎沒有任何直接的聯繫。遊戲世界應該是自己獨立的，而且是“即&nbsp;<BR>
玩即加”的。這就是為什麼LpMud使用Lpc作為編程語言的原因。它&nbsp;<BR>
允許你創建一個遊戲世界，再由Driver在需要時讀入解釋執行。Lpc&nbsp;<BR>
甚至比C更簡單，更容易明白，但是它可以創建一個可以讓許多人在&nbsp;<BR>
上面遊戲的世界。&nbsp;<BR>
&nbsp;&nbsp;在你寫完一個Lpc的文件時，它存在於主機的硬盤上。在遊戲進行&nbsp;<BR>
中，當需要整個Object時，這份文件將被調入內存，一個特殊的函&nbsp;<BR>
數被調用來初始化這個Object的一些變量。現在你不用關心什麼是&nbsp;<BR>
變量，什麼是函數以及遊戲本身怎樣來調用這個object，你只要記&nbsp;<BR>
住Driver從硬盤中讀入一個文件，然後放在內存中，如果沒有任何&nbsp;<BR>
錯誤的話。&nbsp;<BR>
&nbsp;<BR>
2.3&nbsp;一個Object被裝人內存。&nbsp;<BR>
&nbsp;&nbsp;一個Object不會也不必有一個特點的地方讓Driver去執行它，通&nbsp;<BR>
常Drvier會在Object中找一個地方去初始化它。一般都是這個函數&nbsp;<BR>
叫做create()。&nbsp;<BR>
&nbsp;&nbsp;Lpc的Object是一些變量(它的值能變化)和函數(函數通常是用來&nbsp;<BR>
操縱那些變量的一段程序)的組合。函數操縱變量的方式有：調用&nbsp;<BR>
其他函數，使用Driver內部定義的函數(efun)，基本的Lpc表達式&nbsp;<BR>
以及流控制。&nbsp;<BR>
&nbsp;&nbsp;我們來看個變量的例子:&nbsp;wiz_level。這個變量記錄你的巫師等&nbsp;<BR>
級，如果是0呢，通常是普普通通的玩家了。這個值如果越大就表&nbsp;<BR>
示你的巫師等級越高。這個也同時控制了你能不能執行一些巫師&nbsp;<BR>
指令。基本上來說，一個Object就是一些變量“堆”在一起的東&nbsp;<BR>
西。一個Object改變了，也就是某一個或者一些變量改變了。&nbsp;<BR>
&nbsp;&nbsp;總的來說，一個Object如果要被內存中的另一個Object調用，&nbsp;<BR>
Driver會去找這個Object的那堆變量放在哪裡，如果這些變量沒&nbsp;<BR>
有值，那麼Driver會調用一個特定的函數create來初始化這些變&nbsp;<BR>
量。&nbsp;<BR>
&nbsp;&nbsp;但是create()不是Lpc代碼開始執行的地方，只是大多數的Object&nbsp;<BR>
從這裡開始。事實上，create()可以不存在。如果這個Object不&nbsp;<BR>
需要對變量初始化，那麼create()可以不存在。那麼這樣的Object&nbsp;<BR>
開始執行的地方就完全的不同於一般的Object，可以從任何地方開&nbsp;<BR>
始。&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;那麼究竟什麼是Lpc的Object？Lpc的Object就是一堆變量的集合，&nbsp;<BR>
它帶有一個或者更多的函數來操縱控制這些變量，函數的排列順序&nbsp;<BR>
是無所謂的，隨便那個排在前面對這個Object的特性沒有影響。&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(待續)&nbsp;<BR>
&nbsp;<BR>
--&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;回頭望&nbsp;&nbsp;每個人都看這世事無常&nbsp;&nbsp;&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;向前闖&nbsp;&nbsp;一顆心比誰都還要堅強&nbsp;&nbsp;&nbsp;<BR>
&nbsp;<BR>
※&nbsp;來源:•BBS&nbsp;水木清華站&nbsp;bbs.net.tsinghua.edu.cn•[FROM:&nbsp;166.111.5.42]&nbsp;<BR>
<A HREF='javascript:history.go(-1)'>返回上一頁</A>
<A HREF="index.htm">回到目錄</A>
<A HREF="#top">回到頁首</A>
<A HREF="00000001.htm">下一篇</A>
</H1></CENTER>
<CENTER><H1>BBS水木清華站︰精華區</H1></CENTER>
</BODY></HTML>