<HTML>
<HEAD>
<TITLE>BBS水木清華站︰精華區</TITLE>
</HEAD>
<BODY>
<CENTER><H1>BBS水木清華站︰精華區</H1></CENTER>
<A Name="top"></a>
發信人:&nbsp;nerd&nbsp;(快樂的感覺永遠一樣),&nbsp;信區:&nbsp;Mud_Builder&nbsp;<BR>
標&nbsp;&nbsp;題:&nbsp;Lpc的函數(1)&nbsp;<BR>
發信站:&nbsp;BBS&nbsp;水木清華站&nbsp;(Wed&nbsp;Apr&nbsp;&nbsp;8&nbsp;09:35:02&nbsp;1998)&nbsp;<BR>
&nbsp;<BR>
發信人:&nbsp;maht&nbsp;(Trill),&nbsp;信區:&nbsp;creator&nbsp;<BR>
標&nbsp;&nbsp;題:&nbsp;Lpc的函數(1)&nbsp;<BR>
發信站:&nbsp;天地創造&nbsp;(Wed&nbsp;Oct&nbsp;22&nbsp;20:15:10&nbsp;1997),&nbsp;轉信&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第三章&nbsp;Lpc的函數&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第一節&nbsp;序言&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;在前面的介紹中，大家應該知道了Lpc的Object包含能處理變量的函數。&nbsp;<BR>
當函數被執行時，它的工作就是處理操作變量，還有是調用(call)別的函&nbsp;<BR>
數。變量在函數中被改變操作。變量必須有個數據類型使得計算機能明白&nbsp;<BR>
它指向的內存中&quot;0&quot;和&quot;1&quot;到底是什麼東西。一個Object的性質通常由它的&nbsp;<BR>
包含的變量確定，但是它的特性的表現卻是依賴於它包含的函數。一個&nbsp;<BR>
Object如果不含有任何一個函數那是不可想像的。那麼：什麼是函數。&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第二節&nbsp;函數&nbsp;<BR>
&nbsp;<BR>
2.1&nbsp;什麼是函數？&nbsp;<BR>
&nbsp;&nbsp;和數學的函數一樣，你給Lpc的函數一個值，它能返回一個值。有些語&nbsp;<BR>
言，比如Pascal，會區分過程和函數。Lpc和C/C++一樣，沒有過程，但是&nbsp;<BR>
明白這種區別還是有用的。Pascal叫做過程的東西，Lpc叫做類型是void&nbsp;<BR>
的函數。換句話說，過程就是什麼都不返回的函數。Pascal叫做函數的，&nbsp;<BR>
必須返回一些東西。在Lpc中，最無聊的，最簡單的，但也是正確的函數&nbsp;<BR>
是這樣的：&nbsp;<BR>
&nbsp;<BR>
-----&nbsp;<BR>
void&nbsp;eventDoNothing()&nbsp;{}&nbsp;<BR>
-----&nbsp;<BR>
&nbsp;<BR>
這個函數不接收任何輸入，不執行指令，也不返回任何值。&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;每一個Lpc函數都由三部分組成：&nbsp;<BR>
1)&nbsp;函數聲明&nbsp;<BR>
2)&nbsp;函數定義&nbsp;<BR>
3)&nbsp;函數調用&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;和變量一樣，函數必須先有個聲明。這樣可以讓Driver知道：&nbsp;<BR>
&nbsp;&nbsp;1)&nbsp;這個函數將返回的是哪種數據類型。&nbsp;<BR>
&nbsp;&nbsp;2)&nbsp;需要的輸入是什麼，多少。通常把輸入叫做參數。&nbsp;<BR>
&nbsp;&nbsp;一個函數聲明通常是這樣的：&nbsp;<BR>
類型&nbsp;函數名(參數1,&nbsp;參數2,&nbsp;...,&nbsp;參數N);&nbsp;<BR>
&nbsp;&nbsp;下面是一個函數聲明的例子，這個函數叫&nbsp;DrinkWater，有一個string&nbsp;<BR>
類型的參數，返回的是一個int。&nbsp;<BR>
&nbsp;<BR>
-----&nbsp;<BR>
int&nbsp;eventDrinkWater(string&nbsp;str);&nbsp;<BR>
-----&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;在上面的聲明中,&nbsp;str是輸入的參數的變量名，也可以沒有。就是說可以&nbsp;<BR>
像下面這樣聲明&nbsp;eventDrinkWater()&nbsp;<BR>
&nbsp;<BR>
-----&nbsp;<BR>
int&nbsp;eventDrinkWater(string);&nbsp;<BR>
-----&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;函數定義就是代碼，它描述了這個函數對傳人的參數究竟做了些什麼。&nbsp;<BR>
&nbsp;&nbsp;函數調用就是別的函數在任何地方使用執行了這個函數。一個函數在它&nbsp;<BR>
寫完後永遠不會被調用，那這個函數的存在的唯一意義只能是浪費內存和&nbsp;<BR>
硬盤。一個函數寫出來的目的是為了被調用。&nbsp;<BR>
&nbsp;&nbsp;下面是兩個函數相互調用的例子，兩個函數是&nbsp;eventPrintValue()&nbsp;和&nbsp;<BR>
add(),&nbsp;<BR>
&nbsp;<BR>
-----&nbsp;<BR>
/*&nbsp;首先是函數聲明，這個通常是在一個Object的開始部分。&nbsp;<BR>
&nbsp;*/&nbsp;<BR>
&nbsp;<BR>
void&nbsp;eventPrintValue();&nbsp;<BR>
int&nbsp;add(int&nbsp;x,&nbsp;int&nbsp;y);&nbsp;<BR>
&nbsp;<BR>
/*&nbsp;其次是函數&nbsp;write_vals()&nbsp;的函數定義。我們假定這個函數將被調用&nbsp;<BR>
&nbsp;*&nbsp;是為了描述這個Object.&nbsp;<BR>
&nbsp;*/&nbsp;<BR>
void&nbsp;eventPrintValue()&nbsp;<BR>
{&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;x;&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;=&nbsp;add(2,&nbsp;2);&nbsp;//&nbsp;我們指定&nbsp;x&nbsp;接收調用函數&nbsp;add()&nbsp;後返回的值。&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;write(x&nbsp;+&nbsp;&quot;\n&quot;);&nbsp;<BR>
}&nbsp;<BR>
&nbsp;<BR>
/*&nbsp;最後是函數&nbsp;add()&nbsp;的函數定義。&nbsp;*/&nbsp;<BR>
int&nbsp;add(int&nbsp;x,&nbsp;int&nbsp;y)&nbsp;<BR>
{&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(x&nbsp;+&nbsp;y);&nbsp;<BR>
}&nbsp;<BR>
-----&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;有一點是指明的，在XO的編程的風格我們要求所有的函數都必須有聲&nbsp;<BR>
明，這個在我們最開始時候說明過。但是實際上必須有函數聲明的函數&nbsp;<BR>
是那些被調用在函數定義之前的函數。我們規定必須有函數聲明，這個&nbsp;<BR>
只是規定，但是它會給編程帶來好處。&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;在這一節我們知道什麼是函數，函數是由什麼組成。要記住，寫一個&nbsp;<BR>
函數的根本目的是為用它，調用它。一個函數永遠不會被調用，那它就&nbsp;<BR>
失去了存在的價值。通常別人使用你寫的函數，通常只關心它能對傳人&nbsp;<BR>
的參數做些什麼加工，就是這個函數的功能是什麼，返回什麼。因此一&nbsp;<BR>
個函數有一個好的函數名，能直接描述這個函數的功能是很重要的。我&nbsp;<BR>
在第一章中說明了XO規定的對函數的命名機制。採用統一的命名方式有&nbsp;<BR>
助於相互合作提高效率。&nbsp;<BR>
&nbsp;<BR>
2.2&nbsp;Efuns&nbsp;<BR>
&nbsp;&nbsp;也許你已經聽說過efun這個詞了，他們是外部定義的函數，是&nbsp;<BR>
externally&nbsp;defined&nbsp;function&nbsp;的縮寫。就是說，他們是由Mud&nbsp;Driver&nbsp;<BR>
定義好的。如果參加過Lpc的編程，或者看過Lpc的代碼，你可能找到這&nbsp;<BR>
樣的一些表達式：this_player(),&nbsp;strcmp(),&nbsp;implode(),&nbsp;filter()，&nbsp;<BR>
等等，看起來像是一個函數，而你找遍整個Object以及這個Object繼承&nbsp;<BR>
的所有Object中都沒有這些函數，這就表明他們是efun。efun存在價值&nbsp;<BR>
是因為他們執行起來要比一般的Object帶有的函數速度快的多，為什麼&nbsp;<BR>
快呢，因為他們是以計算機直接能理解的二進制的形式存在。對於Object&nbsp;<BR>
內部定義的函數，我們通常叫他們是lfun(local&nbsp;function)。一個巫師&nbsp;<BR>
主要工作也就是編寫一些lfun組成的Object。&nbsp;<BR>
&nbsp;&nbsp;在上面的例子中的&nbsp;eventPrintValue()&nbsp;中調用了兩個函數，第一個是&nbsp;<BR>
函數&nbsp;add(),&nbsp;這個是有你聲明和定義的，這個就是lfun。第二次調用，&nbsp;<BR>
是調用函數&nbsp;write()&nbsp;這個函數通常就是efun。Driver已經替你聲明和定&nbsp;<BR>
義好了。你所要做只是調用它。&nbsp;<BR>
&nbsp;&nbsp;efun被創立是為了&nbsp;<BR>
&nbsp;&nbsp;1)&nbsp;處理一些很常用的，每天都有許多函數會調用的。&nbsp;<BR>
&nbsp;&nbsp;2)&nbsp;處理internet&nbsp;socket的輸入輸出。&nbsp;<BR>
&nbsp;&nbsp;3)&nbsp;以及一些Lpc很難處理的事，畢竟Lpc是C的很小的子集。&nbsp;<BR>
&nbsp;&nbsp;efun是用C寫好的，內嵌在Driver裡面的。在Mud起來之前，和Driver&nbsp;<BR>
一起編譯好的，他們執行起來會快的多。但是正和你期望的一樣，他們&nbsp;<BR>
的調用和你寫的函數的調用方法是完全一樣的。總的來說，需要關心的&nbsp;<BR>
和一般函數一樣，它需要傳入什麼參數，它將會返回什麼的東西。&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;怎樣得到一些efun的信息，比如傳入參數和返回的類型，通常在一個&nbsp;<BR>
Mud裡面，你可以在類似這樣的&nbsp;/doc/efun&nbsp;的目錄底下找到，或者直接&nbsp;<BR>
用&nbsp;help&nbsp;&lt;efun名&gt;&nbsp;指令就可以得到幫助。efun及其依賴於你所在的Mud&nbsp;<BR>
的Driver，不同的Driver帶有的efun區別是很大。&nbsp;<BR>
&nbsp;&nbsp;對於XO，使用的是MudOS，一般的efun，只要用&nbsp;help&nbsp;指令就能得到&nbsp;<BR>
幫助，或者你多看看源碼，看看別人是怎樣使用的，當然你如果無論如&nbsp;<BR>
何也不能明白一個efun，你可以問問大巫師，他們通常會很樂意和你探&nbsp;<BR>
討的。但是有一點是指出，能自己解決的問題最好自己解決。&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(待續)&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
--&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;回頭望&nbsp;&nbsp;每個人都看這世事無常&nbsp;&nbsp;&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;向前闖&nbsp;&nbsp;一顆心比誰都還要堅強&nbsp;&nbsp;&nbsp;<BR>
&nbsp;<BR>
※&nbsp;來源:•BBS&nbsp;水木清華站&nbsp;bbs.net.tsinghua.edu.cn•[FROM:&nbsp;166.111.5.42]&nbsp;<BR>
<A HREF="00000003.htm">上一篇</A>
<A HREF='javascript:history.go(-1)'>返回上一頁</A>
<A HREF="index.htm">回到目錄</A>
<A HREF="#top">回到頁首</A>
<A HREF="00000005.htm">下一篇</A>
</H1></CENTER>
<CENTER><H1>BBS水木清華站︰精華區</H1></CENTER>
</BODY></HTML>