<HTML>
<HEAD>
<TITLE>BBS水木清華站︰精華區</TITLE>
</HEAD>
<BODY>
<CENTER><H1>BBS水木清華站︰精華區</H1></CENTER>
<A Name="top"></a>
發信人:&nbsp;sorceress&nbsp;(李大善人~~~以德服人),&nbsp;信區:&nbsp;Mud_Builder&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>
標&nbsp;&nbsp;題:&nbsp;Allegro&nbsp;中譯文檔(3D&nbsp;數學例程)&nbsp;(轉載)&nbsp;<BR>
發信站:&nbsp;BBS&nbsp;水木清華站&nbsp;(Mon&nbsp;Jun&nbsp;12&nbsp;20:59:47&nbsp;2000)&nbsp;<BR>
&nbsp;<BR>
【&nbsp;以下文字轉載自&nbsp;GAME_Designer&nbsp;討論區&nbsp;】&nbsp;<BR>
【&nbsp;原文由&nbsp;cloudwu&nbsp;所發表&nbsp;】&nbsp;<BR>
3D&nbsp;數學例程&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;identity_matrix&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;identity_matrix_f&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;get_translation_matrix&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;get_translation_matrix_f&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;get_scaling_matrix&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;get_scaling_matrix_f&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;get_x_rotate_matrix&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;get_x_rotate_matrix_f&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;get_y_rotate_matrix&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;get_y_rotate_matrix_f&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;get_z_rotate_matrix&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;get_z_rotate_matrix_f&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;get_rotation_matrix&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;get_rotation_matrix_f&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;get_align_matrix&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;get_align_matrix_f&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;get_vector_rotation_matrix&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;get_vector_rotation_matrix_f&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;get_transformation_matrix&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;get_transformation_matrix_f&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;get_camera_matrix&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;get_camera_matrix_f&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtranslate_matrix&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtranslate_matrix_f&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qscale_matrix&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qscale_matrix_f&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;matrix_mul&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;matrix_mul_f&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vector_length&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vector_length_f&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;normalize_vector&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;normalize_vector_f&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dot_product&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dot_product_f&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cross_product&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cross_product_f&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;polygon_z_normal&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;polygon_z_normal_f&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;apply_matrix&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;apply_matrix_f&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set_projection_viewport&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;persp_project&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;persp_project_f&nbsp;&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
Allegro&nbsp;提供了一些3D函數用來控制向量,&nbsp;構造並且使用變換矩陣,&nbsp;而且提供了從&nbsp;3&nbsp;維&nbsp;<BR>
世&nbsp;<BR>
界到&nbsp;2&nbsp;維屏幕的透視投影變換功能.&nbsp;它不是,&nbsp;也永遠不會是一個功能強勁的&nbsp;3D&nbsp;庫&nbsp;(我&nbsp;<BR>
的&nbsp;<BR>
目的是建立一個擁有基本功能的函數庫,&nbsp;而不是一整套簡陋的圖像代碼&nbsp;:-)&nbsp;但這些函數&nbsp;<BR>
對&nbsp;<BR>
用戶開發自己的&nbsp;3D&nbsp;代碼還是有用的.&nbsp;&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
每個&nbsp;3D&nbsp;函數都有兩套版本:&nbsp;一個使用定點算法,&nbsp;一個使用浮點算法.&nbsp;兩個版本的句法基&nbsp;<BR>
本&nbsp;<BR>
相同,&nbsp;只是浮點函數和結構都有一個&nbsp;'_f'&nbsp;後綴.&nbsp;舉例來說,&nbsp;定點&nbsp;corss_product()&nbsp;函&nbsp;<BR>
數&nbsp;<BR>
的浮點版本是corss_product_f().&nbsp;如果用戶使用C++,&nbsp;則&nbsp;Allegro&nbsp;將重載這些函數以便&nbsp;<BR>
配&nbsp;<BR>
合與'fix'類使用.&nbsp;&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
3D&nbsp;變換函數是提供變換矩陣來實現.&nbsp;該矩陣是一個4x4的數組,&nbsp;其中包含的數據可與3D點&nbsp;<BR>
相&nbsp;<BR>
乘來產生一個不同的&nbsp;3D&nbsp;點.&nbsp;正確設置該矩陣可以產生諸如偏移,旋轉,縮放等不同的操作&nbsp;<BR>
.&nbsp;&nbsp;<BR>
&nbsp;<BR>
更美妙的是可以相乘兩個矩陣來產生第三個矩陣,&nbsp;這和分別使用兩個矩陣來實現變換的效&nbsp;<BR>
果&nbsp;<BR>
是相同的.&nbsp;比如說,&nbsp;如果用戶旋轉一個點後在偏移該點,&nbsp;用戶可以將旋轉矩陣和偏移矩陣&nbsp;<BR>
相&nbsp;<BR>
乘來產生一個混合矩陣來一次完成這兩種變換.&nbsp;使用該方法可以產生一個任意複雜的變換&nbsp;<BR>
矩&nbsp;<BR>
陣.&nbsp;只需要將每個點乘單個矩陣.&nbsp;&nbsp;<BR>
&nbsp;<BR>
Allegro在實現矩陣結構時使用了一些小技巧.&nbsp;旋轉和縮放矩陣可通過一個簡單的3x3的矩&nbsp;<BR>
陣&nbsp;<BR>
來完成.&nbsp;但偏移和投影變換必須使用4x4的矩陣,&nbsp;而且每個點的坐標也通過加一個坐標量&nbsp;<BR>
而&nbsp;<BR>
擴展成&nbsp;4維,&nbsp;w=1.&nbsp;這樣會降低效率,&nbsp;但是幸運的是我們有優化的辦法.以下是一個4x4的&nbsp;<BR>
矩&nbsp;<BR>
陣:&nbsp;&nbsp;<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;(&nbsp;a,&nbsp;b,&nbsp;c,&nbsp;d&nbsp;)&nbsp;<BR>
&nbsp;&nbsp;&nbsp;(&nbsp;e,&nbsp;f,&nbsp;g,&nbsp;h&nbsp;)&nbsp;<BR>
&nbsp;&nbsp;&nbsp;(&nbsp;i,&nbsp;j,&nbsp;k,&nbsp;l&nbsp;)&nbsp;<BR>
&nbsp;&nbsp;&nbsp;(&nbsp;m,&nbsp;n,&nbsp;o,&nbsp;p&nbsp;)&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
左上方的&nbsp;3x3&nbsp;矩陣用來實現旋轉和縮放.最右邊一列的&nbsp;d,&nbsp;h,&nbsp;和l&nbsp;用來實現偏移.&nbsp;如果&nbsp;<BR>
矩&nbsp;<BR>
陣只用來作仿射變換,&nbsp;則m,&nbsp;n&nbsp;和&nbsp;o&nbsp;總是&nbsp;0,&nbsp;p總是1.&nbsp;如果你不知道什麼是仿射,&nbsp;請閱讀&nbsp;<BR>
&nbsp;<BR>
Foley&nbsp;&amp;&nbsp;Van&nbsp;Damme:&nbsp;一般來說它包含縮放&nbsp;,偏移,&nbsp;旋轉,&nbsp;但不包含投影.&nbsp;因為&nbsp;Allegro&nbsp;&nbsp;<BR>
使&nbsp;<BR>
用一個獨立的函數來實現投影,&nbsp;所以矩陣函數只需支持仿射變換,&nbsp;也就是說無需在矩陣的&nbsp;<BR>
最&nbsp;<BR>
底下一行存儲其他數據.&nbsp;Allegro將默認矩陣的最下一行為&nbsp;(0,&nbsp;0,&nbsp;0,&nbsp;1),&nbsp;並相應的優化&nbsp;<BR>
操&nbsp;<BR>
作矩陣的函數.&nbsp;&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
矩陣存儲在下列結構中.&nbsp;&nbsp;<BR>
&nbsp;<BR>
typedef&nbsp;struct&nbsp;MATRIX&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;定點矩陣結構&nbsp;<BR>
{&nbsp;<BR>
&nbsp;&nbsp;&nbsp;fixed&nbsp;v[3][3];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;3x3的縮放和旋轉組件&nbsp;<BR>
&nbsp;&nbsp;&nbsp;fixed&nbsp;t[3];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;x/y/z&nbsp;偏移矩陣&nbsp;<BR>
}&nbsp;MATRIX;&nbsp;<BR>
&nbsp;<BR>
typedef&nbsp;struct&nbsp;MATRIX_f&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;浮點矩陣結構&nbsp;<BR>
{&nbsp;<BR>
&nbsp;&nbsp;&nbsp;float&nbsp;v[3][3];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;3x3縮放和旋轉組件&nbsp;<BR>
&nbsp;&nbsp;&nbsp;float&nbsp;t[3];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;x/y/z&nbsp;偏移矩陣&nbsp;<BR>
}&nbsp;MATRIX_f&nbsp;<BR>
&nbsp;<BR>
extern&nbsp;MATRIX&nbsp;identity_matrix;&nbsp;<BR>
extern&nbsp;MATRIX_f&nbsp;identity_matrix_f;&nbsp;<BR>
一個表明&nbsp;'什麼也不做'&nbsp;的單位矩陣.&nbsp;一個矩陣與單位矩陣相乘得到原來的矩陣.&nbsp;&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
void&nbsp;get_translation_matrix(MATRIX&nbsp;*m,&nbsp;fixed&nbsp;x,&nbsp;fixed&nbsp;y,&nbsp;fixed&nbsp;z);&nbsp;<BR>
void&nbsp;get_translation_matrix_f(MATRIX_f&nbsp;*m,&nbsp;float&nbsp;x,&nbsp;float&nbsp;y,&nbsp;float&nbsp;z);&nbsp;<BR>
構造一個偏移矩陣,&nbsp;並將其存放在&nbsp;m&nbsp;中.&nbsp;當該矩陣和向量(px,&nbsp;py,&nbsp;pz),&nbsp;相乘後將得到&nbsp;<BR>
一&nbsp;<BR>
個&nbsp;(px+x,&nbsp;py+y,&nbsp;pz+z)&nbsp;向量.&nbsp;也就是將原向量向某一方向平移.&nbsp;&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
void&nbsp;get_scaling_matrix(MATRIX&nbsp;*m,&nbsp;fixed&nbsp;x,&nbsp;fixed&nbsp;y,&nbsp;fixed&nbsp;z);&nbsp;<BR>
void&nbsp;get_scaling_matrix_f(MATRIX_f&nbsp;*m,&nbsp;float&nbsp;x,&nbsp;float&nbsp;y,&nbsp;float&nbsp;z);&nbsp;<BR>
構造一個縮放矩陣,&nbsp;將其存放在&nbsp;m&nbsp;中.&nbsp;當該矩陣與向量&nbsp;(px,&nbsp;py,&nbsp;pz)&nbsp;相乘後得到一個&nbsp;<BR>
&nbsp;<BR>
(px*x,&nbsp;py*y,&nbsp;pz*z)向量.&nbsp;即將原向量進行縮放.&nbsp;&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
void&nbsp;get_x_rotate_matrix(MATRIX&nbsp;*m,&nbsp;fixed&nbsp;r);&nbsp;<BR>
void&nbsp;get_x_rotate_matrix_f(MATRIX_f&nbsp;*m,&nbsp;float&nbsp;r);&nbsp;<BR>
構造一個繞&nbsp;X&nbsp;軸旋轉的矩陣,將其存放在&nbsp;m&nbsp;中.&nbsp;當該矩陣與某向量相乘後,&nbsp;將使該向量&nbsp;<BR>
按&nbsp;<BR>
指定的角度繞X軸旋轉(旋轉角度用二進制表示,最多旋轉256度).&nbsp;&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
void&nbsp;get_y_rotate_matrix(MATRIX&nbsp;*m,&nbsp;fixed&nbsp;r);&nbsp;<BR>
void&nbsp;get_y_rotate_matrix_f(MATRIX_f&nbsp;*m,&nbsp;float&nbsp;r);&nbsp;<BR>
構造一個繞Y軸旋轉的矩陣,將其存放在m中.當該矩陣與某向量相乘後,&nbsp;將使該向量按指定&nbsp;<BR>
的&nbsp;<BR>
角度繞&nbsp;Y&nbsp;軸旋轉&nbsp;(旋轉角度用二進制表示,最多旋轉256度).&nbsp;&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
void&nbsp;get_z_rotate_matrix(MATRIX&nbsp;*m,&nbsp;fixed&nbsp;r);&nbsp;<BR>
void&nbsp;get_z_rotate_matrix_f(MATRIX_f&nbsp;*m,&nbsp;float&nbsp;r);&nbsp;<BR>
構造一個繞Z軸旋轉的矩陣,&nbsp;將其存放在&nbsp;m&nbsp;中.&nbsp;當該矩陣與某向量相乘後,&nbsp;將使該向量按&nbsp;<BR>
指&nbsp;<BR>
定的角度繞&nbsp;Z&nbsp;軸旋轉&nbsp;(旋轉角度用二進制表示,&nbsp;最多旋轉256度).&nbsp;&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
void&nbsp;get_rotation_matrix(MATRIX&nbsp;*m,&nbsp;fixed&nbsp;x,&nbsp;fixed&nbsp;y,&nbsp;fixed&nbsp;z);&nbsp;<BR>
void&nbsp;get_rotation_matrix_f(MATRIX_f&nbsp;*m,&nbsp;float&nbsp;x,&nbsp;float&nbsp;y,&nbsp;float&nbsp;z);&nbsp;<BR>
構造一個繞任意坐標軸旋轉的矩陣.&nbsp;當該矩陣與某向量相乘後,&nbsp;將使該向量按指定的角度&nbsp;<BR>
繞&nbsp;<BR>
任意坐標軸軸旋轉&nbsp;(旋轉角度用二進制表示,&nbsp;最多旋轉&nbsp;256&nbsp;度).&nbsp;&nbsp;<BR>
&nbsp;<BR>
void&nbsp;get_align_matrix(MATRIX&nbsp;*m,&nbsp;fixed&nbsp;xfront,&nbsp;yfront,&nbsp;zfront,&nbsp;fixed&nbsp;xup,&nbsp;&nbsp;<BR>
fixed&nbsp;yup,&nbsp;fixed&nbsp;zup);&nbsp;<BR>
旋轉一個矩陣使其與指定的坐標向量對齊&nbsp;(它們不需被規格化或垂直,&nbsp;但&nbsp;up&nbsp;和&nbsp;front&nbsp;&nbsp;<BR>
必&nbsp;<BR>
須相等).&nbsp;一個(1,&nbsp;0,&nbsp;0)的&nbsp;front&nbsp;向量和一個&nbsp;(0,&nbsp;1,&nbsp;0)&nbsp;的&nbsp;up&nbsp;向量將返回一個單位矩&nbsp;<BR>
&nbsp;<BR>
陣.&nbsp;&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
void&nbsp;get_align_matrix_f(MATRIX&nbsp;*m,&nbsp;float&nbsp;xfront,&nbsp;yfront,&nbsp;zfront,&nbsp;float&nbsp;xup,&nbsp;&nbsp;<BR>
yup,&nbsp;zup);&nbsp;<BR>
get_align_matrix()&nbsp;的浮點版本.&nbsp;&nbsp;<BR>
&nbsp;<BR>
void&nbsp;get_vector_rotation_matrix(MATRIX&nbsp;*m,&nbsp;fixed&nbsp;x,&nbsp;y,&nbsp;z,&nbsp;fixed&nbsp;a);&nbsp;<BR>
void&nbsp;get_vector_rotation_matrix_f(MATRIX_f&nbsp;*m,&nbsp;float&nbsp;x,&nbsp;y,&nbsp;z,&nbsp;float&nbsp;a);&nbsp;<BR>
構造一個按指定角度&nbsp;(二進制表示,最多旋轉256度)&nbsp;圍繞x,&nbsp;y,&nbsp;z&nbsp;向量旋轉的變換矩陣.&nbsp;&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
void&nbsp;get_transformation_matrix(MATRIX&nbsp;*m,&nbsp;fixed&nbsp;scale,&nbsp;fixed&nbsp;xrot,&nbsp;yrot,&nbsp;&nbsp;<BR>
zrot,&nbsp;x,&nbsp;y,&nbsp;z);&nbsp;<BR>
構造一個按指定角度&nbsp;(二進制表示,最多旋轉256度)&nbsp;圍繞任意三個軸旋轉,&nbsp;將結果進行縮&nbsp;<BR>
放&nbsp;<BR>
(將&nbsp;scale&nbsp;設置成1,如果不需縮放),&nbsp;並且平移到&nbsp;x,y,z&nbsp;位置的矩陣.&nbsp;&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
void&nbsp;get_transformation_matrix_f(MATRIX_f&nbsp;*m,&nbsp;float&nbsp;scale,&nbsp;float&nbsp;xrot,&nbsp;yrot,&nbsp;&nbsp;<BR>
zrot,&nbsp;x,&nbsp;y,&nbsp;z);&nbsp;<BR>
get_transformation_matrix()&nbsp;的浮點版本.&nbsp;&nbsp;<BR>
&nbsp;<BR>
void&nbsp;get_camera_matrix(MATRIX&nbsp;*m,&nbsp;fixed&nbsp;x,&nbsp;y,&nbsp;z,&nbsp;xfront,&nbsp;yfront,&nbsp;zfront,&nbsp;&nbsp;<BR>
fixed&nbsp;xup,&nbsp;yup,&nbsp;zup,&nbsp;fov,&nbsp;<BR>
aspect);&nbsp;<BR>
構造一個從世界坐標系變換到標準化的觀察坐標系的變換矩陣,&nbsp;並做好相應的投影變換&nbsp;<BR>
.&nbsp;<BR>
x,y,z參數指定觀察點(或照像機)在世界坐標系中的位置,&nbsp;xfront,&nbsp;yfront,&nbsp;和&nbsp;zfront&nbsp;&nbsp;<BR>
參&nbsp;<BR>
數為&nbsp;'in&nbsp;front'&nbsp;矢量,&nbsp;指定觀察點的方向,&nbsp;(這些向量可以是任意長短;不需標準化),&nbsp;<BR>
xup,&nbsp;yup,&nbsp;和&nbsp;zup&nbsp;是&nbsp;'up'&nbsp;方向向量.&nbsp;fov參數指明視角大小&nbsp;(照相機的焦距寬度),&nbsp;該&nbsp;<BR>
參&nbsp;<BR>
數是一個二進制值,&nbsp;最多到256度.&nbsp;在一個一般的投影變換中,&nbsp;視角一般在32度到48度之&nbsp;<BR>
間.&nbsp;<BR>
最後,&nbsp;aspect&nbsp;參數是用來將圖像的&nbsp;Y&nbsp;方向尺寸相對其&nbsp;X&nbsp;方向尺寸進行縮放.&nbsp;(設置成&nbsp;&nbsp;<BR>
1&nbsp;,&nbsp;<BR>
則不進行縮放).&nbsp;&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
void&nbsp;get_camera_matrix_f(MATRIX_f&nbsp;*m,&nbsp;float&nbsp;x,&nbsp;y,&nbsp;z,&nbsp;xfront,&nbsp;yfront,&nbsp;zfront,&nbsp;&nbsp;<BR>
float&nbsp;xup,&nbsp;yup,&nbsp;zup,&nbsp;fov,&nbsp;<BR>
aspect);&nbsp;<BR>
get_camera_matrix()&nbsp;的浮點版本.&nbsp;&nbsp;<BR>
&nbsp;<BR>
void&nbsp;qtranslate_matrix(MATRIX&nbsp;*m,&nbsp;fixed&nbsp;x,&nbsp;fixed&nbsp;y,&nbsp;fixed&nbsp;z);&nbsp;<BR>
void&nbsp;qtranslate_matrix_f(MATRIX_f&nbsp;*m,&nbsp;float&nbsp;x,&nbsp;float&nbsp;y,&nbsp;float&nbsp;z);&nbsp;<BR>
對一個以生成的矩陣進行偏移變換的優化版本:&nbsp;該函數將自動在矩陣&nbsp;m&nbsp;中進入偏移量,&nbsp;&nbsp;<BR>
所&nbsp;<BR>
以沒必要將兩個矩陣相乘來構造偏移矩陣.&nbsp;&nbsp;<BR>
&nbsp;<BR>
void&nbsp;qscale_matrix(MATRIX&nbsp;*m,&nbsp;fixed&nbsp;scale);&nbsp;<BR>
void&nbsp;qscale_matrix_f(MATRIX_f&nbsp;*m,&nbsp;float&nbsp;scale);&nbsp;<BR>
對一個以生成的矩陣進行縮放變換的優化版本.&nbsp;該函數將自動在矩陣&nbsp;m&nbsp;中進入縮放量,&nbsp;&nbsp;<BR>
所&nbsp;<BR>
以沒必要將兩個矩陣相乘來構造縮放矩陣.&nbsp;&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
void&nbsp;matrix_mul(MATRIX&nbsp;*m1,&nbsp;MATRIX&nbsp;*m2,&nbsp;MATRIX&nbsp;*out);&nbsp;<BR>
void&nbsp;matrix_mul_f(MATRIX_f&nbsp;*m1,&nbsp;MATRIX_f&nbsp;*m2,&nbsp;MATRIX_f&nbsp;*out);&nbsp;<BR>
將兩個矩陣相乘,&nbsp;並將結果存放在&nbsp;out&nbsp;參數中&nbsp;(該參數不能與其他兩個參數所代表的矩&nbsp;<BR>
陣&nbsp;<BR>
相同).&nbsp;結果矩陣和結合&nbsp;m1&nbsp;和&nbsp;m2&nbsp;的效果相同.&nbsp;即:&nbsp;設一點&nbsp;p,&nbsp;(p&nbsp;*&nbsp;out)&nbsp;=&nbsp;((p&nbsp;*&nbsp;&nbsp;<BR>
m1)&nbsp;*&nbsp;<BR>
m2).&nbsp;可以以這個方法改變多次.&nbsp;注意矩陣的乘法不遵守乘法交換律,&nbsp;即:&nbsp;&nbsp;<BR>
matrix_mul(m1,&nbsp;<BR>
m2)&nbsp;!=&nbsp;matrix_mul(m2,&nbsp;m1).&nbsp;&nbsp;<BR>
&nbsp;<BR>
fixed&nbsp;vector_length(fixed&nbsp;x,&nbsp;fixed&nbsp;y,&nbsp;fixed&nbsp;z);&nbsp;<BR>
float&nbsp;vector_length_f(float&nbsp;x,&nbsp;float&nbsp;y,&nbsp;float&nbsp;z);&nbsp;<BR>
計算向量&nbsp;(x,y,z)&nbsp;的長度.&nbsp;使用勾股定理.&nbsp;&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
void&nbsp;normalize_vector(fixed&nbsp;*x,&nbsp;fixed&nbsp;*y,&nbsp;fixed&nbsp;*z);&nbsp;<BR>
void&nbsp;normalize_vector_f(float&nbsp;*x,&nbsp;float&nbsp;*y,&nbsp;float&nbsp;*z);&nbsp;<BR>
將向量&nbsp;(*x,*y,*z)&nbsp;轉換成單位矢量.&nbsp;轉換後的向量與原向量方向相同,&nbsp;但長度為1.&nbsp;&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
fixed&nbsp;dot_product(fixed&nbsp;x1,&nbsp;y1,&nbsp;z1,&nbsp;x2,&nbsp;y2,&nbsp;z2);&nbsp;<BR>
float&nbsp;dot_product_f(float&nbsp;x1,&nbsp;y1,&nbsp;z1,&nbsp;x2,&nbsp;y2,&nbsp;z2);&nbsp;<BR>
點乘向量&nbsp;(x1,y1,z1)&nbsp;和&nbsp;(x2,y2,z2),&nbsp;並返回點乘結果.&nbsp;&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
void&nbsp;cross_product(fixed&nbsp;x1,&nbsp;y1,&nbsp;z1,&nbsp;x2,&nbsp;y2,&nbsp;z2,&nbsp;*xout,&nbsp;*yout,&nbsp;*zout);&nbsp;<BR>
void&nbsp;cross_product_f(float&nbsp;x1,&nbsp;y1,&nbsp;z1,&nbsp;x2,&nbsp;y2,&nbsp;z2,&nbsp;*xout,&nbsp;*yout,&nbsp;*zout);&nbsp;<BR>
計算向量&nbsp;(x1,y1,z1)&nbsp;和&nbsp;(x2,y2,z2)的叉乘,&nbsp;將結果存放在&nbsp;(*xout,&nbsp;*yout,&nbsp;*zout).&nbsp;&nbsp;<BR>
叉&nbsp;<BR>
乘產生一個垂直原來兩個向量的向量,用該方法可以計算一個面的法向量.&nbsp;&nbsp;<BR>
&nbsp;<BR>
fixed&nbsp;polygon_z_normal(V3D&nbsp;*v1,&nbsp;V3D&nbsp;*v2,&nbsp;V3D&nbsp;*v3);&nbsp;<BR>
float&nbsp;polygon_z_normal_f(V3D_f&nbsp;*v1,&nbsp;V3D_f&nbsp;*v2,&nbsp;V3D_f&nbsp;*v3);&nbsp;<BR>
該函數找到指定頂點法向量的&nbsp;Z&nbsp;分量&nbsp;(所指定的頂點必須是凸多邊形的頂點).&nbsp;該函數通&nbsp;<BR>
常&nbsp;<BR>
用來實現背面裁剪.&nbsp;一個封閉多邊形的背面對觀察者來說都是不可見的,&nbsp;所以它們不需要&nbsp;<BR>
顯&nbsp;<BR>
示.通過背面裁剪可以大約可以將一個場景中的多邊形數目減少一半.&nbsp;如果是負值,&nbsp;多邊&nbsp;<BR>
形&nbsp;<BR>
可以安全的被裁減.&nbsp;如果是&nbsp;0,&nbsp;多邊形垂直於屏幕.&nbsp;&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
void&nbsp;apply_matrix(MATRIX&nbsp;*m,&nbsp;fixed&nbsp;x,&nbsp;y,&nbsp;z,&nbsp;*xout,&nbsp;*yout,&nbsp;*zout);&nbsp;<BR>
void&nbsp;apply_matrix_f(MATRIX_f&nbsp;*m,&nbsp;float&nbsp;x,&nbsp;y,&nbsp;z,&nbsp;*xout,&nbsp;*yout,&nbsp;*zout);&nbsp;<BR>
將點(x,y,z)&nbsp;與轉換矩陣&nbsp;m&nbsp;相乘,&nbsp;並把結果存放在&nbsp;(*xout,&nbsp;*yout,&nbsp;*zout)中.&nbsp;&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
void&nbsp;set_projection_viewport(int&nbsp;x,&nbsp;int&nbsp;y,&nbsp;int&nbsp;w,&nbsp;int&nbsp;h);&nbsp;<BR>
設置用來縮放&nbsp;persp_project()&nbsp;函數輸出的視口&nbsp;(Viewport).&nbsp;輸入用戶將要使用的屏幕&nbsp;<BR>
尺&nbsp;<BR>
寸,&nbsp;一般為0,&nbsp;0,&nbsp;SCREEN_W,&nbsp;SCREEN_H.&nbsp;&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
void&nbsp;persp_project(fixed&nbsp;x,&nbsp;y,&nbsp;z,&nbsp;*xout,&nbsp;*yout);&nbsp;<BR>
void&nbsp;persp_project_f(float&nbsp;x,&nbsp;y,&nbsp;z,&nbsp;*xout,&nbsp;*yout);&nbsp;<BR>
將&nbsp;3維坐標中的點&nbsp;(x,&nbsp;y,&nbsp;z)&nbsp;投影變換到2維的屏幕空間,&nbsp;將結果存放在&nbsp;(*xout,&nbsp;&nbsp;<BR>
*yout).&nbsp;<BR>
該函數使用先前通過&nbsp;set_projection_viewport()&nbsp;函數設置的縮放參數.&nbsp;該函數從一個&nbsp;<BR>
標&nbsp;<BR>
準化的視錐投影.&nbsp;所謂標準化的視錐可以看成是放置在原點面朝&nbsp;Z&nbsp;軸正方向的一個照相&nbsp;<BR>
機.&nbsp;<BR>
X&nbsp;軸從左到右,Y&nbsp;軸從上到下,Z&nbsp;軸指向屏幕裡面.&nbsp;該相機有&nbsp;90&nbsp;度的視角,&nbsp;即在&nbsp;x=z,&nbsp;&nbsp;<BR>
-x=z&nbsp;<BR>
平面上的點會被投影到屏幕的左邊界或右邊界,&nbsp;y=z,&nbsp;-y=z屏幕上的點會被投影到屏幕的&nbsp;<BR>
上&nbsp;<BR>
邊界或下邊界.&nbsp;如果用戶想使用不同的視角或照相機位置,&nbsp;則需通過一個適當的視見矩陣&nbsp;<BR>
&nbsp;<BR>
(Viewing&nbsp;Matrix)&nbsp;將所有對像進行變換.&nbsp;也就是說如果想產生一個照相機朝左旋轉&nbsp;10&nbsp;&nbsp;<BR>
度&nbsp;<BR>
的效果,&nbsp;則需將所有對像朝右旋轉10度.&nbsp;&nbsp;<BR>
--&nbsp;<BR>
<A HREF="http://www.cfido.net/cloud">http://www.cfido.net/cloud</A>&nbsp;<BR>
<A HREF="http://computer.igd.edu.cn/~cloud">http://computer.igd.edu.cn/~cloud</A>&nbsp;(無本地文件下栽)&nbsp;<BR>
<A HREF="http://linux.cqi.com.cn/~cloud">http://linux.cqi.com.cn/~cloud</A>&nbsp;&nbsp;<BR>
<A HREF="http://www.netease.comn/~cloudwu">http://www.netease.comn/~cloudwu</A>&nbsp;<BR>
E-mail:&nbsp;<A HREF="mailto:cloudwu@263.net">cloudwu@263.net</A>&nbsp;<BR>
&nbsp;<BR>
※&nbsp;來源:•BBS&nbsp;水木清華站&nbsp;bbs.net.tsinghua.edu.cn•[FROM:&nbsp;202.197.71.16]&nbsp;&nbsp;<BR>
<A HREF="00000047.htm">上一篇</A>
<A HREF='javascript:history.go(-1)'>返回上一頁</A>
<A HREF="index.htm">回到目錄</A>
<A HREF="#top">回到頁首</A>
<A HREF="00000049.htm">下一篇</A>
</H1></CENTER>
<CENTER><H1>BBS水木清華站︰精華區</H1></CENTER>
</BODY></HTML>