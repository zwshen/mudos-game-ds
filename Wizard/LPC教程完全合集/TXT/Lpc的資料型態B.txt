3.4 一些簡單的數據類型 
  在Lpc入門裡面將介紹以下的數據類型: 
void, int, float, string, object, 以及mixed. 對於複雜的數據 
類型比如: mapping, array, 以及一些不常用的類型比如: class, 
function, 我將在Lpc進階介紹. 這一節我們主要介紹三種數據類型: 
int(整型), float(浮點數)和string(字符串). 
 
  一個int(整型)是一個整數, 比如1, 42, -18, 0, -10002938這些 
都是整型. 在MudOS中一個整型是一個32位的整數, 有符號的整數. 
在實際中int得到廣泛的使用, 比如開始介紹變量中的wiz_level, 
再比如生物的天賦, 年齡等都通常都是int(整型). 
  一個float(浮點數)是一個實數, 比如2.034, -102.3453, 0.0, 
1132741034.33這些都是一個浮點數. 在MudOS中一個浮點數也是一個 
32位的實數, 有符號的實數. float通常不常用. 
  在Object的數值性質中, 我們通常也就使用int和float, 甚至只用 
int, 在變量的初始化中int和float自動被賦為0. 但是一般的Driver 
比如MudOS不檢查數值越界的情況, 還要注意的是這裡的int和float 
都是有符號的數, 這兩點要注意. 
  string(字符串)是由一或更多的字符組成, 比如"a", "我是飛鳥!", 
"42", "飛鳥15歲.", "I am Trill.", 這些都是字符串. 注意的是, 
字符串都是被""括起來, 這樣第一能區別像int(整型)42和string(字 
符串)"42", 第二可以區別變量名(比如 room)和同名的字符串(比如 
"room"). string類型的變量在初始化時, 如果沒有顯式的賦於一個 
字符串比如: 空字符串"", 那將是0, 就是一空的指針. 
  作為最基本的數據類型int, float和string, 是一些複雜的數據 
類型的基礎. 對這些數據進行運算和操作的操作符, 將在後面介紹, 
不過Lpc的操作符和一般的C/C++的操作符一致. 只是有一點, 就+ 
Lpc支持string和int或者float直接相加, 比如我們上面提到的: 
 
    write(x + "\n"); 
 
"\n"是一個字符, x是一個整型的變量, 在Lpc解釋執行中, 自動將 
x代表的數值轉化成一個字符串, 然後把兩個字符串接在一起. 
  當你在編程中使用一個變量, 你必須首先讓Driver知道這個變量 
代表什麼樣的數據類型. 這個過程叫做變量聲明. 這必須在一個函 
數或者一個Object的開始部分進行變量聲明. 怎麼做呢阿? 就是把 
數據類型的名字放在你所要用的變量名前面, 舉個例子: 
 
----- 
void add_x_and_y() 
{ 
    int x; 
    int y; 
 
    x = 2; 
    y = x + x * x; 
} 
---- 
 
上面就是一個完整的函數. 函數名就是add_x_and_y(). 在這個函數中 
一開始聲明落兩個變量x, y都是int. 
 
下面介紹MudOS支持的數據類型: 
int 
  一個整數(32位). 
float 
  一個浮點數(32位). 
string 
  無限長的字符串. 
object 
  指向一個對像的指針. 
mapping 
  一個關係型數組. 
function 
  一種特殊的指針, 指向(object, 函數名)這樣一個組合. 
arrays 
  數組的聲明採用使用 '*' 跟在一種基本的類型. 
void 
  這種類型對變量沒有任何用處, 只對函數有用. 它表明這個函數 
不返回任何值. 
mixed 
  這是一種特殊的數據類型, 可以指向任何的數據類型. 如果一個 
變量被聲明成mixed, 那麼Driver不會對它做任何檢查. 
class 
  自定義的數據類型, 類似C的struct而和C++和class不一樣. 
一上是MudOS支持的數據類型. 
 
小結: 
  對一個變量, Driver需要知道存在計算機內存中的'0'和'1'到底 
指的什麼東西, 這樣我們引入落數據類型. 我們學習3種簡單的數據 
類型, 同時了解了MudOS支持的各種數據類型. 對於各種操作符, 不 
同數據類型有各自不同的操作符, 比如你讓 "飛鳥"/"trill", 那 
Driver一定會返回一個錯誤的. 大多數數的操作符和C/C++的一樣, 
只是+ 還支持字符串和數字相加. 