2.3 代碼風格 
  在上面說過函數的順序對這個Object的特性是毫無影響的。 
但是一個有著良好代碼風格的程序對LpMud是很重要的。因為 
LpMud通常不會也不可能是一個人完成的，如果程序沒有較好 
的可讀性，那麼別人理解你的“作品”是很困難的。而且有個 
良好的程序風格能給人以優雅的感覺，因此希望大家寫的Lpc 
程序能有個好的風格。大家中的有些人可能以後會加入XO team 
創建自己夢想中的世界，我們要求你採用如下的格式書寫程序。 
 
2.3.1 頭文件 
  在一個文件的開頭是一段說明。採用如下格式： 
 
/* /u/trill/obj/test.c 
 * from XO Object Library 
 * 測試用的Object 
 * created by trill 19970808 
 * version @(#) test.c 2.1@(#) 
 * last modified by trill 19971008 
 * 測試tell_wizard這個simul_efun 
 */ 
第一行是這個文件的絕對路徑，就是全路徑。 
第二行是它所在的Mudlib 
第三行是它的功能的簡單的描述，可以超過一行。 
第四行是這個文件的作者和創建時間。 
第五行是它的版本號，可能做了多次修改，甚至可能會重寫， 
      這個數字2.1標誌了它大概做過多少次改動。 
第六行是最後一次修改的人和時間。 
第七行是最後一些修改什麼東西。 
 
  對於一個Object我們要求必須有這樣一段說明，特別是前面 
的五行必須存在，如果做了改動那麼最後兩行也要加上。 
這樣一般的一個Object，我們從這段說明就能了解到一些很重 
要的信息。 
 
下面是include一些文件和繼承(inherit)一些Object。 
 
#include <ansi.h> 
#include "include/test.h" 
 
inherit NPC; 
 
先系統的文件，後自己定義的一些頭文件。特別要求的是必須 
有個和這個Object同名的".h"文件，比如"test.h"放在這個 
Object所在的目錄的下一級目錄"include"底下，就是說在 
include部分的最後一行是#include "include/test.h"。 
在test.h定義所有在test.c用到的函數的原形，以及定義一些 
宏和常量。 
  這樣做的好處是： 
第一不用出現一個函數在引用時沒有說明， 
第二如果想知道這個Object有什麼函數，直接看這個文件就可以 
了，不必去看那個test.c，可能test.c非常長。 
第三如果建立一個help系統，用來查詢每個Object存在的函數， 
那麼這樣直接去讀test.h就可以，否則是一件很麻煩的事。 
 
關於inherit我們在繼承部分再說。 
 
2.3.2 變量說明 
 
  在變量說明部分，大家最好在每個變量後面加一個簡單的說明。 
 
2.3.3 函數 
 
  一個Object的函數的順序和名字對這個Object的表現是毫無影 
響的。但是為了讓這個Object有良好的可讀性，我們要求一個Object 
的函數按如下方式排列和命名： 
  首先是變量的接口部分，這些函數統一用Set+變量名來改變該 
變量的值，用Get+變量來返回變量的值。比如 
 
static int level; 
 
void SetLevl(int i) 
{ 
    level = i; 
} 
 
int GetLevel() 
{ 
    return level; 
} 
  其次是一些操縱和控制變量的一些函數。比如 
 
void AddLevel(int i) 
{ 
  一個Object的函數的順序和名字對這個Object的表現是毫無影 
響的。但是為了讓這個Object有良好的可讀性，我們要求一個Object 
的函數按如下方式排列和命名： 
  首先是變量的接口部分，這些函數統一用Set+變量名來改變該 
變量的值，用Get+變量來返回變量的值。比如 
 
 static int level; 
 
void SetLevl(int i) 
{ 
    level = i; 
} 
 
int GetLevel() 
{ 
    return level; 
} 
  其次是一些操縱和控制變量的一些函數。比如 
 
void AddLevel(int i) 
{ 
    level += i; 
} 
 
這兩類函數要求每個單詞的第一字母大寫。 
 
  再是一些Object所能做的事件(event)，比如戰鬥，結婚等等。比如 
 
void eventQuit() 
{ 
   ... 
} 
 
  這些函數要求事件的每個單詞的第一字母大寫，比如eventFight, 
eventMarry等等。 
 
  再下面的是由Driver調用的一些函數，比如create(), heart_beat, 
setup()。 
 
  最後是一些這個Object自己私有的函數，完成一些特別的功能。這些 
函數通常讓要求每個單詞的小寫，中間用下劃線(_)隔開。 
 
  要注意的是每個函數之間用一個空行隔開。 
 
  這些是對一個文件的整體要求，如果你有興趣將來在XO team寫程序， 
最好從現在開始就養成這樣的編程習慣。如果你是別的Mud裡面的巫師， 
我想一個Mud裡面最好也有一個統一的整齊的風格。 
  也許你會問，這樣要求有必要嗎？這樣太麻煩，程序寫了自己能明 
白就可以了。這是不對的，LpMud是大家合作的項目，如果你做的程序 
別人沒法看懂，不知道寫的東西裡面有些什麼，能調用什麼函數，那 
麼實際上你寫的東西是失敗的，沒人會去用它，它可能永遠“死”在 
硬盤上。而且函數統一的命名法能盡快找到你所需要的函數，同時也 
能提高整個程序的可讀性。 
  對於代碼風格XO還有一些別的要求，我們將在以後的文章中介紹， 
如果你加入了XO team，代碼風格將是第一篇要讀的文章。 
 
小結: 
  關於Lpc程序和編程環境，就介紹到這裡。看完這一章，我想大家 
要記住的是LpMud是採用Lpc做為編程語言，Unix文件結構作為文件組 
織形式。Lpc是編寫Object的一種語言，它的程序沒有特殊的開始和 
結束的標誌。如果Object被使用到，那麼它被調入內存，如果這個 
Object有一個叫create()的函數，首先被執行，來初始化一些變量。 
Lpc的Object是一堆變量的集合，同時帶有一些能操縱改變這些變量 
的函數。Lpc的代碼風格，我想一個Mud最好有一個統一的風格，特別 
的XO有自己的特別的要求。 
 
題外話： 
  當了好久的巫師，也用Lpc寫了一些東西。我一直在試著理解Lpc， 
因為以我看如果一個巫師沒有真正理解Lpc，他就不可能真正理解 
LpMud。理解Lpc並不僅僅意味著會使用它，許多巫師能使用它但是 
並不真正理解它。我希望在這個Lpc的介紹文章，能給大家一個Lpc 
的整體的印像，真正把握和理解Lpc，能創造自己心中夢想的世界。 