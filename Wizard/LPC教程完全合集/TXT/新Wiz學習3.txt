[物品的製造]
    要制作物品, 首先必須 inherit OBJECT;　理由與做房間時必須
inherit ROOM 一樣　OBJECT 是最基本的物品, 如果你要做的東西是武
器　防具　地圖等, 你必須 inherit WEAPON, ARMOR, MAP 等等才能獲
得這種類別的物品所擁有的特性　現在請注意一下, 我們現有的系統在
這裡有些小臭蟲, 在你 inherit WEAPON 或其他子類別時, 請你把 inherit
OBJECT 這行消掉, 否則會造成錯誤　同時, 你不可以同時繼承 WEAPON,
又繼承 ARMOR, 這也會造成錯誤, 理由跟上面的錯誤相同　
    物品的重要函數只有 create() 與 init(), 作用與 ROOM  中的同
名函數大致相同　

[create() 函數]
    要寫 create() 函數, 最好的方法是拿現成的同類物品來修改　因
為不同類的物品往往可以 set 不同的屬性, 而且特性極多, 有重量　
價格　攻擊力(武器)　防禦能力(防具)　使用壽命(火把)等等　很難記
得完整, 所以我勸你找一個較完整檔案來修改　

[init() 函數]
    與 ROOM 中的 init 函數類似, 但是被呼叫的時機多了許多, 共有
下列的幾種情況:
1. 物品擺在房間中, 有一個玩家走進來　
2. 一個物品突然出現在某個玩家所在的房間中　
3. 一個物品突然出現在某個玩家的物品欄中　
物品的 init 函數大多還是用在寫 add_action 上面, 這些 action 會
生效的場合歸結起來很簡單, 就是:

    「玩家用 l 或是 i 指令看得到這個物品的時候」

同一個房間中他人或怪物身上的東西時不算, 裝在袋子的東西不算　這
點要注意一下　

[怪物]
    簡單的怪物很好做, 連 init 都不用寫, 只需要寫 create(),  唯
一的問題是屬性太多了, 要一一理解得花上相當的時間才行　

    會做複雜動作的怪物則需要相當的技巧, 並且了解有哪些變數可以
被攔截下來改寫利用　等你有一定的程度時, 再來找個怪物參考參考較
好　

    怪物要 inherit MONSTER; 它也沒有 refresh() 這個函數　