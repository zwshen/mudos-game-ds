數組：
即ARRAY，前面說過，LPC中的數組只要在類型後面加 * 就可以了
一般來說數組不用預先定大小
但若有需要可以用allocate(size)來固定大小。如：a = allocate(10);
在固定了SIZE之後好處是可以任意用下標定位來對數組元素操作。

我的習慣是不用固定SIZE的數組，因為那樣更自由些。數組的操作在LPC裡是相當強的。
最常見的是 +, - 操作，也是最useful的。
+就是通常的“連接”操作，
-是集合的“差”操作，如果沒有這兩個概念請看下面例子：
a == ({ 1,2,2,3, })
則a + ({2,3,4}) == ({ 1,2,2,3,2,3,4})
a - ({ 2,1}) == ({3})

請注意 - 的時候會把所有相同的元素都消掉的。

結合上面例子可以知道ARRAY常量的表示方法了，就是 ({元素,元素,....})
當然這只是一維數組（事實上我們用一維數組就足夠了，我想）
在對數組的元素改變的時候，一般可以用直接賦值，如a[3] = 2;
在對數組的元素改變的時候，一般可以用直接賦值，如a[3] = 2;
如何刪除一個元素？假如你確定該元素的值唯一的話可以用 - ({元素值 })
但要是有同值元素的話就會把它也刪掉了，那不是我們所要的。
一般常用的方法是把該元素賦一個“不可能值”，或者說“無用值”，
然後再用 - 把該元素刪除掉，比如說
我們確定數組內所有元素都為正，則我們可把那個元素賦值為0然後把數組 -= ({0})

關於array的一個很有用的函數是member_array
用法是 member_array(元素值，數組，起始下標（可選） ）;
函數返回數組中從下標開始第一個元素值為所搜索值的元素下標。若無則返回-1;
嗯，LPC的數組是跟C一樣的，下標從0開始到size-1 ，請注意。
member_array的參數中起始下標一般可缺省。
eg: a = ({1,2,2,3})
則      member_array(2,a) == 1
        member_array(2,a,2) == 2
        member_array(4,a) == -1


ARRAY和MAPPING可以說是LPC裡面最有用和最直接用的結構了。
再加上兩個功能強大的函數：filter_array 和filter_mapping。
我們有了filter就可以實現對ARRAY，MAPPING裡各元素的過濾操作。
這樣一來我們就可以實現數據庫的操作了，這樣我們的LPC程序所擁有的功能
是非常強大了。

最後說一下多維數組的定義方法。
多維數組一般各維SIZE固定的，有兩種方法定義：
eg1:
定義多維數組變量
   a = allocate(10);
   a[0] = allocate(10);
   a[1] = allocate(10);
   ...etc...
也就定義了a [10][10]

eg2:
用mixed 類型 = 多維數組常量
   mixed a;
   a = ({ ({ 1, 2, 3 }), ({ 1, 2, 3 }) });
