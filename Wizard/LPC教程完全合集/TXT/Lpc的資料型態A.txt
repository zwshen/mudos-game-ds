                       第二章 Lpc的數據類型。 
 
                           第一節 序言 
 
  Lpc的Object是由零個或更多一些的被一個或一個以上函數操縱 
控制的變量組成的。在代碼中函數排列的順序是不影響Object的特 
性，但是影響代碼的可讀性。當你寫的那個Object被第一次調用時， 
Driver將你寫的代碼裝入內存。當每一個Object被調入內存時，所 
有的變量是沒有值的。create()這個函數被調用來初始化Object的 
值。create()這個函數在Object裝入內存後立即被調用。在你讀本 
文時可能對編程一無所知，你可能不知道什麼是函數以及它是怎麼 
調用的；或許你有了一些編程的經驗，你可能對一個新創建的Object 
的函數相互調用過程是怎樣開始感到迷惑。在這些困惑得到解決之 
前，你更有必要了解的是這些函數操縱控制的到底是什麼東西。所 
以你最好先來讀讀這一章：Lpc的數據類型。可以這麼說，幾乎90％ 
的錯誤（包括丟失{}和()）是由於錯誤的使用Lpc的數據類型。我認 
為真正理解這一章能幫助你更容易的編程。 
 
                    第二節 讓計算機理解你 
2.1 計算機語言 
  眾所周知的計算機懂得的語言實際上由“0”和“1”組成的機器 
碼。計算機根本不懂得人類的自然語言，實際上它也不懂得我們使 
用的高級語言，比如BASIC，C，C++，Pascal等等。這些高級語言 
能讓我們更容易的實現我們的想法。但是這些高級語言最終都要被 
翻譯成“0”和“1”組成的計算機語言。 
  有兩種方法能把高級語言翻譯成計算機語言：編譯和解釋。編譯 
類的在程序寫完之後用一個編譯器將其翻譯成計算機語言。編譯在 
程序執行之前就完成了。解釋類的翻譯的過程在程序執行時進行。 
由於解釋類的語言程序是邊執行邊解釋，所以一般都要比編譯編譯 
執行的慢。 
  不管是哪種語言，他們最終都要被翻譯成0和1。但是變量，那些 
你存在內存裡面的變量，卻不可能只是0和1。 
所以你必須有一種你 
使用的那種編程語言裡面的方法來告訴計算機這些0和1應該被當做 
整數還是字符，或者是字符串，或者別的什麼東西。這樣就必須使 
用到數據類型。 
 
2.2 數據類型 
  一個簡單的例子：你現在有了一個變量，你把它叫做‘x’並且 
賦予它一個十進制整數值65。在Lpc你可以這樣的語句來做這件事： 
 
------ 
x = 65; 
------ 
 
接著你可以做像下面這樣的事： 
 
----- 
write(x + "\n"); 
y = x + 5; 
----- 
第一行把65和字母"a"輸出到屏幕上 
第二行把70這個值賦於變量y 
對計算機來說有個問題:它不知道你所說的 x = 65;中的65什麼意思. 
你認為是65,但是計算機可能認為是: 
00000000000000000000000001000001 
但是,對計算機來說,字母'A'也是被當做: 
00000000000000000000000001000001 
所以,當你想讓計算機明白 write( x + "\n" );, 它必須有一種方法 
知道你想看到的是65而不是'A'. 
  計算機就是通過數據類型來區分65和'A'. 一種數據類型簡單的說就 
是在內存的某處, 那裡代表了或者說指向某個給定的變量, 這些內存 
儲存的數據是什麼類型的. 每個LPC的變量都必須有它對應的變量類型. 
在上面給的例子, 本應在那些代碼之前有下面一行: 
 
----- 
int x; 
---- 
 
這一行告訴Driver x應該指向什麼類型的值, 它應該被當做數據類型'int' 
來使用. 'int' 是一個32位的整數. 到這裡, 你應該有數據類型的基本 
印像, 以及為什麼必須有數據類型. 他們可以讓Driver知道計算機存在 
內存裡面的'0'和'1'到底是什麼東西. 
2.3 Lpc的數據類型 
 
  所有的LpMud的Driver都會有以下的數據類型： 
 
void, int, string, object, mixed, int *, string *, 
object *, mixed * 
 
  大多數的Driver都會有下面這些重要的數據類型： 
 
float, mapping, float *, mapping * 
 
  有一些Driver同時還支持下面這些數據類型： 
 
function, struct, class, char 
 
  特別的有MudOS支持的數據類型：(以v22pre8為例) 
 
void, int, string, object, float, mapping, function, 
class, mixed, int *, string *, object *, float *, 
mapping *, function *, class *, mixed * 