<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<meta name="GENERATOR" content="Microsoft FrontPage 4.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<title>LPC入门</title>
</head>

<body>

<table height="2267">
  <tr>
    <td height="17"><font color="#ff0000">LPC入门</font></td>
  </tr>
  <tr>
    <td height="2242"><br>
      <p>LPC就是我们用来写MUD的语言啦，它的语法和C 
      基本一样。它独特之处在于有简单的<br>
      OOP特性(简单但很有用:PP)，还有一个C里面没有的HASH表的类型：MAPPING<br>
      LPC和C还有一个不同是其主函数是CREATE()而不是MAIN()。create()别写错哦:PP</p>
      <p>LPC里面主要的(也是写MUD所足够的)数据类型有int,string,mapping,object,<br>
      mixed。下面主要讲一下这些类型了。</p>
      <p>因为整数类型对于写MUD已经足够，所以不用FLOAT了。同样的，因为我们的<br>
      汉字是双字节的，所以CHAR类型其实也没用，只需要STRING 
      类型就可以了。<br>
      STRING的定义，这里要提一下：string常量的赋值，假如是常量的话可以只用<br>
      “连接”的办法代替string，例如:<br>
      string str = &quot;我&quot; &quot;们&quot; ;那么结果是str == &quot;我们&quot;<br>
      同样的str =<br>
      &quot;我&quot;<br>
      &quot;们&quot;;也是一样，空格与换行在LPC编译时是被忽略的，所以我们<br>
      写MUD的时侯不仿多些TAB和换行，这样程序容易看些。<br>
      当然，除了直接连接之外还可以用 + 
      连接。在有变量的时侯就要用了。例如：<br>
      string str0 = &quot;我们&quot;;<br>
      string str1 = &quot;和&quot;+str0+&quot;大家&quot;;<br>
      结果是str1 == &quot;和我们大家<br>
      mixed是一个比较特别的类型。mixed 
      类型的变量可以赋任何其他类型的值。<br>
      这在未知变量类型的时侯非常有用。不过一般情况下很少会用到mixed。<br>
      LPC里面没有“指针”的概念。在变量名前面加 * 
      的定义表示数组。如int *a<br>
      表示a 
      是整数数组。一般来说我们定义数组时是未知其大小的。所以定义时不用象<br>
      C 那样给定大小。数组和MAPPING有些类似，所以将在下面和MAPPING一起讲它们<br>
      的操作。</p>
      <p>LPC里面没有“指针”的概念。在变量名前面加 * 
      的定义表示数组。如int *a<br>
      表示a 
      是整数数组。一般来说我们定义数组时是未知其大小的。所以定义时不用象<br>
      C 那样给定大小。数组和MAPPING有些类似，所以将在下面和MAPPING一起讲它们<br>
      的操作。</p>
      <p>object, 是OOP概念了，在LPC里面好象有CREATE()的都可以做object 
      类型变量<br>
      了。object 我们称为“对象”，在MUD里就是一件物品，一个房间或任何一个“具<br>
      体”的东西，都是OBJECT。“对象”，在OOP中是一些数据与基于这些数据的函数的<br>
      集合（好象文诌诌的？ :PP）嗯，object 
      中的数据一般不能直接操作（至少在LPC<br>
      里面不能的 :PP），所以对object的操作只有赋值（对object类型的赋直 
      ）和执行<br>
      object的函数( private函数不能被外部调用 )。<br>
      函数调用格式：<br>
      eg. object ob;<br>
      ob-&gt;test(1,2);</p>
      <p>基本格式： object类型变量名-&gt;函数名(函数参数列);<br>
      其中若该object 中未定义该函数名的函数则返回 0 
      值（呵呵，不会有出错信息的哦，<br>
      所以千万别写错名字了）。</p>
      <p>写了这么多终于写到LPC 最有特色的两个类型了，mapping和数组。<br>
      mapping和数组在“外观”上有些类似，所以在一起写了。前面提到过：mapping是<br>
      散列表，具体如何这里不详述了，只希望大家一定要记住mapping的格式！！( 
      实际<br>
      上这格式只在给变量赋初值时用到 )mapping 格式如下：<br>
      eg. mapping a = ([ &quot;ab&quot; : 1 ,<br>
      &quot;cd&quot;: 2 ,<br>
      ])<br>
      标准格式：<br>
      mapping 变量名 = ([<br>
      key1 : value1 ,<br>
      key2 : value2 ,<br>
      ..........<br>
      ..........<br>
      ]);<br>
      其中key可以是除了int以外的任何值！！ (好象char也不行吧 
      :P )，包括任何数组<br>
      甚至mapping也可以做key ,而value则可以是任意所有值。mapping的应用在于：<br>
      可以用key来index得到相应的value值。如上面eg的，我们有：a[&quot;cd&quot;] 
      == 2,....<br>
      因为要用key来index的关系，在mapping中key值不能相等，若相等则覆盖掉原来该<br>
      key对应的value。写的有些乱了，SORRY :P</p>
      <p>那么一个mapping怎么改变它的值呢？有两个方法(下面设mapping 
      map )。<br>
      1. map[key] = value;<br>
      2. map += ([key : value ]);<br>
      请大家留意第二种赋值方法，它跟我们将要提到的数组的方法一样的 
      。<br>
      在mapping中“删除”一个key （其相应value当然也没了）方法是：<br>
      map_delete(map,key);<br>
      lpc里面的系统函数(efun)的命名一般按参数顺序来取名（ 
      map_delete的参数就是<br>
      map在前，被delete的key在后的 ），希望大家注意。<br>
      另外mapping的efun还有values,keys,undefinedp<br>
      大家可以直接在MUD里 help efunname 来看帮助，也可以参阅 
      /doc/lpc/types/mapping<br>
      这一文件</p>
      数组：<br>
      即ARRAY，前面说过，LPC中的数组只要在类型后面加 * 
      就可以了<br>
      一般来说数组不用预先定大小<br>
      但若有需要可以用allocate(size)来固定大小。如：a = 
      allocate(10);<br>
      在固定了SIZE之后好处是可以任意用下标定位来对数组元素操作。
      <p>我的习惯是不用固定SIZE的数组，因为那样更自由些。数组的操作在LPC里是相当强的。<br>
      最常见的是 +, - 操作，也是最useful的。<br>
      +就是通常的“连接”操作，<br>
      -是集合的“差”操作，如果没有这两个概念请看下面例子：<br>
      a == ({ 1,2,2,3, })<br>
      则a + ({2,3,4}) == ({ 1,2,2,3,2,3,4})<br>
      a - ({ 2,1}) == ({3})</p>
      <p>请注意 - 的时候会把所有相同的元素都消掉的.</p>
      <p>结合上面例子可以知道ARRAY常量的表示方法了，就是 ({元素,元素,....})<br>
      当然这只是一维数组（事实上我们用一维数组就足够了，我想）<br>
      在对数组的元素改变的时候，一般可以用直接赋值，如a[3] 
      = 2;<br>
      在对数组的元素改变的时候，一般可以用直接赋值，如a[3] 
      = 2;<br>
      如何删除一个元素？假如你确定该元素的值唯一的话可以用 
      - ({元素值 })<br>
      但要是有同值元素的话就会把它也删掉了，那不是我们所要的。<br>
      一般常用的方法是把该元素赋一个“不可能值”，或者说“无用值”，<br>
      然后再用 - 把该元素删除掉，比如说<br>
      我们确定数组内所有元素都为正，则我们可把那个元素赋值为0然后把数组 
      -= ({0})</p>
      <p>关于array的一个很有用的函数是member_array<br>
      用法是 member_array(元素值，数组，起始下标（可选） ）;<br>
      函数返回数组中从下标开始第一个元素值为所搜索值的元素下标。若无则返回-1;<br>
      嗯，LPC的数组是跟C一样的，下标从0开始到size-1 
      ，请注意。<br>
      member_array的参数中起始下标一般可缺省。<br>
      eg: a = ({1,2,2,3})<br>
      则 member_array(2,a) == 1<br>
      member_array(2,a,2) == 2<br>
      member_array(4,a) == -1</p>
      <p>ARRAY和MAPPING可以说是LPC里面最有用和最直接用的结构了。<br>
      再加上两个功能强大的函数：filter_array 和filter_mapping。<br>
      我们有了filter就可以实现对ARRAY，MAPPING里各元素的过滤操作。<br>
      这样一来我们就可以实现数据库的操作了，这样我们的LPC程序所拥有的功能<br>
      是非常强大了</p>
      <p>最后说一下多维数组的定义方法。<br>
      多维数组一般各维SIZE固定的，有两种方法定义：<br>
      eg1:<br>
      定义多维数组变量<br>
      a = allocate(10);<br>
      a[0] = allocate(10);<br>
      a[1] = allocate(10);<br>
      ...etc...<br>
      也就定义了a [10][10]</p>
      <p>eg2:<br>
      用mixed 类型 = 多维数组常量<br>
      mixed a;<br>
      a = ({ ({ 1, 2, 3 }), ({ 1, 2, 3 }) });</p>
    </td>
  </tr>
</table>

</body>

</html>
