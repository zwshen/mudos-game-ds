// natured.c
// #pragma save_binary
#include <localtime.h>
#include <ansi.h>
#define REAL_TIME_TICK (time())
#define GAME_TIME_TICK (time()*60)
inherit F_DBASE;

static int current_world1_quest;
static int current_world2_quest;
static int current_world3_quest;
static int current_week;
static int current_hour;
static int current_min;
mixed *local;
object *world1_quest_mob=({});
object *world2_quest_mob=({});
object *world3_quest_mob=({});

void init_time();

void create()
{
	seteuid(getuid());
	init_time();
}

//¨C¤p®Éªº¾ãÂI°õ¦æ
void every_hour()
{
	string week;
		switch(local[LT_WDAY])
        	{	
        		case 0: week="¤é"; break;
        		case 1: week="¤@"; break;
        		case 2: week="¤G"; break;
        		case 3: week="¤T"; break;
        		case 4: week="¥|"; break;
        		case 5: week="¤­"; break;
        		case 6: week="¤»"; break;
        		default: week="??"; break;
        	}
		message("system",sprintf(HIC+"¡i©w®ÉºëÆF¡j¾ãÂI³ø®É´ú¸Õ¡R¦è¤¸%d¦~ %d¤ë %d¤é ¬P´Á%s "+HIW+"%d[1;5m:[0m"+HIW+"00"+HIC+"¡C\n"+NOR,
		local[LT_YEAR],local[LT_MON]+1,local[LT_MDAY],week,
		local[LT_HOUR], ),users());

		//©w®É§ó·s¬ö¿ý
		RECORD_D->resort_record();
}

//¨C¤p®Éªº30¤À°õ¦æ
void per_min_30()
{
	object *user;
	int i;
	
	LOTTERY_D->generate_num();
	message("system",sprintf(HIC+"\n¡i±m¨÷¤¤¤ß¡j²Ä %d ´Á¤¤¼ú¸¹½X¤w¶¶§Q¶}¥X¡T¯¬¦U¦ì³£¯à©¯¹B¤¤¼ú¡C\n"NOR,LOTTERY_D->query_times()),users());
	
	//©w®É¦Û°Ê¬ö¿ý
	user=users();
	for(i=0;i<sizeof(user);i++)
	{
		tell_object(user[i],"¦Û°Ê¦sÀÉ¤¤...½Ðµy«á¡C\n");
		user[i]->force_me("save");
	}

}

void clock_0() // ¥b©]12ÂI05¤À°õ¦æ, Á×¶}¾ãÂI³B²z¥H§K¹Lªø°õ¦æ
{
	RECORD_D->remove_temp_record();
}

void clock_1()
{

}
void clock_2()
{ 
}
void clock_3()
{
}
void clock_4()
{
}
void clock_5()
{
}
void clock_6()
{
//	RECORD_D->remove_temp_record(); 
}
void clock_7()
{ 
}
void clock_8() { }
void clock_9()
{ 
}
void clock_10() { }
void clock_11()
{ 
}
void clock_12()
{
//	RECORD_D->remove_temp_record(); 
}
void clock_13()
{ 
}
void clock_14() { }
void clock_15()
{
}
void clock_16()
{
//	RECORD_D->remove_temp_record();
}
void clock_17()
{
}
void clock_18() { }
void clock_19()
{
}
void clock_20()
{
//	RECORD_D->remove_temp_record();
}
void clock_21()
{
}
void clock_22()
{
}
void clock_23()
{
}
void init_time()
{

	// Get time of today.
	local = localtime(time());
	current_week = local[LT_WDAY]; //0~6
	current_hour = local[LT_HOUR]; //0~23
	current_min = local[LT_MIN];   //0~59

	current_world1_quest = 0;
	current_world2_quest = 0;
	current_world3_quest = 0;

	call_out("update_time",60);
}

void update_time()
{
	int pre_week,pre_hour,pre_min;
	string week;

	remove_call_out("update_time");
	pre_week=current_week;
	pre_hour=current_hour;
	pre_min=current_min;
	
	// Get time of today.
	local = localtime(REAL_TIME_TICK);
	
	current_week = local[LT_WDAY]; //0~6
	current_hour = local[LT_HOUR]; //0~23
	current_min = local[LT_MIN];   //0~59

	//´ú¸Õ
	if(pre_min==59 && current_min==0)
	{
		every_hour();
	} 
	else
	if(pre_min==29 && current_min==30) //¨C­Ó30¤À®É
	{
		per_min_30();
	}
	
	if(pre_min==4 && current_min==5)
	{
		switch(current_hour)
		{
			case 0: clock_0();
				break;
			case 1:	clock_1();
				break;
			case 2: clock_2();
				break;
			case 3: clock_3();
				break;
			case 4: clock_4();
				break;
			case 5: clock_5();
				break;
			case 6: clock_6();
				break;
			case 7: clock_7();
				break;
			case 8: clock_8();
				break;
			case 9: clock_9();
				break;
			case 10: clock_10();
				break;
			case 11: clock_11();
				break;
			case 12: clock_12();
				break;
			case 13: clock_13();
				break;
			case 14: clock_14();
				break;
			case 15: clock_15();
				break;
			case 16: clock_16();
				break;
			case 17: clock_17();
				break;
			case 18: clock_18();
				break;
			case 19: clock_19();
				break;
			case 20: clock_20();
				break;
			case 21: clock_21();
				break;
			case 22: clock_22();
				break;
			case 23: clock_23();
				break;

			default:
				break;
		}
	} 
	call_out("update_time",60);
	return;
}

mixed game_time(int a)
{
	mixed *game_time;
	game_time = localtime(GAME_TIME_TICK);
	return game_time;
}