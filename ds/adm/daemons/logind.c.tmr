// logind.c
// Last Modified by Alick@DS 2006 May 3 - multi login with same id
// Last Modify by Alickyuen on 2005 May 12 About Multi Login
// ¤W¦¸­×§ï¤é´Á: 1999.11.7 0:51
// ¤W¦¸­×§ïªÌ: Luky
// ­×§ï¤º®e: ­×§ï¨Ï¥ÎªÌ¸ê®Æª©¥»ªº½T»{©Mlogin¿ù»~¬ö¿ý
// #pragma save_binary
#include <ansi.h>
#include <command.h>
#include <login.h>

inherit F_DBASE;
static int reboot_check=0;
int wiz_lock_level = WIZ_LOCK_LEVEL;
//int wiz_lock_level = -1;
//­­¨î¤¤¤å¦WºÙ.
string *banned_name = ({
	"§A", "©p", "§Ú", "¥L", "¦o", "¨e", "¥¦",
	"·F§A®Q", "·F", "¬Y¤£©ú¤Hª«","¬Y¤H",
});
//­­¨î­^¤å¦WºÙ.
string *banned_id = ({
	"root","backbone","Root","Backbone","you", "fuck", "shit", "monster", "mob",
	"fuckyou","admin","wizard","arch","apprentice" ,"immortal","wiz","fuckme",
	"luky",
});

mapping hacker_ip = ([
	"1.1.1.1":1,	
]);

private void get_id(string arg, object ob);
private void get_invis(string arg, object ob, object user);
private void confirm_id(string yn, object ob);
private void confirm_race(string yn, object ob,string race);
object make_body(object ob,string race);
private void init_new_player(object user);
varargs void enter_world(object ob, object user, int silent);
varargs void reconnect(object ob, object user, int silent);
object find_body(string name);
int check_legal_id(string arg);
int check_legal_name(string arg);
int check_legal_ip(string arg, object ob);
int set_reboot(int flag);
void create() 
{
	seteuid(getuid());
	set("channel_id", "³s½uºëÆF");
}

int set_reboot(int flag)
{
	if(flag>=0) return reboot_check=flag;
	else return reboot_check=-1;
}

void logon(object ob)
{
	object *usr;
	string welcome,players="";
	int i, wiz_cnt, ppl_cnt, login_cnt,p;
	if(p = 1 + random(3)) welcome=read_file(WELCOME+sprintf("%d",p));
	if(ob->query_temp("gb_player")) welcome=LANGUAGE_D->Big52GB(welcome);
	if(welcome) write(welcome);
	UPTIME_CMD->main();

	usr = users();
	wiz_cnt = 0;
	ppl_cnt = 0;
	login_cnt = 0;
	for(i=0; i<sizeof(usr); i++)
	{
		if( !environment(usr[i]) ) login_cnt++;
		else if( wizardp(usr[i]) )
		{
			if(usr[i]->query_temp("invis")) continue;
			wiz_cnt++;
			//players = sprintf("%s*%-12s%s",players,capitalize(usr[i]->query("id")),((wiz_cnt+ppl_cnt)%6==0? "\n": ""));
			if(players!="") players +=", ";
			players += "*"+capitalize(usr[i]->query("id"));
		}
		else 
		{
			ppl_cnt++;
			//players = sprintf("%s%-13s%s",players,capitalize(usr[i]->query("id")),((wiz_cnt+ppl_cnt)%6==0? "\n": ""));
			if(players!="") players +=", ";
			players += capitalize(usr[i]->query("id"));
		}
	}
	//write(sprintf("½u¤Wª±®a:\n%s\n",players));
	write(sprintf("¥Ø«e¦@¦³ %d ¦ì§Å®v¡B%d ¦ìª±®a¦b½u¤W¡M¥H¤Î %d ¦ì¨Ï¥ÎªÌ¹Á¸Õ³s½u¤¤¡C\n%s\n",
		wiz_cnt, ppl_cnt, login_cnt, players ));
		
//	if( !check_legal_ip(query_ip_number(ob)) )
//	{
//		destruct(ob);
//		return;
//	}
//  	put it back into get_id() by alickyuen@May2005

	write("[1m< You should run [5;33mChinese System[0m[1m first. >[0m\n");
	write(HIG"Åwªï±z¶i¤J¹Ú¤Û¤C°ìªº¥@¬É¡A­Y·Q°ÑÆ[½Ð¥Î "HIM"guest"HIG" ·í§@±zªº­^¤å¦W¦r¡C\n"NOR);
	write("±zªº­^¤å¦W¦r¡R");
	input_to( (: get_id :), ob );
}

private void get_id(string arg, object ob)
{
	object ppl;
	arg = lower_case(arg);

	if( !check_legal_id(arg))
	{
		write("±zªº­^¤å¦W¦r¡R");
		input_to("get_id", ob);
		return;
	}	
//	write("wiz_level("+wiz_level(arg)+") get_status("+SECURITY_D->get_status(ob)+")\n");

	if(reboot_check!=0 && (string)SECURITY_D->get_status(arg)=="(player)")
	{
		write(sprintf("\n\t ¹ï¤£°_, ¥»¹CÀ¸­«·s±Ò°Ê¤¤, ½Ðµ¥%s¤ÀÄÁ«á¦A¨Ó!!\n\n",chinese_number(reboot_check)));
		destruct(ob);
		return;
	}


#ifdef MAX_USERS
	if( (string)SECURITY_D->get_status(arg)=="(player)"
	&& sizeof(users()) >= MAX_USERS ) {
		ppl = find_body(arg);
		// Only allow reconnect an interactive player when MAX_USERS exceeded.
		if( !ppl || !interactive(ppl) ) {
			write("¹ï¤£°_¡M" + MUD_NAME + "ªº¨Ï¥ÎªÌ¤w¸g¤Ó¦h¤F¡M½Ð«Ý·|¦A¨Ó¡C\n");
			destruct(ob);
			return;
		}
	}
#endif

	if( wiz_level(arg) < wiz_lock_level ) {
		write("¹ï¤£°_¡M" + MUD_NAME + "¥Ø«e­­¨î§Å®vµ¥¯Å " + WIZ_LOCK_LEVEL
			+ " ¥H¤Wªº¤H¤~¯à³s½u¡C\n");
		destruct(ob);
		return;
	}
    	
	if( (string)ob->set("id", arg) != arg ) {
		write("Failed setting user name.\n");
		destruct(ob);
		return;
	}
//  	reset this function by alickyuen@May2005	
	if( wiz_level(arg) < 3 && !check_legal_ip(query_ip_name(ob), ob) ) {
		destruct(ob);
		return;
	}

	if( arg=="guest" ) {
		// If guest, let them create the character.
		confirm_id("Yes", ob);
		return;
	} else if( file_size(ob->query_save_file() + __SAVE_EXTENSION__) >= 0 ) {
		if( ob->restore() ) {
			write("½Ð¿é¤J±K½X¡R");
			input_to("get_passwd", 1, ob);
			return;
		}
		write("±zªº¤Hª«Àx¦s¾×¥X¤F¤@¨Ç°ÝÃD¡M½Ð§Q¥Î guest ¤Hª«³qª¾§Å®v³B²z¡C\n");
		destruct(ob);
		return;
	}

	write("¨Ï¥Î " + (string)ob->query("id") + " ³o­Ó¦W¦r±N·|³Ð³y¤@­Ó·sªº¤Hª«¡M±z½T©w¶Ü(y/n)¡S");
	input_to("confirm_id", ob);
}

private void warn_rec(string yn,object ob,object user)
{
 if( yn=="y" || yn=="Y")
 {
   ob->delete("error_login");
 }
 enter_world(ob, user);
 return;
}


int count;
private void get_passwd(string pass, object ob)
{
        string my_pass,*rec,rec_t,ip;
        int p;
        object user;
        write("\n");
        my_pass = ob->query("password");
        ip = query_ip_number(ob);
        if( crypt(pass, my_pass) != my_pass )
        {
        	if(undefinedp(hacker_ip[ip])) hacker_ip[ip] = 1;
        	else hacker_ip[ip] += 1;
                write("±K½X¿ù»~¡T\n");
                if(hacker_ip[ip] > 10)
                {
                	write("¿ù»~¤Ó¦h¦¸¤F¡T±zªº³s½u¦ì¸m±N³Q¦C¬°´c¦HIP¡T\n");
                        ob->save();
                        log_file( "HACK", sprintf("%s(%s) from %s (%s[%s])\n",
					ob->query("name"),ob->query("id"),
					query_ip_name(ob),ip,ctime(time()) ) );
                  	destruct(ob); count=0;
        	  	return;
        	}
         count++;
         if(count > 3 )
         {
                  write("§A¤w¸g¿ù»~¤Ó¦h¦¸¤F\n");
                  rec_t=sprintf("©ó[%s]¹Á¸Õ¥Ñ[%s]³s½u¶i¤J¥¢±Ñ¡C\n",ctime(time()),query_ip_name(ob));
                  if(rec=ob->query("error_login"))
                  {
                  	if(sizeof(rec)>4)
                  	{
                  		rec[0]=rec[1];
                  		rec[1]=rec[2];
                  		rec[2]=rec[3];
                  		rec[3]=rec[4];
                  		rec[4]=rec_t;
                  	} else rec+=({rec_t});
                  	ob->set("error_login",rec);
                  }
                   else
                  {
                  	ob->set("error_login",({rec_t}));
                  }
                  ob->save();
                  destruct(ob); count=0;
        	  return;
        }
        write("½Ð¿é¤J±K½X¡R");//¦h¥[³o¨â¦æ,¥i¥H¥´¿ù¦A­«¨Ó
        input_to("get_passwd",1, ob);
        return;
       }

        
	// Check if we are already playing.
	user = find_body(ob->query("id"));
	if (user) {
		if( user->query_temp("netdead") ) {
			reconnect(ob, user);
			return;
		}
		write("\n±z­n±N¥t¤@­Ó³s½u¤¤ªº¬Û¦P¤Hª«»°¥X¥h¡M¨ú¦Ó¥N¤§¶Ü¡S(y/n)");
		input_to("confirm_relogin", ob, user);
		return;
	}
	
	if(!ob->query("race") || ob->query("race")=="¤HÃþ")
	{
		ob->set("race","human");
		ob->save();
	}

//	IP Checking by alickyuen@June 2006
	if( wiz_level(ob) < 3 && !check_legal_ip(query_ip_name(ob), ob) ) 
	{
		destruct(ob);
		return;
	}

	if( objectp(user = make_body(ob,ob->query("race"))) ) {
		if( user->restore() )
		{
			if( !user->query("race") || user->query("race")=="¤HÃþ")
			{
				user->set("race","human");
				user->save();
			}
			log_file( "USAGE", sprintf("%s(%s) loggined from %s (%s)\n",
				user->query("name"),user->query("id"),
				query_ip_name(ob), ctime(time()) ) );
			if(wizhood(user)=="(admin)")
			{
				write("\n±z­n¥HÁô§Î¼Ò¦¡¶i¤J¹CÀ¸¶Ü¡S(y/n)");
				input_to("get_invis", ob, user);
				return;
			} else	enter_world(ob, user);
			return;
		} else {
			destruct(user);
		}
	}
	write("½Ð±z­«·s³Ð³y³o­Ó¤Hª«¡C\n");
	confirm_id("y", ob);
}

private void get_invis(string yn, object ob, object user)
{
 string *rec;
 int p;
 if( yn=="y" || yn=="Y")
 {
   user->set_temp("invis",5);
 }
         if(rec=ob->query("error_login"))
        {
        	write("\n");
        	for(p=0;p<sizeof(rec);p++) write(rec[p]);
        	write("\n±z­n§R°£¤W¦C³s½u¥¢±Ñ¬ö¿ý¶Ü¡S(y/n) ");
        	input_to("warn_rec",ob,user);
        	return;
	} else enter_world(ob, user);
 return;
}

private void confirm_relogin(string yn, object ob, object user)
{
	string *rec;
	int p;
	object old_link;

	if( yn=="" ) {
		write("±z­n±N¥t¤@­Ó³s½u¤¤ªº¬Û¦P¤Hª«»°¥X¥h¡M¨ú¦Ó¥N¤§¶Ü¡S(y/n)");
		input_to("confirm_relogin", ob, user);
		return;
	}	

	if( yn[0]!='y' && yn[0]!='Y' )
	{
		if(wiz_level(user) < 5)
		{
		 write("¦n§a¡MÅwªï¤U¦¸¦A¨Ó¡C\n");
		 destruct(ob);
		 return;
		}
		
		if( objectp(user = make_body(ob,ob->query("race"))) )
		{
			if( user->restore() )
			{
				log_file( "USAGE", sprintf("%s(%s) loggined from %s (%s)\n",
					user->query("name"),user->query("id"),
					query_ip_name(ob), ctime(time()) ) );
				if(rec=ob->query("error_login"))
        			{
        				write("\n");
        				for(p=0;p<sizeof(rec);p++) write(rec[p]);
        				write("\n±z­n§R°£¤W¦C³s½u¥¢±Ñ¬ö¿ý¶Ü¡S(y/n) ");
        				input_to("warn_rec",ob,user);
        				return;
				} else enter_world(ob, user);
				if(ob->query_temp("gb_player")) user->set_temp("gb_player",1);
				return;
			} 
			else
			{
				destruct(user);
			}
		}
		
		
	}
	 else 
	{
		tell_object(user, "¦³¤H±q§O³B( " + query_ip_number(ob)
			+ " )³s½u¨ú¥N§A©Ò±±¨îªº¤Hª«¡C\n");
		log_file( "USAGE", sprintf("%s(%s) replaced by %s (%s)\n",
			user->query("name"),user->query("id"),
			query_ip_number(ob), ctime(time()) ) );
		
	}

	// Kick out tho old player.
	old_link = user->query_temp("link_ob");
	if( old_link ) {
		exec(old_link, user);
		destruct(old_link);
	}
	if(ob->query_temp("gb_player")) user->set_temp("gb_player",1);
	reconnect(ob, user);	
}

private void confirm_id(string yn, object ob)
{
	if( yn=="" ) {
		write("¨Ï¥Î³o­Ó¦W¦r±N·|³Ð³y¤@­Ó·sªº¤Hª«¡M±z½T©w¶Ü(y/n)¡S");
		input_to("confirm_id", ob);
		return;
	}	

	if( yn[0]!='y' && yn[0]!='Y' ) {
		write("¦n§a¡M¨º»ò½Ð­«·s¿é¤J±zªº­^¤å¦W¦r¡R");
		input_to("get_id", ob);
		return;
	}

	write( @TEXT

½Ð¤£­n¨ú¤@¨Ç¤£¶®©Î¬O®e©ö³y¦¨¥L¤H§xÂZªº¦W¦r¡M³o­Ó¦W¦r±N¥Nªí§Aªº
¤Hª«¡M¦Ó¥B©¹«á±N¤£¯à¦A§ó§ï¡M½Ð°È¥²·V­«¡C

TEXT
	);
	write("±zªº¤¤¤å¦W¦r¡R");
	input_to("get_name", ob);
}

private void get_name(string arg, object ob)
{
	if(ob->query_temp("gb_player")) arg=LANGUAGE_D->GB2Big5(arg);
	if( !check_legal_name(arg) ) {
		write("±zªº¤¤¤å¦W¦r¡R");
		input_to("get_name", ob);
		return;
	}
	if( arg=="Às½¼" && ob->query("id")!="luky")
	{
		write("¹ï¤£°_¡A³o­Ó¦W¦r¤w¸g³Q¨t²Î¦C¬°«O¯dªº¤¤¤å¦WºÙ¤F¡C\n");
		write("½Ð­«¥ý³]©w±zªº¤¤¤å¦W¦r¡R");
		input_to("get_name", ob);
		return;
	}
	printf("%O\n", ob);
	ob->set("name", arg);
	if(ob->query("id") == "guest")
	{
		ob->set("password", "guest" );
		ob->set("email", "No Email");
			write( @RACE_TEXT_ONE
	
=============== ½Ð¿ï¾ÜºØ±Ú(¿é¤J¶}ÀY¦r¥À) ==================
([1;33mH[0m)uman	  :¤HÃþ -> µo·½©ó¦a²y¡A¬°¯à¤O¤Q¤À¥­§¡ªººØ±Ú¡C¥Ñ©ó¦³
		   ¬Û·í©ô²±ªº³Ð³y¤O¡A¬Gµo®i¥X¤Q¤À¦h¼Ë¤Æªº§Þ
		   ¯à»PÂ×´IªºªZ¾¹¸Ë³Æ¡C
([1;33mZ[0m)erg    :²§«¬ -> ¶}µo¤¤¡C
([1;33mP[0m)rotoss :¯«±Ú -> ¶}µo¤¤¡C
===========================================================

RACE_TEXT_ONE
	);
		write("±z­n§êºt¨¤¦âªººØ±Ú¡S");
		input_to("get_race", ob);
		return;
	}
	else 
	{
		write("½Ð³]©w±zªº±K½X¡R");
		input_to("new_password", 1, ob);
	}
}

private void new_password(string pass, object ob)
{
	write("\n");
	if( strlen(pass)<5 ) {
		write("±K½Xªºªø«×¦Ü¤Ö­n¤­­Ó¦r¤¸¡M½Ð­«³]±zªº±K½X¡R");
		input_to("new_password", 1, ob);
		return;
	}
	ob->set("password", crypt(pass,0) );
	write("½Ð¦A¿é¤J¤@¦¸±zªº±K½X¡M¥H½T»{±z¨S°O¿ù¡R");
	input_to("confirm_password", 1, ob);
}

private void confirm_password(string pass, object ob)
{
	string old_pass;
	write("\n");
	old_pass = ob->query("password");
	if( crypt(pass, old_pass)!=old_pass ) {
		write("±z¨â¦¸¿é¤Jªº±K½X¨Ã¤£¤@¼Ë¡M½Ð­«·s³]©w¤@¦¸±K½X¡R");
		input_to("new_password", 1, ob);
		return;
	}

	write("±zªº¹q¤l¶l¥ó¦a§}¡R");
	input_to("get_email",  ob);
}

private void get_email(string email, object ob)
{

	ob->set("email", email);


	write( @RACE_TEXT
	
=============== ½Ð¿ï¾ÜºØ±Ú(¿é¤J¶}ÀY¦r¥À) ==================

([1;33mH[0m)uman	  :¤HÃþ -> µo·½©ó¦a²y¡A¬°¯à¤O¤Q¤À¥­§¡ªººØ±Ú¡C¥Ñ©ó¦³
		   ¬Û·í©ô²±ªº³Ð³y¤O¡A¬Gµo®i¥X¤Q¤À¦h¼Ë¤Æªº§Þ
		   ¯à»PÂ×´IªºªZ¾¹¸Ë³Æ¡C
([1;33mZ[0m)erg    :²§«¬ -> ¶}µo¤¤¡C
([1;33mP[0m)rotoss :¯«±Ú -> ¶}µo¤¤¡C

===========================================================
ºØ±Ú¤@¦ý¨M©w¤§«á¡M©¹«á±N¤£¯à¦A§ó§ï¡M½Ð·V¿ï¡C

RACE_TEXT
	);
	write("±z­n§êºt¨¤¦âªººØ±Ú¡S");
	input_to("get_race", ob);
}

private void get_race(string key, object ob)
{
	string race;
	switch(key)
	{
		case "h":
		case "H":
		case "human":
			race="human";
			write("±z¿ï¾ÜªººØ±Ú¬O¤HÃþ(Human)¡A");
			break;
//		case "z":
//		case "Z":
//		case "zerg":
//			ob->set("race","zerg");
//			break;
		case "zerg-trial":
			race="zerg";
  			write("±z¿ï¾ÜªººØ±Ú¬O²§«¬(Zerg)¡A");
			break;
		default:
				write( @RACE_TEXT_2
¥Ø«e¨S¦³³o­ÓºØ±Ú³á!!

=============== ½Ð¿ï¾ÜºØ±Ú(¿é¤J¶}ÀY¦r¥À) ==================

([1;33mH[0m)uman	  :¤HÃþ -> µo·½©ó¦a²y¡A¬°¯à¤O¤Q¤À¥­§¡ªººØ±Ú¡C¥Ñ©ó¦³
		   ¬Û·í©ô²±ªº³Ð³y¤O¡A¬Gµo®i¥X¤Q¤À¦h¼Ë¤Æªº§Þ
		   ¯à»PÂ×´IªºªZ¾¹¸Ë³Æ¡C
([1;33mZ[0m)erg    :²§«¬ -> ¶}µo¤¤¡C
([1;33mP[0m)rotoss :¯«±Ú -> ¶}µo¤¤¡C

===========================================================
ºØ±Ú¤@¦ý¨M©w¤§«á¡M©¹«á±N¤£¯à¦A§ó§ï¡M½Ð·V¿ï¡C

RACE_TEXT_2
	);
			write("±z§Æ±æ§êºtªººØ±Ú¬O¡S");
			input_to("get_race", ob);
			return;
	}

	write("±z½T©w­n¿ï¾Ü³o­ÓºØ±Ú¶Ü(y/n)¡S");
	input_to("confirm_race", ob, race);
}

private void confirm_race(string yn, object ob,string race)
{
	object user;
	if( yn=="" ) {
		write("±z½T©w­n¿ï¾Ü "+race+" ³o­ÓºØ±Ú¶Ü(y/n)¡S");
		input_to("confirm_race", ob, race);
		return;
	}	

	if( yn[0]!='y' && yn[0]!='Y' ) {
				write( @RACE_TEXT_3
¦n§a¡A½Ð±z­«·s¿ï¾Ü±zªººØ±Ú¡C

=============== ½Ð¿ï¾ÜºØ±Ú(¿é¤J¶}ÀY¦r¥À) ==================

([1;33mH[0m)uman	  :¤HÃþ -> µo·½©ó¦a²y¡A¬°¯à¤O¤Q¤À¥­§¡ªººØ±Ú¡C¥Ñ©ó¦³
		   ¬Û·í©ô²±ªº³Ð³y¤O¡A¬Gµo®i¥X¤Q¤À¦h¼Ë¤Æªº§Þ
		   ¯à»PÂ×´IªºªZ¾¹¸Ë³Æ¡C
([1;33mZ[0m)erg    :²§«¬ -> ¶}µo¤¤¡C
([1;33mP[0m)rotoss :¯«±Ú -> ¶}µo¤¤¡C

===========================================================
ºØ±Ú¤@¦ý¨M©w¤§«á¡M©¹«á±N¤£¯à¦A§ó§ï¡M½Ð·V¿ï¡C

RACE_TEXT_3
	);
		write("±z­n§êºt¨¤¦âªººØ±Ú¡S");
		input_to("get_race", ob);
		return;
	}
	// If you want do race stuff, ask player to choose one here, then you can
	// set the user's body after the question is answered. The following are
	// options for player's body, so we clone a body here.
	ob->set("race",race);
	ob->set("body", USER_OB);
	if( !objectp(user = make_body(ob,race)) ) return;
	write(@WORLD
========= ½Ð¿ï¾Ü¥Xµo®ÉªÅ(¿é¤J¶}ÀY¦r¥À) ==========

([1;33mP[0m)ast 	 ¥j¥N¡R	¤@­Ó¯Âºé¥ÎªZ¤O¸Ñ¨M°ÝÃDªº²V¶Ã¦~¥N¡A
		·Q¥Í¦s´N¥²¶·µL¤îºÉªº¥´­Ë©Ò¦³Ävª§ªÌ
		¡AºÉ±¡¨É¨ü¤M¥ú¼C¼vªº§Ö¼Ö§a¡C
		
([1;33mN[0m)ow 	 ²{¥N¡R ¤@­Ó¬Ý¦ü©M¥­«o¤S¦M¾÷­«­«ªº¦~¥N¡A¥²
		¶·¾Ö¦³¹L¤Hªº´¼¼z»P¾AÀ³¤O¤~¦³¥i¯à§J
		ªA±µ¿æ¦Ó¨Óªº¬D¾Ô¡A¹Îµ²¦X§@¥H²³À»¹è
		¤~¬O³Ó§Qªºªkªù¡C     --¼È®ÉÃö³¬ºû­×--

([1;33mF[0m)uture ¥¼¨Ó¡R ¹L«×µo®iªº¬ì§Þ±a¨ÓµLªkÀ±¸Éªº¨aÃø¡C
		¦b³o­Óª¾ÃÑ»·³Ó©ó¤@¤Áªº®É¥N¡A¾Ö¦³°]
		´I´N¾Ö¦³¤O¶q¡C¦Ó³Ì¿Ëªñ§Aªº¤H©¹©¹´N
		¬O§A³Ì¤jªº¼Ä¤H¡C     --¼È®ÉÃö³¬ºû­×-- 

=================================================
¥Ø«e¥j¥N³Ì¬°§¹¾ã¡A²{¥Nªº·s¦a¹Ï¨t²Î±NÅý±z¦Õ¥Ø¤@·s¡C
¦pªG±z¬O²Ä¤@¦¸ª±mud¡A¥i¿é¤J[1;36mnewbie[0m ¶i¤J·s¤â±Ð«Ç¡C

WORLD);
	input_to("get_world", ob, user);
}
//®ÉªÅ¤¶²Ð»P¿ï¾Ü
private void get_world(string world, object ob, object user)
{
	if( world=="" ) {
		write("½Ð¿ï¾Ü¤@­Ó®ÉªÅ¶i¤J¹CÀ¸¡R(helpÆ[¬Ý»¡©ú)");
		input_to("get_world", ob, user);
		return;
	}
	if(world!="p" && world!="past" && world!="P" && world!="newbie")
//  && world!="n" && world!="now" && world!="f" && world!="future" && world!="N" && world!="F" 
	{
              		write(@WORLD_1

========= ½Ð¿ï¾Ü¥Xµo®ÉªÅ(¿é¤J¶}ÀY¦r¥À) ==========

([1;33mP[0m)ast 	 ¥j¥N¡R	¤@­Ó¯Âºé¥ÎªZ¤O¸Ñ¨M°ÝÃDªº²V¶Ã¦~¥N¡A
		·Q¥Í¦s´N¥²¶·µL¤îºÉªº¥´­Ë©Ò¦³Ävª§ªÌ
		¡AºÉ±¡¨É¨ü¤M¥ú¼C¼vªº§Ö¼Ö§a¡C
		
([1;33mN[0m)ow 	 ²{¥N¡R ¤@­Ó¬Ý¦ü©M¥­«o¤S¦M¾÷­«­«ªº¦~¥N¡A¥²
		¶·¾Ö¦³¹L¤Hªº´¼¼z»P¾AÀ³¤O¤~¦³¥i¯à§J
		ªA±µ¿æ¦Ó¨Óªº¬D¾Ô¡A¹Îµ²¦X§@¥H²³À»¹è
		¤~¬O³Ó§Qªºªkªù¡C     --¼È®ÉÃö³¬ºû­×-- 

([1;33mF[0m)uture ¥¼¨Ó¡R ¹L«×µo®iªº¬ì§Þ±a¨ÓµLªkÀ±¸Éªº¨aÃø¡C
		¦b³o­Óª¾ÃÑ»·³Ó©ó¤@¤Áªº®É¥N¡A¾Ö¦³°]
		´I´N¾Ö¦³¤O¶q¡C¦Ó³Ì¿Ëªñ§Aªº¤H©¹©¹´N
		¬O§A³Ì¤jªº¼Ä¤H¡C     --¼È®ÉÃö³¬ºû­×--   

=================================================
¥Ø«e¥j¥N³Ì¬°§¹¾ã¡A²{¥Nªº·s¦a¹Ï¨t²Î±NÅý±z¦Õ¥Ø¤@·s¡C
¦pªG±z¬O²Ä¤@¦¸ª±mud¡A¥i¿é¤J[1;36mnewbie[0m ¶i¤J·s¤â±Ð«Ç¡C

WORLD_1);
		write("½Ð¿ï¾Ü¤@­Ó®ÉªÅ¶i¤J¹CÀ¸¡R");
		input_to("get_world", ob, user);
		return;
	}
	switch(world)
	{
		case "p":
		case "past":
			user->set("startroom",START_ROOM_PAST);
			break;
			/*
		case "n":
		case "now":
			user->set("startroom",START_ROOM_NOW);
			break;
		case "f":
		case "future":
			user->set("startroom",START_ROOM_FUTURE);
			break;
			*/
		default:
			user->set("startroom",START_ROOM_NEWBIE);
			break;
	}
		write("±z­n§êºt¨k©Ê(m)ªº¨¤¦â©Î¤k©Ê(f)ªº¨¤¦â¡S");
		input_to("get_gender", ob, user);
}

private void get_gender(string gender, object ob, object user)
{
	if( gender=="" ) {
		write("±z­n§êºt¨k©Ê(m)ªº¨¤¦â©Î¤k©Ê(f)ªº¨¤¦â¡S");
		input_to("get_gender", ob, user);
		return;
	}

	if( gender[0]=='m' || gender[0]=='M' )
		user->set("gender", "¨k©Ê");
	else if( gender[0]=='f' || gender[0]=='F' )
		user->set("gender", "¤k©Ê" );
	else {
		write("¹ï¤£°_¡M±z¥u¯à¿ï¾Ü¨k©Ê(m)©Î¤k©Ê(f)ªº¨¤¦â¡R");
		input_to("get_gender", ob, user);
		return;
	}

	log_file( "USAGE", sprintf("%s(%s) was created from %s (%s)\n",
		user->query("name"),user->query("id"),
		query_ip_name(ob), ctime(time()) ) );
	init_new_player(user);
	enter_world(ob, user);
}

private object make_body(object ob,string race)
{
	object user;

	user = new(ob->query("body"));
	if(!user) {
		write("²{¦b¥i¯à¦³¤H¥¿¦b­×§ï¨Ï¥ÎªÌª«¥óªºµ{¦¡¡MµLªk¶i¦æ½Æ»s¡C\n");
		return 0;
	}
	seteuid(ob->query("id"));
	export_uid(user);
	export_uid(ob);
	seteuid(getuid());
	user->set("id", ob->query("id"));
	user->set_name( ob->query("name"), ({ ob->query("id")}) );
	user->set("race",race);
	return user;
}

private void init_new_player(object user)
{
	user->set("birthday", time() );
	user->set("level", 1 );
	switch(user->query("race"))
	{
		case "zerg":
			user->set("str", 2 );
			user->set("con", 2 );
			user->set("int", 1 );
			user->set("dex", 3 );
			break;
		case "human":
		default:
			user->set("str", 2 );
			user->set("con", 2 );
			user->set("int", 2 );
			user->set("dex", 2 );
	}
	
	user->set("exp", 777 );

	user->set("newbie",1);
	write("±z¥Ø«e¥i¥Îªº½Í¸ÜÀW¹D¦³: chat , tchat , rumor , es ¥H¤Î shout ¡C\n");
	user->set("channels", ({ "chat","rumor","tchat" }) );
}

varargs void enter_world(object ob, object user, int silent)
{
	object mbx,book;
	string startroom,str;
	int enterance,ver;

	if(previous_object() && geteuid(previous_object()) != ROOT_UID) return;
	user->set_temp("link_ob", ob);
	ob->set_temp("body_ob", user);
	exec(user, ob);
	if(ob->query_temp("gb_player")) user->set_temp("gb_player",1);
	write("¥Ø«eÅv­­¡R" + wizhood(user) + "\n");
	user->setup();
	
	/*						*/
	/*	¨t²Î­×§ïª±®a³]©w¥i¦b¦¹³B§ó·s		*/
	/*						*/
	ver=user->query("DS_DATA_VERSION");
	if( (int)ver < 19991107 )	//³]©wª©¥»
	{
		/*	¹L´Áªº³]©w	*/
		// user->set("heart_beat_rate",5);
	
		//§R°£ª±®aÀ°·|¬ö¿ý
		user->delete("club");

		/*	§ó·s¬ö¿ý	*/	
		user->set("DS_DATA_VERSION",19991107);
	}
	// In case of new player, we save them here right aftre setup 
	// compeleted.
	user->save();
	ob->save();

	if(wizardp(user))
	{
	  user->start_light(1);				//¼È®É¥[¤W·Ó©ú
	}
	if( !silent )
	{
		str = MOTD_D->list(5);
		//str = read_file(MOTD);
		if(wizardp(user)) str += read_file(WIZNOTE);
		mbx = new(MAILBOX_OB);
       	        mbx->set_owner(user->query("id"));
		if( mbx->query_mail_flag() ) {
			str+=@MAIL_BEEP

    [1;5;37;41mùÝùùùùùùùùùùùùùùùùùùùùùùùùùß[0m
    [1;5;37;41mùø                        ùø[0m
    [1;5;37;41mùø  [0m[1;37;41m±zªº«H½c¦³¥¼Åªªº«H¥ó¡T[1;5;37;41mùø[0m
    [1;5;37;41mùø                        ùø[0m
    [1;5;37;41mùãùùùùùùùùùùùùùùùùùùùùùùùùùå[0m
MAIL_BEEP
;
		}

		if(user->query("newbie")) user->start_more(str);
		else write(str);
		if(objectp(mbx)) destruct(mbx);
                if( user->is_ghost() ) startroom = DEATH_ROOM;
		else if( !stringp(startroom = user->query("startroom")) )
			{
				if(!user->query("newbie"))
				{
					
//					enterance=random(3);
//					if(enterance==0) startroom = START_ROOM_PAST;
//					else if(enterance==1) startroom = START_ROOM_NOW;
//					else startroom = START_ROOM_FUTURE;
					startroom = START_ROOM_PAST;
				}
				else startroom = START_ROOM_NEWBIE; 

				user->set("startroom",startroom);
			}
		if(user->query("putjail_position")) startroom = "/open/always/ppl_jail";
		if( !catch(load_object(startroom)) )
			user->move(startroom);
		else
		{
			
			user->move(START_ROOM);
			startroom = START_ROOM;
			user->set("startroom", START_ROOM);
		}
		
		user->clear_map_skill(1);
		if(user->query_temp("invis") != 5) tell_room(startroom, user->query("name") + "³s½u¶i¤J³o­Ó¥@¬É¡C\n",
			({user}));
		user->force_me("wear all");
		if(!user->query_temp("notebook"))
		{
			if(book=new("/obj/notebook")) book->move(user);
		}
	}
	if(user->query_temp("invis") != 5) CHANNEL_D->do_channel( this_object(), "sys",
		sprintf("%s(%s)¥Ñ%s³s½u¶i¤J¡C", user->name(1),user->query("id"), 
			wiz_level(user)==wiz_level("(admin)")?"???.???.???.???":query_ip_name(user)) );
	UPDATE_D->check_user(user);
	RECORD_D->add_usage();
}

varargs void reconnect(object ob, object user, int silent)
{
	user->set_temp("link_ob", ob);
	ob->set_temp("body_ob", user);
	exec(user, ob);

	user->reconnect();
	if(!environment(user))
	{
		write("¹ï¤£°_¡M§A­ì¥»ªº¨­Åé¤£¦s¦b©ó³o­Ó¥@¬É, ½Ð­«·s³s½u¡C\n");
		destruct(user);
		destruct(ob);
		return;
	}
	if(user->query_temp("invis") != 5)
	{
		if( !silent )
		{
			tell_room(environment(user), user->name() + "­«·s³s½u¦^¨ì³o­Ó¥@¬É¡C\n",
			({user}));
		}
		CHANNEL_D->do_channel( this_object(), "sys",
		sprintf("%s(%s)¥Ñ%s­«·s³s½u¶i¤J¡C", user->name(1),user->query("id"), query_ip_name(user)) );
	}
	UPDATE_D->check_user(user);
}

int check_legal_ip(string ip, object ob)
{
	string *banned_ip;
   	object *usr;
	
	if( file_size("/adm/etc/bannedip") > 0 )
	{
		banned_ip = explode(read_file("/adm/etc/bannedip"), "\n");
 		if( member_array(ip, banned_ip)!=-1 )
		{
			write("¹ï¤£°_¡M§Aªº³s½u¦ì¸m¤w³Q¦C¤J©Úµ´©¹¨Ó¤á¡C\n");
			return 0;
		}
	}
	if(!undefinedp(hacker_ip[ip]))
	{
		if(hacker_ip[ip]>10)
		{
			write("¹ï¤£°_¡M±z¦³¶Ã¸Õ±K½Xªº¶ûºÃ, ¤w¼È®É³Q¦C¤J©Úµ´©¹¨Ó¤á¡C\n");
			return 0;
		}
	}
	
//-----adding by alickyuen on 2005 May 12
	usr = users();
	
	for(int j=0;j<sizeof(usr);j++)
	{
		if(
			ob!=usr[j]
			&& objectp(environment(usr[j]))
                        && !interactive(usr[j])
			// ³o¸Ì³]©w¨Ò¥~«D©TÂIip¥Î¤á 
//			|| ob->query("id") == "laser" && usr[j]->query("id") == "rank"
//			|| ob->query("id") == "rank" && usr[j]->query("id") == "laser"
        	) 
		{
			if
			(
				(
					// ³o¸Ì³]¸m¤@¨Ç¯S§O¤¹³\ªº¥i¥H¤£­­¨îªº¯¸ÂI(¥²¶·¬O¦³©T©wIPªº¯¸ÂI)
// example:			ip!="140.113.23.52"&& // ¥æ³q¤j¾Ç
					ip!="127.0.0.1" // localhost
				)
				&&
					ip==query_ip_name(usr[j])
			)
			{
				write(RED+"¹ï¤£°_¡A§A²{®É©Ò¦b¦ì¸m IP: "+ip+" ¤w³Qª±®a "+usr[j]->query("id")+" ¨Ï¥Î¡A\n"+NOR);
				write(RED+"¥Ñ©ó¨C­Ó IP ¥u¤¹³\\¦P®Éµn¤J¤@­Ó±b¸¹¡A½Ð°h¥X¨ä¥L±b¸¹¦A¸Õ¡C\n"+NOR);
				write(RED+"­Y¬O©TÂI IP ¡A½Ð¥ý¥Î¨ä¤¤¤@­Ó±b¸¹µn¤J MUD ¤¤»P¨t²ÎºÞ²z­ûÁpµ¸¡C\n"+NOR);
				CHANNEL_D->do_channel(this_object(), "sys",
					"ª±®a: "+ob->query("id")+" ¹Á¸Õ¥Ñ "+ip+" ­«ÂÐµn¤J«á³Q©Ú¡C");
				return 0;
			}
		}
	}
//-----ended
    
	return 1;
}

int check_legal_id(string id)
{
	int i;

	i = strlen(id);
	
	if( (strlen(id) < 3) || (strlen(id) > 12 ) )
	{
		write("¹ï¤£°_¡M§Aªº­^¤å¦W¦r¥²¶·¬O 3 ¨ì 12 ­Ó­^¤å¦r¥À¡C\n");
		return 0;
	}
	while(i--)
		if( id[i]<'a' || id[i]>'z' )
		{
			write("¹ï¤£°_¡M§Aªº­^¤å¦W¦r¥u¯à¥Î­^¤å¦r¥À¡C\n");
			return 0;
		}
	if( member_array(id, banned_id)!=-1 )
	{
		write("¹ï¤£°_¡M³oºØ¦W¦r·|³y¦¨¨ä¥L¤Hªº§xÂZ¡C\n");
		return 0;
	}
	

	if(IDCHECK_D->check_mob_id(id)) 
  	{
  	   write("¹ï¤£°_¡M³o­Ó¦W¦r·|Åý¨ä¥L¤H»~»{±z¬O«Dª±®a¤Hª«¡C\n");
  	   return 0;
	}			//Á×§K©MNPC ­«½Æid
	
	return 1;
}

int check_legal_name(string name)
{
	int i;

	i = strlen(name);
	
	if( (strlen(name) < 2) || (strlen(name) > 12 ) ) {
		write("¹ï¤£°_¡M§Aªº¤¤¤å¦W¦r¥²¶·¬O 1 ¨ì 6 ­Ó¤¤¤å¦r¡C\n");
		return 0;
	}
	while(i--) {
		if( name[i]<=' ' ) {
			write("¹ï¤£°_¡M§Aªº¤¤¤å¦W¦r¤£¯à¥Î±±¨î¦r¤¸¡C\n");
			return 0;
		}
		if( i%2==0 && !is_chinese(name[i..<0]) ) {
			write("¹ï¤£°_¡M½Ð±z¥Î¡u¤¤¤å¡v¨ú¦W¦r¡C\n");
			return 0;
		}
	}
	if( member_array(name, banned_name)!=-1 ) {
		write("¹ï¤£°_¡M³oºØ¦W¦r·|³y¦¨¨ä¥L¤Hªº§xÂZ¡C\n");
		return 0;
	}
	
	return 1;
}

object find_body(string name)
{
	object ob, *body;

	if( objectp(ob = find_player(name)) )
		return ob;
	body = children(USER_OB);
	for(int i=0; i<sizeof(body); i++)
		if( clonep(body[i])
		&&	getuid(body[i]) == name ) return body[i];

	return 0;
}

int set_wizlock(int level)
{
	if( wiz_level(this_player(1)) <= level )
		return 0;
	if( geteuid(previous_object()) != ROOT_UID )
		return 0;
	wiz_lock_level = level;
	return 1;
}

string query_hack()
{
	string *key,out="";
	int i,j;
	key=keys(hacker_ip);
	i = sizeof(key);
	if(i<1) return "¥Ø«e¨S¦³HACKER°O¿ý..\n";
	for(j=0;j<i;j++)
	{
		out+=sprintf("\nIP:[%15s] ¿ù»~¦¸¼Æ:%d",key[j],hacker_ip[key[j]]);
	}
	out+="\n";
	return out;
}

