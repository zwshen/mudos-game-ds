// move.c

//#pragma optimize
// #pragma save_binary

#include <dbase.h>

static int weight = 0;
static int encumb = 0, max_encumb = 0;

nomask int query_encumbrance() { return encumb; }
nomask int over_encumbranced() { return encumb > max_encumb; }

nomask int query_max_encumbrance() { return max_encumb; }
nomask void set_max_encumbrance(int e) { max_encumb = e; }
nomask void add_encumbrance(int w)
{
	encumb += w;
	if( encumb < 0 )
		log_file("move.bug", sprintf("%O encumbrance underflow.\n", this_object()));
	if( encumb > max_encumb ) this_object()->over_encumbrance();
	if( environment() ) environment()->add_encumbrance(w);
}

void over_encumbrance()
{
	if( !interactive(this_object()) ) return;
	tell_object(this_object(), "你的負荷過重了﹗\n");
}

nomask int query_weight() { return weight; }
nomask void set_weight(int w)
{
	if( !environment() ) {
		weight = w;
		return;
	}
	if( w!=weight ) environment()->add_encumbrance( w - weight );
	weight = w;
}


// This is the "current" weight of an object, which is used on weight
// checking in move().
nomask int weight() { return weight + encumb; }

varargs int move(mixed dest, int silently)
{
	object ob, env,ob_env;

	// If we are equipped, unequip first.
	if( query("equipped") && !this_object()->unequip() )
		return notify_fail("你沒有辦法取下這樣東西。\n");

	// Find the destination ob for moving.
	if( objectp(dest) )
		ob = dest;
	else if( stringp(dest) ) {
		call_other(dest, "???");
		ob = find_object(dest);
		if(!ob) return notify_fail("move: 移動失敗(無法載入目的檔案).\n");
	} else
		return notify_fail(sprintf("move: 移動至目標物件時發生錯誤: %O.\n", dest));

	// Check if the destination ob can hold this object.
	// Beforce checking it, we check if the destination is environment of
	// this_object() (or environment of its environment). If it is, then
	// this could be like get something from a bag carried by the player.
	// Since the player can carry the bag, we assume he can carry the this
	// object in the bag and encumbrance checking is unessessary.
	env = this_object();
	while(env = environment(env)) if( env==ob ) break;
	if( !env && (int)ob->query_encumbrance() + weight() > (int)ob->query_max_encumbrance() )
	{
		if( ob==this_player() ) //玩家本身觸發 get buy
		{
			if(ob_env=environment(ob))
			{
				if(ob_env==environment(this_object())) return notify_fail( this_object()->name() + "對你而言太重了。\n");
				else if(this_object()->move(ob_env))
				     {
						write( this_object()->name() + "因為太重了而掉到地上。\n");
						return 1;
				     } else return notify_fail( this_object()->name() + "對你而言太重了。\n");
			} else return notify_fail( this_object()->name() + "對你而言太重了。\n");
		}
		else return notify_fail( this_object()->name() + "對" + ob->name() + "而言太重了。\n"); //give ,go
	}

	// Move the object and update encumbrance
	if( environment() )
	{
		environment()->add_encumbrance( - weight());
		this_object()->set("last_location", file_name(environment()));
	}
	move_object(ob);
	ob->add_encumbrance(weight());

	// If we are players, try look where we are.
	if(!this_object()) return 1;
	if( interactive(this_object())		// are we linkdead?
	&&	living(this_object())		// are we still concious?
	&&	!silently )
	{
		if( query("env/brief") )
			tell_object(this_object(), environment()->query("short") + "\n");
		else
			command("look");
	}

	return 1;
}

void remove(string euid)
{
	object default_ob;

	if( !previous_object()
	||	base_name(previous_object()) != SIMUL_EFUN_OB )
		error("move: remove() 只能被 destruct() simul efun 所呼叫.\n");

	if( userp(this_object()) && euid!=ROOT_UID ) {
		log_file("destruct", sprintf("%s attempt to destruct user object %s (%s)\n",
			euid, this_object()->query("id"), ctime(time())));
		error("你(" + euid + ")不能摧毀其他的使用者。\n");
	} else if( this_object()->query("equipped")) {
		if(	!this_object()->unequip() )
			log_file("destruct", sprintf("Move: remove()呼叫unequip()失敗:%s.\n",file_name(this_object())));
	}

	// We only care about our own weight here, since remove() is called once
	// on each destruct(), so our inventory (encumbrance) will be counted as
	// well.
	if( environment() )	environment()->add_encumbrance( - weight );
	if( default_ob = this_object()->query_default_object() )
		default_ob->add("no_clean_up", -1);
}

int move_or_destruct( object dest )
{
	if( userp(this_object()) ) {
		tell_object(this_object(), "一陣時空的扭曲將你傳送到另一個地方....\n");
		move(VOID_OB);
	}
}
